<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCSJ</name>
    </assembly>
    <members>
        <member name="T:XCSJ.Algorithms.Any">
            <summary>
            任意
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Any.objectValue">
            <summary>
            对象值
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Any.XCSJ#Algorithms#IAny#anyValue">
            <summary>
            任意值
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Any.Value``1">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Any.Value``1(XCSJ.Algorithms.Converter)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="converter">获取值时使用的转换器</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Any.StringValue">
            <summary>
            字符串值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Any.Value(System.Type)">
            <summary>
            获取指定类型的值
            </summary>
            <param name="outputType">输出类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Any.Value(System.Type,XCSJ.Algorithms.Converter)">
            <summary>
            获取指定类型的值
            </summary>
            <param name="outputType">输出类型</param>
            <param name="converter">获取值时使用的转换器</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.AnyString">
            <summary>
            任意字符串：可用于字符串与其他类型对象进行转化
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.AnyString.converter">
            <summary>
            装换器;默认使用的转换器；
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.AnyString.objectValue">
            <summary>
            对象值
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.AnyString.strValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.Value``1">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.Value(System.Type)">
            <summary>
            获取指定类型的值
            </summary>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.SetValue(System.Object,XCSJ.Algorithms.Converter)">
            <summary>
            设置值
            </summary>
            <param name="value"></param>
            <param name="converter"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.SetValue``1(``0)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyString.SetValue``1(``0,XCSJ.Algorithms.Converter)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="converter">值转为字符串时使用的转换器</param>
        </member>
        <member name="T:XCSJ.Algorithms.IAny">
            <summary>
            任意接口
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.IAny.anyValue">
            <summary>
            任意值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.IAny`1">
            <summary>
            任意泛型接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.IAny`1.anyValue">
            <summary>
            任意值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Any`1">
            <summary>
            任意泛型类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.Any`1.anyValue">
            <summary>
            任意值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.AnyInt">
            <summary>
            任意整形
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.AnyTestObject">
            <summary>
            任意测试对象
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.AnyInfo">
            <summary>
            任意信息：内存对象与JSON字符串可相互转化的特殊类;一般用于各数据结构(例如数据库表结构、证书类的其他/扩展/预留信息字段等)中 其他/扩展/预留 信息字段；
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.AnyInfo.json">
            <summary>
            JSON数据对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.op_Implicit(System.String)~XCSJ.Algorithms.AnyInfo">
            <summary>
            隐式转换
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.op_Explicit(XCSJ.Algorithms.AnyInfo)~System.String">
            <summary>
            显示转换
            </summary>
            <param name="otherinfo"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.FromString(System.String)">
            <summary>
            从字符串装换为当前类型的对象
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.ToString">
            <summary>
            输出字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.SetValue(System.String,System.String)">
            <summary>
            设置键与值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo.TryGetValue``1(System.String,``0@)">
            <summary>
            尝试获取值：使用转换器<see cref="T:XCSJ.Algorithms.Converter"/>将键对应信息转为泛型类型的对象；
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>返回泛型对象，如果转换失败则返回泛型类型的默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.AnyInfo`1">
            <summary>
            任意信息泛型：内存对象与JSON字符串可相互转化的特殊类;一般用于各数据结构(例如数据库表结构、证书类的 其他/扩展/预留 信息字段等)中 其他/扩展/预留 信息字段；
            </summary>
            <typeparam name="T">任意信息泛型子类</typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo`1.FromString(System.String)">
            <summary>
            从字符串转换：从JSON字符串转换为泛型类型的对象；
            </summary>
            <param name="input">输入：JSON字符串</param>
            <returns>泛型类型的对象</returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo`1.ToString">
            <summary>
            输出字符串：将当前对象转为JSON字符串；
            </summary>
            <returns>JSON字符串</returns>
        </member>
        <member name="M:XCSJ.Algorithms.AnyInfo`1.ConvertFrom(System.String)">
            <summary>
            从字符串转换：从JSON字符串转换为泛型类型的对象；
            </summary>
            <param name="input">输入：JSON字符串</param>
            <returns>泛型类型的对象</returns>
        </member>
        <member name="T:XCSJ.Algorithms.InvokeResult">
            <summary>
            调用结果
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.success">
            <summary>
            成功：标识调用结果是否成功执行
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.InvokeResult.tagString">
            <summary>
            标签字符串
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.#ctor(System.Exception)">
            <summary>
            构造
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.#ctor(System.String,System.Exception)">
            <summary>
            构造
            </summary>
            <param name="error"></param>
            <param name="exception"></param>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.SetTag(System.Object)">
            <summary>
            设置标签
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.Create(System.String)">
            <summary>
            创建
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.op_Implicit(XCSJ.Algorithms.InvokeResult)~System.Boolean">
            <summary>
            隐式转换为<see cref="T:System.Boolean"/>类型
            </summary>
            <param name="invokeResult"></param>
        </member>
        <member name="M:XCSJ.Algorithms.InvokeResult.op_Implicit(System.Boolean)~XCSJ.Algorithms.InvokeResult">
            <summary>
            由<see cref="T:System.Boolean"/>类型隐式转换
            </summary>
            <param name="success"></param>
        </member>
        <member name="T:XCSJ.Algorithms.BaseFactory`1">
            <summary>
            基础工厂类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.BaseFactory`1.CreateOne(XCSJ.Algorithms.ParamList)">
            <summary>
            使用工厂创建一个新的实例
            调用Init对参数进行初始化操作
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseFactory`1.CreateOne">
            <summary>
            创建一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseFactory`1.Release(`0)">
            <summary>
            使用工厂销毁一个新的实例
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:XCSJ.Algorithms.ByteBuffer">
            <summary>
            字节缓冲区
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.ByteBuffer.position">
            <summary>
            位置
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.ByteBuffer.length">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.#ctor(System.Byte[])">
            <summary>
            构造
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.GetBuffer">
            <summary>
            获取缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.AsArraySegment">
            <summary>
            作为数组节
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.SeekZero">
            <summary>
            定位到0位置
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.Replace(System.Byte[])">
            <summary>
            替换
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.ReadByte">
            <summary>
            读取字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.ReadBytes(System.Byte[],System.Int32)">
            <summary>
            读取字节
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteByte(System.Byte)">
            <summary>
            写入字节
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteByte2(System.Byte,System.Byte)">
            <summary>
            写入字节
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteByte4(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            写入字节
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteByte8(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            写入字节
            </summary>
            <param name="value0"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <param name="value3"></param>
            <param name="value4"></param>
            <param name="value5"></param>
            <param name="value6"></param>
            <param name="value7"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteBytesAtOffset(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节在偏移位置
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteBytes(System.Byte[])">
            <summary>
            写入字节
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.WriteBytes(System.Byte[],System.UInt16)">
            <summary>
            写入字节
            </summary>
            <param name="buffer"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.GetBytes(System.Int32,System.Int32)">
            <summary>
            获取字节
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.RemoveBytes(System.Int32,System.Int32)">
            <summary>
            移除字节
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ByteBuffer.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Empty`1">
            <summary>
            空类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.Empty`1.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Default`1">
            <summary>
            默认类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.Default`1.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.InstanceClass`1">
            <summary>
            单例类模版抽象类;
            </summary>
            <typeparam name="T">期望单例的类型</typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.InstanceClass`1.instance">
            <summary>
            实例化单例对象的属性器
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.InstanceClass`1.Instance">
            <summary>
            获取单例对象
            </summary>
            <returns>返回单例对象</returns>
        </member>
        <member name="M:XCSJ.Algorithms.InstanceClass`1.GetInstance">
            <summary>
            获取单例对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.LinkedTypeAttribute">
            <summary>
            被链接类型特性
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkedTypeAttribute.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkedTypeAttribute.forChildClasses">
            <summary>
            用于子类
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkedTypeAttribute.purpose">
            <summary>
            用途
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkedTypeAttribute.#ctor(System.Type,System.Boolean,System.String)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="forChildClasses"></param>
            <param name="purpose"></param>
        </member>
        <member name="M:XCSJ.Algorithms.LinkedTypeAttribute.GetLinkedType(System.Type,System.String)">
            <summary>
            获取被链接类型
            </summary>
            <param name="type"></param>
            <param name="purpose"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.LinkedTypeCache">
            <summary>
            被链接类型缓存
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkedTypeCache.CreateValue(System.String,System.Type)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkedTypeCache.Get(System.Type,System.String)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <param name="purpose"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Algorithms.LinkedTypeCache.Info.linkedType">
            <summary>
            存储被LinkedTypeAttribute修饰的类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkedTypeCache.GetWithoutCache(System.Type,System.String)">
            <summary>
            不使用缓存获取类型
            </summary>
            <param name="type"></param>
            <param name="purpose"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ParamList">
            <summary>
            参数/形参 列表类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor">
            <summary>
            默认构造函数，无参数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数，序列化Serializable属性后需要编写的构造函数；
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.String,System.Object)">
            <summary>
            构造函数，直接构造具有一个key-value对的参数链表；
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Enum,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.String,System.Object,System.String,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Enum,System.Object,System.Enum,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
            <param name="key5"></param>
            <param name="value5"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.#ctor(System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object,System.Enum,System.Object)">
            <summary>
            构造
            </summary>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
            <param name="key5"></param>
            <param name="value5"></param>
        </member>
        <member name="P:XCSJ.Algorithms.ParamList.Item(System.Int32)">
            <summary>
            设置获取参数的Value；设置时有则修改，无则添加；
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Algorithms.ParamList.Item(System.Enum)">
            <summary>
            枚举索引器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Add(XCSJ.Algorithms.ParamList)">
            <summary>
            用另一个参数列表填充到当前参数列表
            追加模式；如果已经的存在的key，不能重复添加；
            </summary>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.AddSet(System.String,System.Object)">
            <summary>
            添加一个新的key-value对；<br />
            如果存在了会修改值
            </summary>
            <param name="key"></param>
            <param name="value">任意类型</param>
            <returns>添加的新key，如果存在修改后，则返回false；新添的添加返回true；</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Value(System.String)">
            <summary>
            获取参数的Value
            </summary>
            <param name="key"></param>
            <returns>返回不做转换的根Object类型</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Value``1">
            <summary>
            获取Values中第一个是T类型的参数
            </summary>
            <typeparam name="T"></typeparam>
            <returns>转化为指定的模版T类型</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Value``1(System.String)">
            <summary>
            获取参数的Value,并转为制定的模版类型;
            </summary>
            <typeparam name="T">可以是值类型也可以引用类型(类，接口等)</typeparam>
            <param name="key"></param>
            <returns>转化为指定的模版T类型</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Value``1(System.Int32)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Value``1(System.Enum)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.TValue``1">
            <summary>
            获取Values中第一个是T类型的参数
            和上一个函数同名了，只好函数名前加T
            </summary>
            <typeparam name="T"></typeparam>
            <returns>根据返回的bret结果，可判断返回值的有效性；即排除default的情况</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.TValue``1(System.String)">
            <summary>
            获取参数的Value,并转为制定的返回值类型;
            和上一个函数同名了，只好函数名前加T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns>根据返回的bret结果，可判断返回值的有效性；即排除default的情况</returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            先移出原有Dictionary中的全部元素，再使用传入参数进行填充；
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.ToString">
            <summary>
            输出对象信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ParamList.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ReturnValue">
            <summary>
            返回值类
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.valid">
            <summary>
            返回值中实体信息的有效性；
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.tag">
            <summary>
            返回值类的额外绑定体对象
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.Empty">
            <summary>
            空
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.Yes">
            <summary>
            对<see cref="M:XCSJ.Algorithms.ReturnValue.True(System.Object)"/>无参数传入时的再优化，不再需要每次都new对象，直接返回已经设置好的静态对象；
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.No">
            <summary>
            对<see cref="M:XCSJ.Algorithms.ReturnValue.False(System.Object)"/>无参数传入时的再优化，不再需要每次都new对象，直接返回已经设置好的静态对象；
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.YesString">
            <summary>
            <see cref="F:XCSJ.Algorithms.ReturnValue.Yes"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.NoString">
            <summary>
            <see cref="F:XCSJ.Algorithms.ReturnValue.No"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.TrueString">
            <summary>
            真字符串，等同于<see cref="F:XCSJ.Algorithms.ReturnValue.YesString"/>
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ReturnValue.FalseString">
            <summary>
            假字符串，等同于<see cref="F:XCSJ.Algorithms.ReturnValue.NoString"/>
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.op_Implicit(System.Boolean)~XCSJ.Algorithms.ReturnValue">
            <summary>
            由布尔隐式转化
            </summary>
            <param name="valid"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.op_Implicit(XCSJ.Algorithms.ReturnValue)~System.Boolean">
            <summary>
            隐式转化为布尔
            </summary>
            <param name="rv"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.op_True(XCSJ.Algorithms.ReturnValue)">
            <summary>
            重载真
            </summary>
            <param name="rv"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.op_False(XCSJ.Algorithms.ReturnValue)">
            <summary>
            重载假
            </summary>
            <param name="rv"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.#ctor(System.Boolean,System.Object)">
            <summary>
            返回值的构造函数
            </summary>
            <param name="valid"></param>
            <param name="objectValue"></param>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.Value``1">
            <summary>
            将对象值转为期望的模版类型对象，不调用转换器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.Value(System.Type)">
            <summary>
            将对象值转为期望的类型对象，不调用转换器
            </summary>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.ToString">
            <summary>
            重载将类中信息输出到字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.ToStringWithPrefix(System.String)">
            <summary>
            将类中信息输出到字符串<br />
            如果对象值<see cref="P:XCSJ.Algorithms.Any.objectValue"/>不空，则输出该对象字符串的脚本参数字符串；否则输出<see cref="F:XCSJ.Algorithms.ReturnValue.valid"/>的字符串,同时加参数前缀；
            </summary>
            <param name="prefix">参数前缀</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.GetObjectValue(System.String)">
            <summary>
            获取对象值
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.True(System.Object)">
            <summary>
            真
            </summary>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.False(System.Object)">
            <summary>
            假
            </summary>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.Create(System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="valid"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.Create(System.Boolean,System.Object)">
            <summary>
            创建
            </summary>
            <param name="valid"></param>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.ReturnValue.ConvertTo">
            <summary>
            转换为
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.TCacheValue`2">
            <summary>
            泛型缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCacheValue`3">
            <summary>
            泛型缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCacheValue`4">
            <summary>
            泛型缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCacheValue`5">
            <summary>
            泛型缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCacheValue`6">
            <summary>
            泛型缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.ITCache">
            <summary>
            实例泛型缓存
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.TCache`3">
            <summary>
            泛型缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCache`4">
            <summary>
            泛型缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCache`5">
            <summary>
            泛型缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCache`6">
            <summary>
            泛型缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.TCache`7">
            <summary>
            泛型缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.ITICache">
            <summary>
            泛型实例缓存接口
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.TICache`3">
            <summary>
            泛型实例缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.TICache`3.Cache">
            <summary>
            Cache只读单例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`3.CacheClear">
            <summary>
            缓存清理：对静态对象<see cref="F:XCSJ.Algorithms.TICache`3.Cache"/>执行清理函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`3.GetCacheValue(`1,`2)">
            <summary>
            获取缓存值
            </summary>
            <param name="key1">主键1</param>
            <param name="defaultValue">默认值</param>
            <returns>主键1对应的缓存值存在，则返回缓存值；否则返回默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.TICache`4">
            <summary>
            泛型实例缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.TICache`4.Cache">
            <summary>
            Cache只读单例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`4.CacheClear">
            <summary>
            缓存清理：对静态对象<see cref="F:XCSJ.Algorithms.TICache`4.Cache"/>执行清理函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`4.GetCacheValue(`1,`2,`3)">
            <summary>
            获取缓存值
            </summary>
            <param name="key1">主键1</param>
            <param name="key2">主键2</param>
            <param name="defaultValue">默认值</param>
            <returns>主键1、主键2对应的缓存值存在，则返回缓存值；否则返回默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.TICache`5">
            <summary>
            泛型实例缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.TICache`5.Cache">
            <summary>
            Cache只读单例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`5.CacheClear">
            <summary>
            缓存清理：对静态对象<see cref="F:XCSJ.Algorithms.TICache`5.Cache"/>执行清理函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`5.GetCacheValue(`1,`2,`3,`4)">
            <summary>
            获取缓存值
            </summary>
            <param name="key1">主键1</param>
            <param name="key2">主键2</param>
            <param name="key3">主键3</param>
            <param name="defaultValue">默认值</param>
            <returns>主键1、主键2、主键3对应的缓存值存在，则返回缓存值；否则返回默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.TICache`6">
            <summary>
            泛型实例缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.TICache`6.Cache">
            <summary>
            Cache只读单例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`6.CacheClear">
            <summary>
            缓存清理：对静态对象<see cref="F:XCSJ.Algorithms.TICache`6.Cache"/>执行清理函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`6.GetCacheValue(`1,`2,`3,`4,`5)">
            <summary>
            获取缓存值
            </summary>
            <param name="key1">主键1</param>
            <param name="key2">主键2</param>
            <param name="key3">主键3</param>
            <param name="key4">主键4</param>
            <param name="defaultValue">默认值</param>
            <returns>主键1、主键2、主键3、主键4对应的缓存值存在，则返回缓存值；否则返回默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.TICache`7">
            <summary>
            泛型实例缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.TICache`7.Cache">
            <summary>
            Cache只读单例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`7.CacheClear">
            <summary>
            缓存清理：对静态对象<see cref="F:XCSJ.Algorithms.TICache`7.Cache"/>执行清理函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.TICache`7.GetCacheValue(`1,`2,`3,`4,`5,`6)">
            <summary>
            获取缓存值
            </summary>
            <param name="key1">主键1</param>
            <param name="key2">主键2</param>
            <param name="key3">主键3</param>
            <param name="key4">主键4</param>
            <param name="key5">主键5</param>
            <param name="defaultValue">默认值</param>
            <returns>主键1、主键2、主键3、主键4、主键5对应的缓存值存在，则返回缓存值；否则返回默认值</returns>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCacheValue`2">
            <summary>
            泛型实例缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCacheValue`2.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCacheValue`3">
            <summary>
            泛型实例缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCacheValue`3.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCacheValue`4">
            <summary>
            泛型实例缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCacheValue`4.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCacheValue`5">
            <summary>
            泛型实例缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCacheValue`5.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCacheValue`6">
            <summary>
            泛型实例缓存值
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCacheValue`6.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ITIVCache">
            <summary>
            泛型实例值缓存接口
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCache`3">
            <summary>
            泛型实例值缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`3.CreateValue(`1)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`3.ForeachValues(System.Action{`1,`2})">
            <summary>
            遍历值
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCache`4">
            <summary>
            泛型实例值缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`4.CreateValue(`1,`2)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`4.ForeachValues(System.Action{`1,`2,`3})">
            <summary>
            遍历值
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCache`5">
            <summary>
            泛型实例值缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`5.CreateValue(`1,`2,`3)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`5.ForeachValues(System.Action{`1,`2,`3,`4})">
            <summary>
            遍历值
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCache`6">
            <summary>
            泛型实例值缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`6.CreateValue(`1,`2,`3,`4)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`6.ForeachValues(XCSJ.Extension.Action{`1,`2,`3,`4,`5})">
            <summary>
            遍历值
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Algorithms.TIVCache`7">
            <summary>
            泛型实例值缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`7.CreateValue(`1,`2,`3,`4,`5)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <param name="key5"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.TIVCache`7.ForeachValues(XCSJ.Extension.Action{`1,`2,`3,`4,`5,`6})">
            <summary>
            遍历值
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Algorithms.ICacheValue">
            <summary>
            缓存值接口
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.CacheValue`1">
            <summary>
            1级缓存值：拥有1个索引键值的缓存值
            </summary>
            <typeparam name="TKey1"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.CacheValue`1.key1">
            <summary>
            1级键值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.CacheValue`2">
            <summary>
            2级缓存值：拥有2个索引键值的缓存值
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.CacheValue`2.key2">
            <summary>
            2级键值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.CacheValue`3">
            <summary>
            3级缓存值：拥有3个索引键值的缓存值
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.CacheValue`3.key3">
            <summary>
            3级键值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.CacheValue`4">
            <summary>
            4级缓存值：拥有4个索引键值的缓存值
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.CacheValue`4.key4">
            <summary>
            4级键值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.CacheValue`5">
            <summary>
            5级缓存值：拥有5个索引键值的缓存值
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.CacheValue`5.key5">
            <summary>
            5级键值
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Cache`2">
            <summary>
            1级缓存：拥有1个索引键值的缓存
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`2.TryGetValue(`0,`1@,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="key1"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`2.CreateValue(`0)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Cache`3">
            <summary>
            2级缓存：拥有2个索引键值的缓存
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`3.TryGetValue(`0,`1,`2@,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`3.CreateValue(`0,`1)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`3.CreateValue(`0)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Cache`4">
            <summary>
            3级缓存：拥有3个索引键值的缓存
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`4.TryGetValue(`0,`1,`2,`3@,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`4.CreateValue(`0,`1,`2)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`4.CreateValue(`0,`1)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Cache`5">
            <summary>
            4级缓存：拥有4个索引键值的缓存
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`5.TryGetValue(`0,`1,`2,`3,`4@,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`5.CreateValue(`0,`1,`2,`3)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`5.CreateValue(`0,`1,`2)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Cache`6">
            <summary>
            5级缓存：拥有5个索引键值的缓存
            </summary>
            <typeparam name="TKey1"></typeparam>
            <typeparam name="TKey2"></typeparam>
            <typeparam name="TKey3"></typeparam>
            <typeparam name="TKey4"></typeparam>
            <typeparam name="TKey5"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`6.TryGetValue(`0,`1,`2,`3,`4,`5@,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <param name="key5"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`6.CreateValue(`0,`1,`2,`3,`4)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <param name="key5"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Cache`6.CreateValue(`0,`1,`2,`3)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <param name="key4"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ILinkType">
            <summary>
            关联类型接口
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.ILinkType.obj">
            <summary>
            关联类型的实例对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.ILinkType.GetLinkType">
            <summary>
            获取关联的类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.LinkType`1">
            <summary>
            关联类型泛型类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.LinkType`1.Type">
            <summary>
            关联的实际类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkType`1.obj">
            <summary>
            对象
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.#ctor(System.Object)">
            <summary>
            构造
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.GetLinkType">
            <summary>
            获取关联类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.GetXFieldInfo(System.String,System.Reflection.BindingFlags)">
            <summary>
            获取字段信息
            </summary>
            <param name="name"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.GetXPropertyInfo(System.String,System.Reflection.BindingFlags)">
            <summary>
            获取属性信息
            </summary>
            <param name="name"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.GetXMethodInfo(System.String,System.Reflection.BindingFlags)">
            <summary>
            获取方法信息
            </summary>
            <param name="name"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType`1.GetXMethodInfo(System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            获取方法信息
            </summary>
            <param name="name"></param>
            <param name="types"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ILinkType_Name">
            <summary>
            带名称的关联类型接口
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.LinkType_Name`1">
            <summary>
            带名称的关联类型泛型类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType_Name`1.#ctor(System.Object)">
            <summary>
            构造
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Algorithms.LinkType_Name`1.#ctor">
            <summary>
            接口
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkType_Name`1.name_PropertyInfo">
            <summary>
            名称属性信息
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.LinkType_Name`1.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.BaseLinkTypeAttribute">
            <summary>
            基础关联类型特性
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type">
            <summary>
            类型:缓存的类型对象
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.BaseLinkTypeAttribute.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.BaseLinkTypeAttribute.linkType">
            <summary>
            关联类型；根据<see cref="P:XCSJ.Algorithms.BaseLinkTypeAttribute.linkTypeMode"/>值的不同，本值具有不同的解释。
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.BaseLinkTypeAttribute.linkTypeMode">
            <summary>
            关联类型模式
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.#ctor(System.String,XCSJ.Algorithms.ELinkTypeMode)">
            <summary>
            构造
            </summary>
            <param name="linkType"></param>
            <param name="linkTypeMode"></param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.GetLinktType(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取关联类型
            </summary>
            <param name="memberInfo">此特性实例修饰的成员信息：如果缓存的类型对象有效，则直接返回不再做处理；</param>
            <param name="updateCacheType">缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>无效情况下，查找到有效类型对象后，是否同步更新缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>为新找到的有效类型对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.GetLinkTypeAttribute``1(System.Reflection.MemberInfo,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            获取关联类型特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.GetLinkType``1(System.Reflection.MemberInfo,System.Boolean,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            获取关联类型
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <param name="updateCacheType">缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>无效情况下，查找到有效类型对象后，是否同步更新缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>为新找到的有效类型对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseLinkTypeAttribute.GetLinkType``1(System.Type,System.Boolean,System.Boolean,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            获取关联类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="includeBaseType"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <param name="updateCacheType">缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>无效情况下，查找到有效类型对象后，是否同步更新缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>为新找到的有效类型对象</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.LinkTypeHelper">
            <summary>
            关联类型辅助类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeHelper.GetLinkTypeAttribute``1(System.Reflection.MemberInfo,System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            获取关联类型特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeHelper.GetLinkType``1(System.Reflection.MemberInfo,System.Boolean,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            获取关联类型
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <param name="updateCacheType">缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>无效情况下，查找到有效类型对象后，是否同步更新缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>为新找到的有效类型对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeHelper.GetLinkType``1(System.Type,System.Boolean,System.Boolean,System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            获取关联类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="includeBaseType"></param>
            <param name="inherit"></param>
            <param name="func"></param>
            <param name="updateCacheType">缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>无效情况下，查找到有效类型对象后，是否同步更新缓存的类型对象<see cref="F:XCSJ.Algorithms.BaseLinkTypeAttribute._type"/>为新找到的有效类型对象</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.LinkTypeAttribute">
            <summary>
            关联类型特性
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeAttribute.#ctor(System.String,XCSJ.Algorithms.ELinkTypeMode)">
            <summary>
            构造
            </summary>
            <param name="linkType"></param>
            <param name="linkTypeMode"></param>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeAttribute.GetLinkType``1">
            <summary>
            获取关联类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeAttribute.GetLinkType(System.Type)">
            <summary>
            获取关联类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeAttribute.GetLinkTypeWithoutCache(System.Type,System.Boolean)">
            <summary>
            不使用缓存获取关联类型
            </summary>
            <param name="type"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.ELinkTypeMode">
            <summary>
            关联类型模式
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ELinkTypeMode.TypeFullName">
            <summary>
            类型全名称
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ELinkTypeMode.StaticMethod_GetTypeFullName">
            <summary>
            静态函数_获取类型全名称
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.ELinkTypeMode.StaticMethod_GetLinkType">
            <summary>
            静态函数_获取关联类型
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.LinkTypeCache">
            <summary>
            关联类型缓存
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeCache.CreateValue(System.Type,System.Boolean)">
            <summary>
            创建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.LinkTypeCache.Get(System.Type,System.Boolean)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Selection`1">
            <summary>
            选择集抽象类 -- 内部均为静态方法
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:XCSJ.Algorithms.Selection`1.selectionChanged">
            <summary>
            选择集变更事件：参数依次为旧选择集对象数组、撤销重做机制标记量（如果是因撤销、重做机制导致的选择集变更时本值为True，用户通过主动交互修改选择集时本值为False）
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.comparer">
            <summary>
            比较器
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.selection">
            <summary>
            选择集：获取时，如果选择集有元素则返回第一个元素，否则返回default(T)；设置时，会修改选择集为仅有传入值对应的元素；
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.selections">
            <summary>
            选择集列表
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.count">
            <summary>
            数目：选择集中元素数目，与<see cref="P:XCSJ.Algorithms.Selection`1.selections"/>数组长度结果一致；
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.countValid">
            <summary>
            有效数目：选择集中不等于default(T)值的元素数目
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.first">
            <summary>
            第一个
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.firstValid">
            <summary>
            第一个有效的：选择集中第一个不等于default(T)值的元素
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.firstWithWeakDistinct">
            <summary>
            带去重的第一个
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.last">
            <summary>
            最后一个
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.lastValid">
            <summary>
            最后一个有效的：选择集中末一个不等于default(T)值的元素
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.lastWithWeakDistinct">
            <summary>
            带去重最后一个
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Valid">
            <summary>
            有效：选择集有元素且第一个元素不等于default(T)值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.CallSelectionChanged(System.Action,System.Boolean)">
            <summary>
            调用选择集变更
            </summary>
            <param name="action">修改选择集的具体动作</param>
            <param name="isUndoOrRedo">本次修改动作是否是因撤销重做机制导致的修改</param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Equals(`0,`0)">
            <summary>
            相等
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Init(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            初始化：初始化选择集的相等比较器
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Distinct">
            <summary>
            去重
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Add(`0)">
            <summary>
            添加
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.AddIfNotContains(`0)">
            <summary>
            不包含则添加
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.AddOrRemove(`0)">
            <summary>
            添加或移除；无则添加，有则移除；
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.AddOrRemoveWithDistinct(`0)">
            <summary>
            带去重添加或移除；无则添加，有则移除；
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.AddWithDistinct(`0)">
            <summary>
            带去重添加
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Clear">
            <summary>
            清理：会将选择集清空
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Contains(`0)">
            <summary>
            包含
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.Contains(System.Func{`0,System.Boolean})">
            <summary>
            包含
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.MoveToLast(`0)">
            <summary>
            移动至选择集链表尾部
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.MoveToFirst(`0)">
            <summary>
            移动至选择集链表头部
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.ClearWithoutCallback">
            <summary>
            不带回调的清理
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Selection`1.SelectionCommand">
            <summary>
            选择集命令:可用于记录选择集信息并实现撤销重做机制的命令
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.Selection`1.SelectionCommand.oldSelections">
            <summary>
            旧选择集
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Selection`1.SelectionCommand.newSelections">
            <summary>
            新选择集
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.SelectionCommand.Do">
            <summary>
            做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.SelectionCommand.Undo">
            <summary>
            撤销
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Selection`1.SelectionCommand.Record(`0[])">
            <summary>
            记录
            </summary>
            <param name="oldSelections">旧选择集</param>
        </member>
        <member name="T:XCSJ.Algorithms.XUndo`1">
            <summary>
            撤销与重做
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.XUndo`1.commandHandle">
            <summary>
            命令处理
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XUndo`1.isDoingOrUndoing">
            <summary>
            标识是否正在撤销与重做中
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XUndo`1.isDoing">
            <summary>
            标识是否正在重做中
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.Do">
            <summary>
            重做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.CanDo">
            <summary>
            能否重做
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Algorithms.XUndo`1.isUndoing">
            <summary>
            标识是否正在撤销中
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.Undo">
            <summary>
            撤销
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.CanUndo">
            <summary>
            能否撤销
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.Record(`0)">
            <summary>
            记录
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XUndo`1.Clear">
            <summary>
            清空命令
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.XObject`2">
            <summary>
            延时缓存对象类
            </summary>
            <typeparam name="T">子类类型</typeparam>
            <typeparam name="TObject">实际缓存的对象类型</typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.XObject`2._obj">
            <summary>
            真实对象
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XObject`2.obj">
            <summary>
            对象
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XObject`2.newFunc">
            <summary>
            新建对象的函数
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XObject`2.validFunc">
            <summary>
            对象有效性判断的函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.#ctor(System.Func{`1,System.Boolean},System.Func{`0,`1})">
            <summary>
            构造
            </summary>
            <param name="validFunc"></param>
            <param name="newFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.#ctor(System.Func{`0,`1})">
            <summary>
            构造
            </summary>
            <param name="newFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.ValidObject">
            <summary>
            验证对象；调用对象有效性判断的函数进行判断，如果无效则调用新建对象的函数；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.SetObjectDefault">
            <summary>
            设置对象为默认值，即将真实对象<see cref="F:XCSJ.Algorithms.XObject`2._obj"/>重置为默认状态(默认值)；可以理解为重置对象；
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.op_Implicit(XCSJ.Algorithms.XObject{`0,`1})~`1">
            <summary>
            
            </summary>
            <param name="xObject"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`2.DefaultValidFunc(`1)">
            <summary>
            默认验证函数
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XObject`1">
            <summary>
            延时缓存对象类
            </summary>
            <typeparam name="TObject">实际缓存的对象类型</typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`1.#ctor(System.Func{`0,System.Boolean},System.Func{XCSJ.Algorithms.XObject{`0},`0})">
            <summary>
            构造
            </summary>
            <param name="validFunc"></param>
            <param name="newFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XObject`1.#ctor(System.Func{XCSJ.Algorithms.XObject{`0},`0})">
            <summary>
            构造
            </summary>
            <param name="newFunc"></param>
        </member>
        <member name="T:XCSJ.Algorithms.XObjectHelper">
            <summary>
            缓存对象组手类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XObjectHelper.Get``1(System.Reflection.MemberInfo)">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XMemberInfo`2">
            <summary>
            成员信息缓存类
            </summary>
            <typeparam name="T">子类类型</typeparam>
            <typeparam name="TObject">成员信息子类</typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.XMemberInfo`2.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XMemberInfo`2.name">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XMemberInfo`2.bindingAttr">
            <summary>
            绑定标志
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XMemberInfo`2.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMemberInfo`2.#ctor(System.Func{`0,`1})">
            <summary>
            构造
            </summary>
            <param name="newFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMemberInfo`2.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMemberInfo`2.GetMember(`0)">
            <summary>
            获取成员
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMemberInfo`2.GetMember(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            获取成员
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XFieldInfo">
            <summary>
            字段信息缓存类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.GetValue(System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.GetValue``1(System.Object,``0)">
            <summary>
            获取字段值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="obj"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.GetStaticValue">
            <summary>
            获取静态字段值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.GetStaticValue``1(``0)">
            <summary>
            获取静态字段值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.SetValue(System.Object,System.Object)">
            <summary>
            设置字段值
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XFieldInfo.SetStaticValue(System.Object)">
            <summary>
            设置静态字段值
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:XCSJ.Algorithms.XPropertyInfo">
            <summary>
            属性信息缓存类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.GetValue(System.Object,System.Object[])">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.GetValue``1(System.Object,System.Object[],``0)">
            <summary>
            获取属性值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="obj"></param>
            <param name="index"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.GetStaticValue(System.Object[])">
            <summary>
            获取静态属性值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.GetStaticValue``1(System.Object[],``0)">
            <summary>
            获取静态属性值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="index"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            设置属性值
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XPropertyInfo.SetStaticValue(System.Object,System.Object[])">
            <summary>
            设置静态属性值
            </summary>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="T:XCSJ.Algorithms.XMethodBase`2">
            <summary>
            基础方法缓存类
            </summary>
            <typeparam name="T">子类类型</typeparam>
            <typeparam name="TObject">基础方法类的子类</typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.XMethodBase`2.types">
            <summary>
            类型列表；方法的参数类型列表；
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.#ctor(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="types"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.Invoke(System.Object,System.Object[])">
            <summary>
            调用方法
            </summary>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.Invoke``1(System.Object,System.Object[],``0)">
            <summary>
            调用方法
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="obj"></param>
            <param name="parameters"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.InvokeStatic(System.Object[])">
            <summary>
            调用静态函数
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.InvokeStatic``1(System.Object[],``0)">
            <summary>
            调用静态函数
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="parameters"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.InvokeStaticEmpty">
            <summary>
            调用静态空函数；即无形参的静态函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodBase`2.InvokeStaticEmpty``1(``0)">
            <summary>
            调用静态空函数；即无形参的静态函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XMethodInfo">
            <summary>
            方法信息缓存类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodInfo.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodInfo.#ctor(System.Type,System.String,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="types"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XMethodInfo.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XConstructorInfo">
            <summary>
            构造信息缓存类
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XConstructorInfo.#ctor(System.Type,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XConstructorInfo.#ctor(System.Type,System.Type[],System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="types"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XConstructorInfo.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XConstructorInfo.Invoke(System.Object[])">
            <summary>
            调用构造
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.XEventInfo">
            <summary>
            事件信息缓存类
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.XEventInfo.fieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.XEventInfo.#ctor(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="bindingAttr"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XEventInfo.GetMember">
            <summary>
            获取成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.XEventInfo.Add(System.Object,System.Delegate)">
            <summary>
            添加
            </summary>
            <param name="target"></param>
            <param name="handler"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XEventInfo.Remove(System.Object,System.Delegate)">
            <summary>
            移除
            </summary>
            <param name="target"></param>
            <param name="handler"></param>
        </member>
        <member name="M:XCSJ.Algorithms.XEventInfo.Invoke(System.Object,System.Object[])">
            <summary>
            调用事件
            </summary>
            <param name="target"></param>
            <param name="args"></param>
        </member>
        <member name="T:XCSJ.Algorithms.Base64">
            <summary>
            基础64进制类；可用于随机产生64进制；
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.Base64.Standard">
            <summary>
            标准64进制;一共65位，最后一位为补充符；
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.Base64.self64">
            <summary>
            自身64位值
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="s64"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.Random64">
            <summary>
            最后的=不做修改
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.ToBase64(System.String)">
            <summary>
            将 明文字符串 转化为 标准Base64格式的密文
            </summary>
            <param name="data">明文字符串</param>
            <returns>Base64格式的密文</returns>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.FromBase64(System.String)">
            <summary>
            将 标准Base64格式的密文 还原为 明文字符串
            </summary>
            <param name="data">Base64格式的密文</param>
            <returns>明文字符串</returns>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.SelfToBase(System.String)">
            <summary>
            将 self64格式的密文 转化为 Base64格式的密文
            </summary>
            <param name="data">self64格式的密文</param>
            <returns>Base64格式的密文</returns>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.BaseToSelf(System.String)">
            <summary>
            将 Base64格式的密文 转化为 self64格式的密文
            </summary>
            <param name="data">Base64格式的密文</param>
            <returns>self64格式的密文</returns>
        </member>
        <member name="M:XCSJ.Algorithms.Base64.ToString">
            <summary>
            输出字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.RuntimeTypeHelper">
            <summary>
            运行时类型组手
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.RuntimeTypeHelper.rtFildInfo">
            <summary>
            运行时字段信息
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.RuntimeTypeHelper.runtimePropertyInfo">
            <summary>
            运行时属性信息
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.RuntimeTypeHelper.RuntimeType">
            <summary>
            运行时类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.RuntimeTypeHelper.RtFieldInfo">
            <summary>
            运行时字段类型
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.RuntimeTypeHelper.RuntimePropertyInfo">
            <summary>
            运行时属性类型
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Converter">
            <summary>
            转换器
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.Converter.ConverterFunc">
            <summary>
            转换函数委托定义
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.Converter.ConverterFunc`2">
            <summary>
            转换函数的委托定义
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Algorithms.Converter.baseConvertFuncs">
            <summary>
            所有实例化对象都有默认的转换机制
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.Converter.convertMethods">
            <summary>
            当前程序集拥有的重载了显示或隐式转换的方法
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.Converter.customConvertFuncs">
            <summary>
            用户扩展的转换机制
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.GetConvertMethod(System.Type,System.Type)">
            <summary>
            直接获取转换函数，会调用本函数的地方，说明本函数执行返回必定有效！
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.Register``2(XCSJ.Algorithms.Converter.ConverterFunc{``0,``1})">
            <summary>
            注册转换函数
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.RegisterClass``1(System.Boolean)">
            <summary>
            注册类与字符串的转换；转换时通过JSON做处理；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="newInstanceWhenFail">当字符串到类转换失败时，本参数有效；为True，则创建新的实例对象返回；为False，返回null，即空对象；</param>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.RegisterClass``1(System.Func{System.String,``0})">
            <summary>
            注册类与字符串的转换；转换时通过JSON做处理；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="createWhenFail">当字符串到类转换失败时，本参数有效；</param>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.RegisterStruct``1">
            <summary>
            注册结构体与字符串的转换；转换时通过JSON做处理；
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.UnregisterAll">
            <summary>
            取消所有注册
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.TryConvertTo``1(System.Object,``0@)">
            <summary>
            尝试转为目标模版类型的对象
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.ConvertTo``1(System.Object,``0)">
            <summary>
            转为目标模版类型的对象;如果转换失败，返回传入的默认值；
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <param name="defaultOutput"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.ConvertTo``1(System.Object)">
            <summary>
            转为目标模版类型的对象;如果无法转换会抛出异常；
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.TryConvertTo(System.Object,System.Type,System.Object@)">
            <summary>
            尝试转为目标类型的对象
            </summary>
            <param name="input"></param>
            <param name="outputType"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.ConvertTo(System.Object,System.Type)">
            <summary>
            转为目标类型的对象；如果无法转换会抛出异常；
            </summary>
            <param name="input"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.ConvertTo(System.Object,System.Type,System.Type)">
            <summary>
            转换
            </summary>
            <param name="input"></param>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.FindBaseConverterFuncInternal(System.Type,System.Type)">
            <summary>
            查找基础转换函数，所有查找到的转换函数会加入到基础转换函数缓存中,可用于后续使用时可以提高执行效率！
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.GetConverterFuncInternal(System.Type,System.Type)">
            <summary>
            获取转换函数
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.GetConverterFunc(System.Type,System.Type)">
            <summary>
            获取转换函数,如果无法找到有效的转换函数，会报出异常
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.TryGetConverterFunc(System.Type,System.Type,XCSJ.Algorithms.Converter.ConverterFunc@)">
            <summary>
            舱室获取转换函数
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <param name="converterFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.CanConvert(System.Type,System.Type)">
            <summary>
            判断能否由输入类型转化为输出类型
            </summary>
            <param name="inputType"></param>
            <param name="outputType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.Converter.CanConvert``2">
            <summary>
            判断能否由输入类型转化为输出类型
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.IConvertTo">
            <summary>
            转换到接口
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertTo.CanConvertTo(System.Type)">
            <summary>
            判断能否转换到期望类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertTo.ConvertTo(System.Type)">
            <summary>
            转换到类型对象
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.IConvertTo`1">
            <summary>
            转换到接口泛型
            </summary>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertTo`1.ConvertTo">
            <summary>
            转换到类型对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.IConvertFrom">
            <summary>
            从对象转换接口;不对外提供使用！！！
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertFrom.CanConvertFrom(System.Type)">
            <summary>
            判断能否由期望类型转化
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertFrom.ConvertFrom(System.Object)">
            <summary>
            从对象转换到当前类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.IConvertFrom`1">
            <summary>
            从对象转换接口泛型
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertFrom`1.ConvertFrom(`0)">
            <summary>
            从对象转换到当前类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.IConvertFrom`2">
            <summary>
            与IConvertFrom泛型接口相比，优先推荐使用此类 
            </summary>
            <typeparam name="TInput">输入类型</typeparam>
            <typeparam name="TOutput">输出类型</typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.IConvertFrom`2.ConvertFrom(`0)">
            <summary>
            从对象转换到当前类型
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.FragmentMerge">
            <summary>
            碎片合并
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.FragmentMerge.Fragment">
            <summary>
            数据范围 [begin,end) ,由0开始所以左闭右开
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.FragmentMerge.Fragment.begin">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.FragmentMerge.Fragment.length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.FragmentMerge.Fragment.end">
            <summary>
            结束
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.Fragment.#ctor(System.Int64,System.Int64)">
            <summary>
            构造
            </summary>
            <param name="begin"></param>
            <param name="length"></param>
        </member>
        <member name="P:XCSJ.Algorithms.FragmentMerge.size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.FragmentMerge.canFill">
            <summary>
            能填充
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.FragmentMerge.fragments">
            <summary>
            片段列表
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.Fill(System.Int64,System.Int64)">
            <summary>
            填充
            </summary>
            <param name="begin"></param>
            <param name="length"></param>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.IsFillComplete">
            <summary>
            是否填充完成
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.GetUnfilled">
            <summary>
            获取为填充片段
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.Write">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.WriteMap">
            <summary>
            写入映射
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.WriteMap(System.Int64,System.Collections.Generic.List{XCSJ.Algorithms.FragmentMerge.Fragment})">
            <summary>
            写入映射
            </summary>
            <param name="size"></param>
            <param name="fragments"></param>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.ConvertToString">
            <summary>
            转换到字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.FragmentMerge.ConvertFromString(System.String)">
            <summary>
            从字符串转换
            </summary>
            <param name="str"></param>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandle`3">
            <summary>
            基础处理类
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <typeparam name="TArg">参数类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandle`3.HandleFunc">
            <summary>
            定义处理函数委托类型
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.GetHandleFunc(`0)">
            <summary>
            获取主键值对应的处理函数
            </summary>
            <param name="key">主键值</param>
            <returns>成功返回主键值对应的处理函数；失败返回null；</returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Call``1(``0,XCSJ.Algorithms.BaseHandle{`0,`1,`2}.HandleFunc)">
            <summary>
            调用处理函数
            </summary>
            <typeparam name="_TArg"></typeparam>
            <param name="arg">参数对象</param>
            <param name="handleFunc">处理函数</param>
            <returns>处理函数有效返回处理函数的返回值；否则返回返回值类型的默认值；</returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Call``1(``0,`0)">
            <summary>
            调用处理函数
            </summary>
            <typeparam name="_TArg">参数类型</typeparam>
            <param name="arg">处理函数的传入参数对象</param>
            <param name="key">处理函数对应主键值；通过本对象查找对应的处理函数；</param>
            <returns>返回处理函数执行结果；如找不到处理函数,返回返回值类型的默认值；</returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Call``1(``0)">
            <summary>
            调用处理函数
            </summary>
            <typeparam name="_TArg">参数类型</typeparam>
            <param name="arg">处理函数的传入参数对象</param>
            <returns>返回处理函数执行结果；如找不到处理函数,返回返回值类型的默认值；</returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Key``1(``0)">
            <summary>
            通过参数对象获取处理函数对应的主键值
            </summary>
            <typeparam name="_TArg">参数类型</typeparam>
            <param name="arg">参数对象</param>
            <returns>处理函数对应的主键值</returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Register``3(``0,System.Func{``1,``2})">
            <summary>
            注册处理函数
            </summary>
            <typeparam name="_TKey">主键类型</typeparam>
            <typeparam name="_TArg">参数类型</typeparam>
            <typeparam name="_TResult">返回值类型</typeparam>
            <param name="key">主键值</param>
            <param name="handleFunc">处理函数</param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.Unregister``1(``0)">
            <summary>
            取消注册处理函数
            </summary>
            <typeparam name="_TKey">主键类型</typeparam>
            <param name="key">主键值</param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`3.UnregisterAll">
            <summary>
            取消注册所有处理函数
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.HandleByType`2">
            <summary>
            类型处理类
            </summary>
            <typeparam name="T1">参数1类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`2.CallByBaseType``1(``0)">
            <summary>
            通过参数对象类型的基础类型（父类）调用处理函数
            </summary>
            <typeparam name="_T1">参数1类型</typeparam>
            <param name="arg1">参数对象</param>
            <returns>处理函数返回值</returns>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`2.Register``2(System.Func{``0,``1})">
            <summary>
            注册处理函数
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_TResult"></typeparam>
            <param name="handleFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`2.Unregister``1">
            <summary>
            取消注册处理函数
            </summary>
            <typeparam name="_T1">参数1类型</typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`2.Key``1(``0)">
            <summary>
            根据参数获取类型
            </summary>
            <typeparam name="_T1">参数1类型</typeparam>
            <param name="arg1">参数1对象</param>
            <returns>参数1对象对应的类型主键</returns>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandleWithArgMerge`4">
            <summary>
            带2个参数合并的基础处理类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandleWithArgMerge`4.Arg">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseHandleWithArgMerge`4.Arg.arg1">
            <summary>
            参数1
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseHandleWithArgMerge`4.Arg.arg2">
            <summary>
            参数2
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandleWithArgMerge`4.Call``2(``0,``1)">
            <summary>
            调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandleWithArgMerge`5">
            <summary>
            带3个参数合并的基础处理类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandleWithArgMerge`5.Arg">
            <summary>
            参数
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseHandleWithArgMerge`5.Arg.arg1">
            <summary>
            参数1
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseHandleWithArgMerge`5.Arg.arg2">
            <summary>
            参数2
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseHandleWithArgMerge`5.Arg.arg3">
            <summary>
            参数3
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandleWithArgMerge`5.Call``3(``0,``1,``2)">
            <summary>
            调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.HandleWithArgMergeByType`4">
            <summary>
            带3个参数合并的基础处理类
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.HandleWithArgMergeByType`4.Key``1(``0)">
            <summary>
            键值
            </summary>
            <typeparam name="_TArg"></typeparam>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.HandleWithArgMergeByType`4.Register``4(System.Func{``0,``1,``2,``3})">
            <summary>
            注册
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <typeparam name="_TResult"></typeparam>
            <param name="handleFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.HandleWithArgMergeByType`4.Unregister``1">
            <summary>
            取消注册
            </summary>
            <typeparam name="_T1"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandle`5">
            <summary>
            3参数基础处理类
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:XCSJ.Algorithms.BaseHandle`5.HandleFunc">
            <summary>
            处理函数委托
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.GetHandleFunc(`0)">
            <summary>
            获取处理函数
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Call``3(``0,``1,``2,XCSJ.Algorithms.BaseHandle{`0,`1,`2,`3,`4}.HandleFunc)">
            <summary>
            调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="handleFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Call``3(``0,``1,``2,`0)">
            <summary>
            调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Call``3(``0,``1,``2)">
            <summary>
            调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Key``3(``0,``1,``2)">
            <summary>
            键
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Register``5(``0,System.Func{``1,``2,``3,``4})">
            <summary>
            注册
            </summary>
            <typeparam name="_TKey"></typeparam>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <typeparam name="_TResult"></typeparam>
            <param name="key"></param>
            <param name="handleFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.Unregister``1(``0)">
            <summary>
            取消注册
            </summary>
            <typeparam name="_TKey"></typeparam>
            <param name="key"></param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseHandle`5.UnregisterAll">
            <summary>
            取消注册全部
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.HandleByType`4">
            <summary>
            通过类型处理
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`4.CallByBaseType``3(``0,``1,``2)">
            <summary>
            通过基类调用
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`4.Register``4(System.Func{``0,``1,``2,``3})">
            <summary>
            注册
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <typeparam name="_TResult"></typeparam>
            <param name="handleFunc"></param>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`4.Unregister``1">
            <summary>
            取消注册
            </summary>
            <typeparam name="_T1"></typeparam>
        </member>
        <member name="M:XCSJ.Algorithms.HandleByType`4.Key``3(``0,``1,``2)">
            <summary>
            键值
            </summary>
            <typeparam name="_T1"></typeparam>
            <typeparam name="_T2"></typeparam>
            <typeparam name="_T3"></typeparam>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.BaseCommand`1">
            <summary>
            基础命令
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Algorithms.BaseCommand`1._objects">
            <summary>
            对象列表
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.BaseCommand`1.activeObject">
            <summary>
            激活对象
            </summary>
        </member>
        <member name="P:XCSJ.Algorithms.BaseCommand`1.objects">
            <summary>
            对象数组
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`1.Do">
            <summary>
            做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`1.Undo">
            <summary>
            撤销
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`1.CanDo">
            <summary>
            能做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`1.CanUndo">
            <summary>
            能撤销
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.BaseCommand`2">
            <summary>
            基础命令
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Algorithms.BaseCommand`2.oldInfos">
            <summary>
            旧信息列表
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.BaseCommand`2.newInfos">
            <summary>
            新信息列表
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`2.Do">
            <summary>
            做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`2.Do(`0,`1)">
            <summary>
            做
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`2.Undo">
            <summary>
            撤销
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.BaseCommand`2.Undo(`0,`1)">
            <summary>
            撤销
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:XCSJ.Algorithms.CommandHandle">
            <summary>
            命令处理类，用于撤销与重做
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.CommandHandle.undoCommands">
            <summary>
            撤销命令堆栈
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.CommandHandle.redoCommands">
            <summary>
            重做命令堆栈
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.Undo">
            <summary>
            单步撤销
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.UndoAll">
            <summary>
            撤销全部
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.Redo">
            <summary>
            重做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.RedoAll">
            <summary>
            重做全部
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.Clear">
            <summary>
            不做撤销直接清空所有命令操作
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.CommandHandle.Record(XCSJ.Interfaces.ICommand)">
            <summary>
            用户记录一个新的操作命令，会将 重做堆栈 清空
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Algorithms.EAliasRule">
            <summary>
            别名规则
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRule.Default">
            <summary>
            缺省处理规则：默认名称（按顺序识别出的名称或）的优先级高！当出现别名与默认名称冲突时，会报出异常！如仅出现一次冲突，那么可使用别名高优先级的设定！
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRule.AliasFirst">
            <summary>
            优先别名别名原则：如果别名为空，则使用缺省处理规则！
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.EAliasRuleCompare">
            <summary>
            别名规则比较
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRuleCompare.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRuleCompare.Equal">
            <summary>
            相等
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRuleCompare.Rule1">
            <summary>
            规则1
            </summary>
        </member>
        <member name="F:XCSJ.Algorithms.EAliasRuleCompare.Rule2">
            <summary>
            规则2
            </summary>
        </member>
        <member name="T:XCSJ.Algorithms.AliasRule">
            <summary>
            别名规则
            </summary>
        </member>
        <member name="M:XCSJ.Algorithms.AliasRule.Compare(XCSJ.Algorithms.EAliasRule,XCSJ.Algorithms.EAliasRule)">
            <summary>
            比较
            </summary>
            <param name="rule1"></param>
            <param name="rule2"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ModelEventArgs">
            <summary>
            模型事件参数
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ModelEventArgs.model">
            <summary>
            模型
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventArgs.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:XCSJ.ComponentModel.IModelEventBroadcaster">
            <summary>
            模型事件广播器
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.IModelEventBroadcaster.BroadcastModelEvent(XCSJ.ComponentModel.ModelEventArgs)">
            <summary>
            广播模型事件
            </summary>
            <param name="modelEventArgs">模型事件参数</param>
        </member>
        <member name="T:XCSJ.ComponentModel.IModelEventListener">
            <summary>
            模型事件监听器
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.IModelEventListener.AddModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            添加模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.ComponentModel.IModelEventListener.RemoveModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            移除模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="T:XCSJ.ComponentModel.ModelEventListener">
            <summary>
            模型事件监听器
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ModelEventListener.onModelEvent">
            <summary>
            当模型事件
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ModelEventListener.sender">
            <summary>
            发送者
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventListener.#ctor(System.Object)">
            <summary>
            构造
            </summary>
            <param name="sender">发送者</param>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventListener.AddModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            添加模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventListener.RemoveModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            移除模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventListener.CallModelEvent(System.Object,XCSJ.ComponentModel.ModelEventArgs)">
            <summary>
            调用模型事件
            </summary>
            <param name="sender">发送者</param>
            <param name="modelEventArg">模型事件参数</param>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelEventListener.CallModelEvent(XCSJ.ComponentModel.ModelEventArgs)">
            <summary>
            调用模型事件
            </summary>
            <param name="modelEventArg">模型事件参数</param>
        </member>
        <member name="T:XCSJ.ComponentModel.ModelPropertyWillChangeEventArgs">
            <summary>
            模型属性将变更事件参数
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelPropertyWillChangeEventArgs.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:XCSJ.ComponentModel.ModelPropertyChangedEventArgs">
            <summary>
            模型属性已变更事件参数
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ModelPropertyChangedEventArgs.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:XCSJ.ComponentModel.ComponentHelper">
            <summary>
            组件助手类
            </summary>
        </member>
        <member name="T:XCSJ.ComponentModel.ComponentInfo">
            <summary>
            组件信息
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ComponentInfo._componentguid">
            <summary>
            组件GUID
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfo.componentguid">
            <summary>
            组件类的类型GUID
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ComponentInfo._name">
            <summary>
            组件名
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfo.name">
            <summary>
            组件名称
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ComponentInfo._fullname">
            <summary>
            组件全名称
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfo.fullname">
            <summary>
            组件类的全名
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentInfo.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentInfo.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentInfo.CheckTypeAccess(System.Type,System.Collections.Generic.List{XCSJ.ComponentModel.ComponentInfo},System.Collections.Generic.List{XCSJ.ComponentModel.ComponentInfo},System.Boolean)">
            <summary>
            检查类型权限
            </summary>
            <param name="componentType">组件类型</param>
            <param name="forbiddenComponents">禁止组件</param>
            <param name="allowComponents">允许组件</param>
            <param name="defaultHandleComponentUse">默认处理组件使用</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentInfo.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ComponentInfoSet">
            <summary>
            组件信息集合
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfoSet.forbiddenComponents">
            <summary>
            禁用的组件列表
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfoSet.allowComponents">
            <summary>
            允许的组件列表
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ComponentInfoSet.defaultHandleComponentUse">
            <summary>
            不在允许列表中的组件，是否允许使用；即是否允许用户做组件开发，可用于限制用户是否允许扩展化开发
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentInfoSet.CheckTypeAccess(System.Type)">
            <summary>
            检查类型权限
            </summary>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ComponentKitAttribute">
            <summary>
            组件包特性
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ComponentKitAttribute.kit">
            <summary>
            包类型
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentKitAttribute.#ctor(XCSJ.ComponentModel.EKit)">
            <summary>
            构造函数
            </summary>
            <param name="kit">包类型</param>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentKitAttribute.GetKit(System.Type,XCSJ.ComponentModel.EKit)">
            <summary>
            获取包
            </summary>
            <param name="type"></param>
            <param name="kit"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ComponentOptionAttribute">
            <summary>
            组件选项 特性类
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ComponentOptionAttribute.componentOption">
            <summary>
            选项类型
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentOptionAttribute.#ctor(XCSJ.ComponentModel.EComponentOption)">
            <summary>
            构造函数
            </summary>
            <param name="componentOption"></param>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentOptionAttribute.GetComponentOptionNoCache(System.Type,XCSJ.ComponentModel.EComponentOption)">
            <summary>
            无缓存获取组件选项
            </summary>
            <param name="type"></param>
            <param name="componentOption"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.ComponentOptionAttribute.GetComponentOption(System.Type,XCSJ.ComponentModel.EComponentOption)">
            <summary>
            获取组件选项
            </summary>
            <param name="type"></param>
            <param name="componentOption"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ColumnHeaderAttribute">
            <summary>
            列标题特性
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.ColumnHeaderAttribute.DefaultWidth">
            <summary>
            默认宽度
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ColumnHeaderAttribute.width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.ColumnHeaderAttribute.ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ColumnHeaderAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ColumnHeaderAttribute.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="width">宽度</param>
        </member>
        <member name="T:XCSJ.ComponentModel.EComponentOption">
            <summary>
            组件选项
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Core">
            <summary>
            核心组件，必须被实例化的；是整个系统的核心功能组件；
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Required">
            <summary>
            必选组件，强烈推荐用户启用；用于辅助核心组件完成大部分功能的组件；禁用，会造成很多功能失效；
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Recommended">
            <summary>
            推荐组件，推荐用户启用；用于辅助核心组件完成大部分功能的组件；禁用，会造成很多功能失效；
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Optional">
            <summary>
            可选组件；组件是可选的；启用或禁用只会对组件功能产生影响，不会对系统造成过多影响；
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Timeout">
            <summary>
            过期组件，不可再使用，不再提供升级与维护的组件；
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EComponentOption.Error">
            <summary>
            错误组件，强制不可再使用，再使用会导致系统性错误；
            </summary>
        </member>
        <member name="T:XCSJ.ComponentModel.EKit">
            <summary>
            软件包枚举
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EKit.Base">
            <summary>
            基础:基于中文可视化逻辑编写的基础功能插件包;其它类型软件包均依赖基础包中插件进行工作;
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EKit.Advanced">
            <summary>
            高级:基于通用算法或第三方插件开发的各种高级功能插件包;
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EKit.Peripheral">
            <summary>
            外设:基于各种不同类型外设做数据交互与数据处理的插件包;外设指用于硬件型外部设备;
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EKit.Professional">
            <summary>
            专业:某一特定专业或行业定制功能的插件包;
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.EKit.Project">
            <summary>
            项目:针对具体项目或业务需求定制的插件包
            </summary>
        </member>
        <member name="T:XCSJ.ComponentModel.IValueMembers`1">
            <summary>
            值成员列表接口
            </summary>
            <typeparam name="TMember"></typeparam>
        </member>
        <member name="M:XCSJ.ComponentModel.IValueMembers`1.SetMembers(`0[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.ComponentModel.IValueMembers`1.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.FoldoutConverter`2">
            <summary>
            折页转换器：将期望类型中所有允许显示的属性进行折页显示；
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMember"></typeparam>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`2.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`2.TryConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String,`0@)">
            <summary>
            尝试从字符串转化
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`2.TryConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0,System.String@)">
            <summary>
            尝试转为字符串
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`2.TryConvertToInstanceDescriptor(`0,System.ComponentModel.Design.Serialization.InstanceDescriptor@)">
            <summary>
            尝试转化为实例描述符
            </summary>
            <param name="value"></param>
            <param name="instanceDescriptor"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.FoldoutConverter`1">
            <summary>
            折页转换器：将期望类型中所有允许显示的属性进行折页显示；
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能从源转换
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能转换到
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            从源转换
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.TryConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String,`0@)">
            <summary>
            尝试从字符串转化
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="text"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.TryConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,`0,System.String@)">
            <summary>
            尝试转为字符串
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.TryConvertToInstanceDescriptor(`0,System.ComponentModel.Design.Serialization.InstanceDescriptor@)">
            <summary>
            尝试转化为实例描述符
            </summary>
            <param name="value"></param>
            <param name="instanceDescriptor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            转换到
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            创建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取创建实例支持
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取属性
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.FoldoutConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取属性支持
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.EnumStringConverter">
            <summary>
            枚举字符串转换器：其修饰属性必须为枚举类型
            </summary>
        </member>
        <member name="P:XCSJ.ComponentModel.EnumStringConverter.enumStringType">
            <summary>
            枚举字符串类型
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.EnumStringConverter.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="M:XCSJ.ComponentModel.EnumStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能否转换为目标类型
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.EnumStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            转换为目标类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.EnumStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能否从源类型转换
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.EnumStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            从源类型转换
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.BoolStringConverter">
            <summary>
            布尔字符串转换器：其修饰属性必须为布尔类型
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.BoolStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能否转换为目标类型
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.BoolStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            转换为目标类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.BoolStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能否从源类型转换
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.BoolStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            从源类型转换
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.ICustomEnumStringConverter">
            <summary>
            自定义枚举字符串转换器接口：与<see cref="T:XCSJ.ComponentModel.CustomEnumStringConverter"/>配合使用，约束属性所在实例对象类型需继承本接口；
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.ICustomEnumStringConverter.GetCustomEnumStrings(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取自定义枚举字符串数组
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.ComponentModel.CustomEnumStringConverter">
            <summary>
            自定义枚举字符串转换器：其修饰属性必须为字符串类型且所在实例对象类型需继承<see cref="T:XCSJ.ComponentModel.ICustomEnumStringConverter"/>
            </summary>
        </member>
        <member name="F:XCSJ.ComponentModel.CustomEnumStringConverter.Empty">
            <summary>
            默认
            </summary>
        </member>
        <member name="M:XCSJ.ComponentModel.CustomEnumStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            能否从源类型转换
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.CustomEnumStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            从源类型转换
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.CustomEnumStringConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取标准值集合
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.CustomEnumStringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            返回的标准值的集合是否为独占列表:即当前值必须是标准值集合中的一个值；
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.ComponentModel.CustomEnumStringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取支持从标准值集合中选取
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.BigInteger">
            <summary>
            大整型
            </summary>
        </member>
        <member name="F:XCSJ.Maths.BigInteger.MinRadix">
            <summary>
            最小进制
            </summary>
        </member>
        <member name="F:XCSJ.Maths.BigInteger.MaxRadix">
            <summary>
            最大进制
            </summary>
        </member>
        <member name="F:XCSJ.Maths.BigInteger.MaxLength">
            <summary>
            最大长度
            </summary>
        </member>
        <member name="F:XCSJ.Maths.BigInteger.PrimesBelow2000">
            <summary>
            2000内的素数数组
            </summary>
        </member>
        <member name="P:XCSJ.Maths.BigInteger.dataLength">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.Int64)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.UInt64)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(XCSJ.Maths.BigInteger)">
            <summary>
            构造
            </summary>
            <param name="bi"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
            <param name="radix"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.Byte[])">
            <summary>
            构造
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.Byte[],System.Int32)">
            <summary>
            构造
            </summary>
            <param name="inData"></param>
            <param name="inLen"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.#ctor(System.UInt32[])">
            <summary>
            构造
            </summary>
            <param name="inData"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Implicit(System.Int64)~XCSJ.Maths.BigInteger">
            <summary>
            从长整型隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Implicit(System.UInt64)~XCSJ.Maths.BigInteger">
            <summary>
            从无符号长整型隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Implicit(System.Int32)~XCSJ.Maths.BigInteger">
            <summary>
            从整型隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Implicit(System.UInt32)~XCSJ.Maths.BigInteger">
            <summary>
            从无符号整型隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Addition(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载+
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Increment(XCSJ.Maths.BigInteger)">
            <summary>
            重载++
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Subtraction(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载-
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Decrement(XCSJ.Maths.BigInteger)">
            <summary>
            重载--
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Multiply(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载*
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_LeftShift(XCSJ.Maths.BigInteger,System.Int32)">
            <summary>
            重载左位移
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_RightShift(XCSJ.Maths.BigInteger,System.Int32)">
            <summary>
            重载右位移
            </summary>
            <param name="bi1"></param>
            <param name="shiftVal"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_OnesComplement(XCSJ.Maths.BigInteger)">
            <summary>
            重载~取反，即按位非
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_UnaryNegation(XCSJ.Maths.BigInteger)">
            <summary>
            重载-
            </summary>
            <param name="bi1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Equality(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载==
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Inequality(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载!=
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Equals(System.Object)">
            <summary>
            相等
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GetHashCode">
            <summary>
            获取Hash码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_GreaterThan(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载大于
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_LessThan(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载小于
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_GreaterThanOrEqual(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载大于等于
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_LessThanOrEqual(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载小于等于
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Division(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载/
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_Modulus(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载%求余数
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_BitwiseAnd(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载按位与
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_BitwiseOr(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载|按位或
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.op_ExclusiveOr(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            重载^按位异或
            </summary>
            <param name="bi1"></param>
            <param name="bi2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Max(XCSJ.Maths.BigInteger)">
            <summary>
            最大值
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Min(XCSJ.Maths.BigInteger)">
            <summary>
            最小
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Abs">
            <summary>
            绝对值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.ToString(System.Int32)">
            <summary>
            转字符串
            </summary>
            <param name="radix"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.ToHexString">
            <summary>
            转十六进制字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.ModPow(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            指定数字的指定次幂
            </summary>
            <param name="exp"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Gcd(XCSJ.Maths.BigInteger)">
            <summary>
            最大公约数
            </summary>
            <param name="bi"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            生成随机数
            </summary>
            <param name="bits"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GenRandomBits(System.Int32,System.Random)">
            <summary>
            生成随机位
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.BitCount">
            <summary>
            位计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.FermatLittleTest(System.Int32)">
            <summary>
            费马小测试：素数测试
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.RabinMillerTest(System.Int32)">
            <summary>
            米勒罗宾测试：素数测试
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.SolovayStrassenTest(System.Int32)">
            <summary>
            Solovay-Strassen测试：素数测试
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.LucasStrongTest">
            <summary>
            LucasStrong测试：素数测试
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.IsProbablePrime(System.Int32)">
            <summary>
            可能是素数
            </summary>
            <param name="confidence"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.IsProbablePrime">
            <summary>
            可能是素数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.IntValue">
            <summary>
            整型值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.LongValue">
            <summary>
            长整型值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Jacobi(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            雅可比
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GenPseudoPrime(System.Int32,System.Int32,System.Random)">
            <summary>
            伪素数
            </summary>
            <param name="bits"></param>
            <param name="confidence"></param>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GenCoPrime(System.Int32,System.Random)">
            <summary>
            生成互质数
            </summary>
            <param name="bits"></param>
            <param name="rand"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.ModInverse(XCSJ.Maths.BigInteger)">
            <summary>
            模逆
            </summary>
            <param name="modulus"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.GetBytes">
            <summary>
            获取字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.SetBit(System.UInt32)">
            <summary>
            设置位
            </summary>
            <param name="bitNum"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.UnsetBit(System.UInt32)">
            <summary>
            非设置位
            </summary>
            <param name="bitNum"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Sqrt">
            <summary>
            开平方
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.LucasSequence(XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger,XCSJ.Maths.BigInteger)">
            <summary>
            吕卡序列:可用于判定大素数
            </summary>
            <param name="P"></param>
            <param name="Q"></param>
            <param name="k"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.MulDivTest(System.Int32)">
            <summary>
            多重除法测试
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.RSATest(System.Int32)">
            <summary>
            RSA测试
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.RSATest2(System.Int32)">
            <summary>
            RSA测试2
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.SqrtTest(System.Int32)">
            <summary>
            开方测试
            </summary>
            <param name="rounds"></param>
        </member>
        <member name="M:XCSJ.Maths.BigInteger.Main(System.String[])">
            <summary>
            主函数：用于测试用的主函数
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:XCSJ.Maths.Prime">
            <summary>
            素数
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Prime.Prime768">
            <summary>
            已知的768比特位的素数
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Prime.OakleyPrime1024">
            <summary>
            已知的1024比特位的素数
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Prime.OakleyPrime1536">
            <summary>
            已知的1536比特位的素数
            </summary>
        </member>
        <member name="T:XCSJ.Maths.RGBA">
            <summary>
            RGBA对应红、绿、蓝、透明度
            </summary>
        </member>
        <member name="F:XCSJ.Maths.RGBA.r">
            <summary>
            红
            </summary>
        </member>
        <member name="F:XCSJ.Maths.RGBA.g">
            <summary>
            绿
            </summary>
        </member>
        <member name="F:XCSJ.Maths.RGBA.b">
            <summary>
            蓝
            </summary>
        </member>
        <member name="F:XCSJ.Maths.RGBA.a">
            <summary>
            透明度
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.R">
            <summary>
            R红
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.G">
            <summary>
            G绿
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.B">
            <summary>
            B蓝
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.A">
            <summary>
            A透明
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.r01">
            <summary>
            红0~1值
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.g01">
            <summary>
            绿0~1值
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.b01">
            <summary>
            蓝0~1值
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RGBA.a01">
            <summary>
            透明度0~1值
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RGBA.op_Implicit(XCSJ.Maths.RGBA)~System.UInt32">
            <summary>
            隐式转换为无符号整型
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.op_Implicit(XCSJ.Maths.RGBA)~XCSJ.Maths.EColor">
            <summary>
            隐式转换为颜色枚举
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.op_Implicit(XCSJ.Maths.EColor)~XCSJ.Maths.RGBA">
            <summary>
            从颜色枚举隐式转换
            </summary>
            <param name="color"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.op_Implicit(System.UInt32)~XCSJ.Maths.RGBA">
            <summary>
            从无符号整形隐式转换
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RGBA.#ctor(System.UInt32)">
            <summary>
            构造
            </summary>
            <param name="rgba"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            构造
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造
            </summary>
            <param name="r01"></param>
            <param name="g01"></param>
            <param name="b01"></param>
            <param name="a01"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RGBA.ToRGBA(System.UInt32)">
            <summary>
            转RGBA
            </summary>
            <param name="rgba"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RGBA.Set(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            设置
            </summary>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
            <param name="a"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.SetMembers(System.Byte[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.RGBA.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.RGBAConverter">
            <summary>
            RGBA转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RGBAConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RGBAConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RGBAConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取属性
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.EColor">
            <summary>
            颜色枚举
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Black">
            <summary>
            黑色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Blue">
            <summary>
            蓝色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Green">
            <summary>
            绿色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Cyan">
            <summary>
            青色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Gray">
            <summary>
            灰色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Purple">
            <summary>
            紫色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.DarkGray">
            <summary>
            暗灰色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Red">
            <summary>
            红色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Gold">
            <summary>
            金色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Magenta">
            <summary>
            品红色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Orange">
            <summary>
            橙色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.Yellow">
            <summary>
            黄色
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EColor.White">
            <summary>
            白色
            </summary>
        </member>
        <member name="T:XCSJ.Maths.RectI">
            <summary>
              <para>A 2D Rectangle defined by x, y, width, height with integers.</para>
            </summary>
        </member>
        <member name="T:XCSJ.Maths.RectI.PositionEnumerator">
            <summary>
              <para>An iterator that allows you to iterate over all positions within the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.PositionEnumerator.Current">
            <summary>
              <para>Current position of the enumerator.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectI.PositionEnumerator.#ctor(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            构造
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.PositionEnumerator.GetEnumerator">
            <summary>
              <para>Returns this as an iterator that allows you to iterate over all positions within the RectInt.</para>
            </summary>
            <returns>
              <para>This RectInt.PositionEnumerator.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectI.PositionEnumerator.MoveNext">
            <summary>
              <para>Moves the enumerator to the next position.</para>
            </summary>
            <returns>
              <para>Whether the enumerator has successfully moved to the next position.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectI.PositionEnumerator.Reset">
            <summary>
              <para>Resets this enumerator to its starting state.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.x">
            <summary>
              <para>Left coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.y">
            <summary>
              <para>Top coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.center">
            <summary>
              <para>Center coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.centerI">
            <summary>
            中心整型
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.min">
            <summary>
              <para>Lower left corner of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.max">
            <summary>
              <para>Upper right corner of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.width">
            <summary>
              <para>Width of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.height">
            <summary>
              <para>Height of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.xMin">
            <summary>
              <para>Returns the minimum X value of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.yMin">
            <summary>
              <para>Returns the minimum Y value of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.xMax">
            <summary>
              <para>Returns the maximum X value of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.yMax">
            <summary>
              <para>Returns the maximum Y value of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.position">
            <summary>
              <para>Returns the position (x, y) of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.size">
            <summary>
              <para>Returns the width and height of the RectInt.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectI.allPositionsWithin">
            <summary>
              <para>A RectInt.PositionCollection that contains all positions within the RectInt.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectI.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="xMin"></param>
            <param name="yMin"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.#ctor(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            构造
            </summary>
            <param name="position"></param>
            <param name="size"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.SetMinMax(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Sets the bounds to the min and max value of the rect.</para>
            </summary>
            <param name="minPosition"></param>
            <param name="maxPosition"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.ClampToBounds(XCSJ.Maths.RectI)">
            <summary>
              <para>Clamps the position and size of the RectInt to the given bounds.</para>
            </summary>
            <param name="bounds">Bounds to clamp the RectInt.</param>
        </member>
        <member name="M:XCSJ.Maths.RectI.Contains(XCSJ.Maths.V2I)">
            <summary>
              <para>Returns true if the given position is within the RectInt.</para>
            </summary>
            <param name="position">Position to check.</param>
            <returns>
              <para>Whether the position is within the RectInt.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectI.ToString">
            <summary>
              <para>Returns the x, y, width and height of the RectInt.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectI.Equals(XCSJ.Maths.RectI)">
            <summary>
              <para>Returns true if the given RectInt is equal to this RectInt.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.op_Implicit(System.String)~XCSJ.Maths.RectI">
            <summary>
            由字符串隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.op_Implicit(XCSJ.Maths.RectI)~System.String">
            <summary>
            隐式转化为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.SetMembers(System.Int32[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.RectI.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.RectIConverter">
            <summary>
            RectI转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectIConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectIConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectIConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取属性
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.Circle2D">
            <summary>
            二维圆形
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Circle2D.center">
            <summary>
            圆心
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Circle2D.radius">
            <summary>
            半径
            </summary>
        </member>
        <member name="M:XCSJ.Maths.Circle2D.#ctor(XCSJ.Maths.V2F,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="center">单位圆</param>
            <param name="radius">半径</param>
        </member>
        <member name="M:XCSJ.Maths.Circle2D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="x">圆形坐标x</param>
            <param name="y">圆形坐标y</param>
            <param name="radius">半径</param>
        </member>
        <member name="P:XCSJ.Maths.Circle2D.Unit">
            <summary>
            单位圆
            </summary>
        </member>
        <member name="T:XCSJ.Maths.EGeometryRelation">
            <summary>
            几何关系
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Undefine">
            <summary>
            未定义
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Coincidence">
            <summary>
            重合
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.External">
            <summary>
            外部
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Internal">
            <summary>
            内部
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Parallel">
            <summary>
            平行
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Vertical">
            <summary>
            垂直
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.Intersect">
            <summary>
            相交
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.OutsideTangent">
            <summary>
            外切
            </summary>
        </member>
        <member name="F:XCSJ.Maths.EGeometryRelation.InsideTangent">
            <summary>
            内切
            </summary>
        </member>
        <member name="T:XCSJ.Maths.GeometryRelation">
            <summary>
            求解几何关系
            </summary>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.Distance(XCSJ.Maths.V2F,XCSJ.Maths.Line2D)">
            <summary>
            求点到直线的距离
            </summary>
            <param name="point">点</param>
            <param name="line">线</param>
            <returns>距离</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.SqrDistance(XCSJ.Maths.V2F,XCSJ.Maths.Line2D)">
            <summary>
            求点到直线的距离的平方 : 使用向量投影法
            </summary>
            <param name="point">点</param>
            <param name="line">线</param>
            <returns>距离平方</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.GetRelation(XCSJ.Maths.Circle2D,XCSJ.Maths.Line2D)">
            <summary>
            求圆与直线关系
            </summary>
            <param name="c">圆</param>
            <param name="line">直线</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.GetRelation(XCSJ.Maths.Circle2D,XCSJ.Maths.Circle2D)">
            <summary>
            获取圆与圆的关系
            </summary>
            <param name="c1">圆1</param>
            <param name="c2">圆2</param>
            <returns>两圆关系</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.Intersection(XCSJ.Maths.Circle2D,XCSJ.Maths.Line2D,XCSJ.Maths.V2F@,XCSJ.Maths.V2F@)">
            <summary>
            求圆与直线的交点：向量投影法
            当只有一个交点时 p1 = p2
            </summary>
            <param name="c">圆</param>
            <param name="line">线</param>
            <param name="p1">交点1</param>
            <param name="p2">交点2</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.Intersection(XCSJ.Maths.Circle2D,XCSJ.Maths.Circle2D,XCSJ.Maths.V2F@,XCSJ.Maths.V2F@)">
            <summary>
            求两圆的交点：向量+余弦定理
            当只有一个交点时 p1 = p2
            </summary>
            <param name="c1">圆1</param>
            <param name="c2">圆2</param>
            <param name="p1">交点1</param>
            <param name="p2">交点2</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:XCSJ.Maths.GeometryRelation.GetRelation(System.Double)">
            <summary>
            根据余弦定理求到的值，判断两圆关系
            </summary>
            <param name="value">输入值</param>
            <returns>两圆关系</returns>
        </member>
        <member name="T:XCSJ.Maths.Line2D">
            <summary>
            二维直线向量表达类
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Line2D.point">
            <summary>
            直线上的点
            </summary>
        </member>
        <member name="F:XCSJ.Maths.Line2D.normal">
            <summary>
            直线法向量
            </summary>
        </member>
        <member name="M:XCSJ.Maths.Line2D.#ctor(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            构造函数
            </summary>
            <param name="point">点</param>
            <param name="normal">法向量</param>
        </member>
        <member name="M:XCSJ.Maths.Line2D.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="px">点X值</param>
            <param name="py">点Y值</param>
            <param name="nx">法向量X值</param>
            <param name="ny">法向量Y值</param>
        </member>
        <member name="T:XCSJ.Maths.MathXInternal">
            <summary>
            数学内部
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathXInternal.FloatMinNormal">
            <summary>
            普通浮点数最小值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathXInternal.FloatMinDenormal">
            <summary>
            浮点最小非规范
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathXInternal.IsFlushToZeroEnabled">
            <summary>
            是否已启用刷新到零
            </summary>
        </member>
        <member name="T:XCSJ.Maths.MathX">
            <summary>
             Math For XCSJ/XDreamer 简写为 MathX -- 取首字母
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.FloatCompareEpsilon">
            <summary>
            有效精度位6~9位
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.DoubleCompareEpsilon">
            <summary>
            有效精度位15~17
            </summary>
        </member>
        <member name="M:XCSJ.Maths.MathX.ApproximatelyZero(System.Single,System.Single)">
            <summary>
            约等于0
            </summary>
            <param name="x"></param>
            <param name="approximatelyZero"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Approximately(System.Single,System.Single,System.Single)">
            <summary>
            约等于
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="approximatelyZero"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.ApproximatelyDynamicZero(System.Single,System.Single,System.Single)">
            <summary>
            约等于动态0
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="approximatelyZeroMin"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.ApproximatelyZero(System.Double,System.Double)">
            <summary>
            约定于0
            </summary>
            <param name="x"></param>
            <param name="approximatelyZero"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Approximately(System.Double,System.Double,System.Double)">
             <summary>
            约等于
             </summary>
             <param name="x"></param>
             <param name="y"></param>
             <param name="approximatelyZero"></param>
             <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.TryParse``1(System.String,System.Collections.Generic.List{``0}@,System.Char)">
            <summary>
            尝试分析
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="resutl"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.ToString``1(``0[])">
            <summary>
            转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.ToString``1(System.Char,``0[])">
            <summary>
            转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="separator"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.Int16,System.Boolean)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <param name="ignoreMinus"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.UInt16)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.Int32,System.Boolean)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <param name="ignoreMinus"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.UInt32)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.Int64,System.Boolean)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <param name="ignoreMinus"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.BitCount(System.UInt64)">
            <summary>
            位数目
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            返回二者的比例关系
            </summary>
            <param name="f"></param>
            <param name="standard"></param>
            <param name="defaultScaleWhenStandardIsZero">当standard等于0时，返回本值</param>
            <param name="zero"></param>
            <returns>当standard等于0时，返回defaultScaleWhenStandardIsZero;<br/>
            当standard不等于0时，返回f/standard的值;</returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Scale(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            返回二者的比例关系
            </summary>
            <param name="d"></param>
            <param name="standard"></param>
            <param name="defaultScaleWhenStandardIsZero">当standard等于0时，返回本值</param>
            <param name="zero"></param>
            <returns>当standard等于0时，返回defaultScaleWhenStandardIsZero;<br/>
            当standard不等于0时，返回f/standard的值;</returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.IntegerPart(System.Single)">
            <summary>
            获取浮点数整数部分;
            </summary>
            <param name="f"></param>
            <returns>当浮点数f大于等于0时,整数位保持原样，如12.34返回12;<br/>
            当浮点数f小于0时，返回原整数部分-1的值，如-12.34返回-13=-12-1</returns>        
        </member>
        <member name="M:XCSJ.Maths.MathX.DecimalPart(System.Double)">
            <summary>
            获取双进度浮点数小数部分
            </summary>
            <param name="d"></param>
            <returns>返回值区间[0,1)
            当双进度浮点数d大于等于0时,小数位保持原样，如12.34返回0.34;<br/>
            当双进度浮点数d小于0时，返回1-原小数位的值，如-12.34返回0.66=1-0.34</returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.DecimalPart(System.Single)">
            <summary>
            获取的浮点数小数部分;
            </summary>
            <param name="f"></param>
            <returns>返回值区间[0,1)
            当浮点数f大于等于0时,小数位保持原样，如12.34返回0.34;<br/>
            当浮点数f小于0时，返回1-原小数位的值，如-12.34返回0.66=1-0.34</returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.IntegerDecimalPart(System.Single,System.Int32@,System.Single@)">
            <summary>
            获取浮点数的整数小数部分;规则参考IntegerPart与DecimalPart函数,并保证f=i+d
            </summary>
            <param name="f"></param>
            <param name="i"></param>
            <param name="d"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.IntegerPart(System.Double)">
            <summary>
            获取双进度浮点数整数部分;规则参考IntegerPart函数
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Maths.MathX.PI">
            <summary>
              <para>The well-known 3.14159265358979... value (Read Only). --- 值做微调</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.Infinity">
            <summary>
              <para>A representation of positive infinity (Read Only).</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.NegativeInfinity">
            <summary>
              <para>A representation of negative infinity (Read Only).</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.Deg2Rad">
            <summary>
              <para>Degrees-to-radians conversion constant (Read Only).</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.Rad2Deg">
            <summary>
              <para>Radians-to-degrees conversion constant (Read Only).</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.MathX.Epsilon">
            <summary>
              <para>A tiny floating point value (Read Only).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.MathX.Sin(System.Single)">
            <summary>
              <para>Returns the sine of angle f.</para>
            </summary>
            <param name="f">The input angle, in radians.</param>
            <returns>
              <para>The return value between -1 and +1.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Cos(System.Single)">
            <summary>
              <para>Returns the cosine of angle f.</para>
            </summary>
            <param name="f">The input angle, in radians.</param>
            <returns>
              <para>The return value between -1 and 1.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Tan(System.Single)">
            <summary>
              <para>Returns the tangent of angle f in radians.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Asin(System.Single)">
            <summary>
              <para>Returns the arc-sine of f - the angle in radians whose sine is f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Acos(System.Single)">
            <summary>
              <para>Returns the arc-cosine of f - the angle in radians whose cosine is f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Atan(System.Single)">
            <summary>
              <para>Returns the arc-tangent of f - the angle in radians whose tangent is f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Atan2(System.Single,System.Single)">
            <summary>
              <para>Returns the angle in radians whose Tan is y/x.</para>
            </summary>
            <param name="y"></param>
            <param name="x"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Sqrt(System.Single)">
            <summary>
              <para>Returns square root of f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Sqrt(System.Double)">
            <summary>
            开平方
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Abs(System.Single)">
            <summary>
              <para>Returns the absolute value of f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Abs(System.Int32)">
            <summary>
              <para>Returns the absolute value of value.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Min(System.Single,System.Single)">
            <summary>
              <para>Returns the smallest of two or more values.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Min(System.Single[])">
            <summary>
              <para>Returns the smallest of two or more values.</para>
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Min(System.Int32,System.Int32)">
            <summary>
              <para>Returns the smallest of two or more values.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Min(System.Int32[])">
            <summary>
              <para>Returns the smallest of two or more values.</para>
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Max(System.Single,System.Single)">
            <summary>
              <para>Returns largest of two or more values.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Max(System.Single[])">
            <summary>
              <para>Returns largest of two or more values.</para>
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Max(System.Int32,System.Int32)">
            <summary>
              <para>Returns the largest of two or more values.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Max(System.Int32[])">
            <summary>
              <para>Returns the largest of two or more values.</para>
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Pow(System.Single,System.Single)">
            <summary>
              <para>Returns f raised to power p.</para>
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Exp(System.Single)">
            <summary>
              <para>Returns e raised to the specified power.</para>
            </summary>
            <param name="power"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Log(System.Single,System.Single)">
            <summary>
              <para>Returns the logarithm of a specified number in a specified base.</para>
            </summary>
            <param name="f"></param>
            <param name="p"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Log(System.Single)">
            <summary>
              <para>Returns the natural (base e) logarithm of a specified number.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Log10(System.Single)">
            <summary>
              <para>Returns the base 10 logarithm of a specified number.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Ceil(System.Single)">
            <summary>
              <para>Returns the smallest integer greater to or equal to f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Floor(System.Single)">
            <summary>
              <para>Returns the largest integer smaller than or equal to f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Round(System.Single)">
            <summary>
              <para>Returns f rounded to the nearest integer.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.CeilToInt(System.Single)">
            <summary>
              <para>Returns the smallest integer greater to or equal to f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.FloorToInt(System.Single)">
            <summary>
              <para>Returns the largest integer smaller to or equal to f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.FloorToInt(System.Double)">
            <summary>
              <para>Returns the largest integer smaller to or equal to f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.RoundToInt(System.Single)">
            <summary>
              <para>Returns f rounded to the nearest integer.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Sign(System.Single)">
            <summary>
              <para>Returns the sign of f.</para>
            </summary>
            <param name="f"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Sign(System.Double)">
            <summary>
            符号化
            </summary>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp(System.Single,System.Single,System.Single)">
            <summary>
              <para>Clamps a value between a minimum float and maximum float value.</para>
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            约束范围
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            约束范围
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
              <para>Clamps value between min and max and returns value.</para>
            </summary>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp01(System.Single)">
            <summary>
              <para>Clamps value between 0 and 1 and returns value.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Clamp01(System.Double)">
            <summary>
            约束范围0到1
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Lerp(System.Single,System.Single,System.Single)">
            <summary>
              <para>Linearly interpolates between a and b by t.</para>
            </summary>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="t">The interpolation value between the two floats.</param>
            <returns>
              <para>The interpolated float result between the two float values.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Lerp(System.Double,System.Double,System.Double)">
            <summary>
              <para>Linearly interpolates between a and b by t.</para>
            </summary>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="t">The interpolation value between the two doubles.</param>
            <returns>
              <para>The interpolated double result between the two double values.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.LerpUnclamped(System.Single,System.Single,System.Single)">
            <summary>
              <para>Linearly interpolates between a and b by t with no limit to t.</para>
            </summary>
            <param name="a">The start value.</param>
            <param name="b">The end value.</param>
            <param name="t">The interpolation between the two floats.</param>
            <returns>
              <para>The float value as a result from the linear interpolation.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.LerpAngle(System.Single,System.Single,System.Single)">
            <summary>
              <para>Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.MoveTowards(System.Single,System.Single,System.Single)">
            <summary>
              <para>Moves a value current towards target.</para>
            </summary>
            <param name="current">The current value.</param>
            <param name="target">The value to move towards.</param>
            <param name="maxDelta">The maximum change that should be applied to the value.</param>
        </member>
        <member name="M:XCSJ.Maths.MathX.MoveTowardsAngle(System.Single,System.Single,System.Single)">
            <summary>
              <para>Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.SmoothStep(System.Single,System.Single,System.Single)">
            <summary>
              <para>Interpolates between min and max with smoothing at the limits.</para>
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.Gamma(System.Single,System.Single,System.Single)">
            <summary>
            伽马分布：反差系数
            </summary>
            <param name="value"></param>
            <param name="absmax"></param>
            <param name="gamma"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.ApproximatelyHigh(System.Single,System.Single)">
            <summary>
              <para>Compares two floating point values and returns true if they are similar.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            平滑值
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
            <summary>
            平滑角度
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.Repeat(System.Single,System.Single)">
            <summary>
              <para>Loops the value t, so that it is never larger than length and never smaller than 0.</para>
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.PingPong(System.Single,System.Single)">
            <summary>
              <para>PingPongs the value t, so that it is never larger than length and never smaller than 0.</para>
            </summary>
            <param name="t"></param>
            <param name="length"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.InverseLerp(System.Single,System.Single,System.Single)">
            <summary>
              <para>Calculates the linear parameter t that produces the interpolant value within the range [a, b].</para>
            </summary>
            <param name="a">Start value.</param>
            <param name="b">End value.</param>
            <param name="value">Value between start and end.</param>
            <returns>
              <para>Percentage of value between start and end.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.DeltaAngle(System.Single,System.Single)">
            <summary>
              <para>Calculates the shortest difference between two given angles given in degrees.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
        </member>
        <member name="M:XCSJ.Maths.MathX.DegreeToRadian(System.Single)">
            <summary>
            角的量度单位由度到弧度
            </summary>
            <param name="degree">度</param>
            <returns>弧度</returns>
        </member>
        <member name="M:XCSJ.Maths.MathX.RadianToDegree(System.Single)">
            <summary>
            角的量度单位由弧度到度
            </summary>
            <param name="radian">弧度</param>
            <returns>度</returns>
        </member>
        <member name="T:XCSJ.Maths.RectF">
            <summary>
            <see cref="T:System.Single"/>型矩形
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.zero">
            <summary>
              <para>Shorthand for writing new RectF(0,0,0,0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.x">
            <summary>
              <para>The X coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.y">
            <summary>
              <para>The Y coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.position">
            <summary>
              <para>The X and Y position of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.center">
            <summary>
              <para>The position of the center of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.min">
            <summary>
              <para>The position of the minimum corner of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.max">
            <summary>
              <para>The position of the maximum corner of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.width">
            <summary>
              <para>The width of the rectangle, measured from the X position.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.height">
            <summary>
              <para>The height of the rectangle, measured from the Y position.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.size">
            <summary>
              <para>The width and height of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.xMin">
            <summary>
              <para>The minimum X coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.yMin">
            <summary>
              <para>The minimum Y coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.xMax">
            <summary>
              <para>The maximum X coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.RectF.yMax">
            <summary>
              <para>The maximum Y coordinate of the rectangle.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              <para>Creates a new rectangle.</para>
            </summary>
            <param name="x">The X value the rect is measured from.</param>
            <param name="y">The Y value the rect is measured from.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.#ctor(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Creates a rectangle given a size and position.</para>
            </summary>
            <param name="position">The position of the minimum corner of the rect.</param>
            <param name="size">The width and height of the rect.</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.#ctor(XCSJ.Maths.RectF)">
            <summary>
              <para></para>
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              <para>Creates a rectangle from min/max coordinate values.</para>
            </summary>
            <param name="xmin">The minimum X coordinate.</param>
            <param name="ymin">The minimum Y coordinate.</param>
            <param name="xmax">The maximum X coordinate.</param>
            <param name="ymax">The maximum Y coordinate.</param>
            <returns>
              <para>A rectangle matching the specified coordinates.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Set(System.Single,System.Single,System.Single,System.Single)">
            <summary>
              <para>Set components of an existing RectF.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.Contains(XCSJ.Maths.V2F)">
            <summary>
              <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the RectF are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
            </summary>
            <param name="point">Point to test.</param>
            <returns>
              <para>True if the point lies within the specified rectangle.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Contains(XCSJ.Maths.V3F)">
            <summary>
              <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the RectF are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
            </summary>
            <param name="point">Point to test.</param>
            <returns>
              <para>True if the point lies within the specified rectangle.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Contains(XCSJ.Maths.V3F,System.Boolean)">
            <summary>
              <para>Returns true if the x and y components of point is a point inside this rectangle. If allowInverse is present and true, the width and height of the RectF are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
            </summary>
            <param name="point">Point to test.</param>
            <param name="allowInverse">Does the test allow the RectF's width and height to be negative?</param>
            <returns>
              <para>True if the point lies within the specified rectangle.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Overlaps(XCSJ.Maths.RectF)">
            <summary>
              <para>Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
            </summary>
            <param name="other">Other rectangle to test overlapping with.</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.Overlaps(XCSJ.Maths.RectF,System.Boolean)">
            <summary>
              <para>Returns true if the other rectangle overlaps this one. If allowInverse is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
            </summary>
            <param name="other">Other rectangle to test overlapping with.</param>
            <param name="allowInverse">Does the test allow the widths and heights of the Rects to be negative?</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.NormalizedToPoint(XCSJ.Maths.RectF,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns a point inside a rectangle, given normalized coordinates.</para>
            </summary>
            <param name="rectangle">Rectangle to get a point inside.</param>
            <param name="normalizedRectCoordinates">Normalized coordinates to get a point for.</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.PointToNormalized(XCSJ.Maths.RectF,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns the normalized coordinates cooresponding the the point.</para>
            </summary>
            <param name="rectangle">Rectangle to get normalized coordinates inside.</param>
            <param name="point">A point inside the rectangle to get normalized coordinates for.</param>
        </member>
        <member name="M:XCSJ.Maths.RectF.op_Inequality(XCSJ.Maths.RectF,XCSJ.Maths.RectF)">
            <summary>
            重载不相等运算符
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.op_Equality(XCSJ.Maths.RectF,XCSJ.Maths.RectF)">
            <summary>
            重载相等运算符
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Equals(System.Object)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.Equals(XCSJ.Maths.RectF)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.op_Implicit(System.String)~XCSJ.Maths.RectF">
            <summary>
            由字符串隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.op_Implicit(XCSJ.Maths.RectF)~System.String">
            <summary>
            隐式转化为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectF.ToString">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectF.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.SetMembers(System.Single[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.RectF.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.RectFConverter">
            <summary>
            RectF转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectFConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectFConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取属性
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.ERectAnchor">
            <summary>
            矩形锚点：按照上中下，左中右顺序定义矩形特征锚点；以处于矩形中心方式，理解上中下，左中右；
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.TopLeft">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.TopRight">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.Center">
            <summary>
            中
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.BottomLeft">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="F:XCSJ.Maths.ERectAnchor.BottomRight">
            <summary>
            右下
            </summary>
        </member>
        <member name="T:XCSJ.Maths.RectHelper">
            <summary>
            矩形助手
            </summary>
        </member>
        <member name="M:XCSJ.Maths.RectHelper.GetAnchorOffset(XCSJ.Maths.ERectAnchor,XCSJ.Maths.V2F)">
            <summary>
            获取矩形锚点偏移值，相对坐标原点的偏移值
            </summary>
            <param name="anchor"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectHelper.GetAnchorPoition(XCSJ.Maths.ERectAnchor,XCSJ.Maths.RectF)">
            <summary>
            获取矩形锚点位置，基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rectAnchor"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectHelper.GetAnchorPoition(XCSJ.Maths.RectF,XCSJ.Maths.ERectAnchor)">
            <summary>
            获取矩形锚点位置，基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rect"></param>
            <param name="rectAnchor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.RectHelper.GetRectPositionOfSameAnchor(XCSJ.Maths.RectF,XCSJ.Maths.V2F,XCSJ.Maths.ERectAnchor)">
            <summary>
            获取等同锚点的矩形位置，即输入的矩形与期望长度的矩形的锚点位置重合；基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rect"></param>
            <param name="rectSize"></param>
            <param name="rectAnchor"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2D">
            <summary>
            <see cref="T:System.Double"/>型二维向量
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2D.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2D.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2D.kEpsilon">
            <summary>
            趋近0值:1E-05f
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2D.kEpsilonNormalSqrt">
            <summary>
            标准平方趋近0值:1E-15f;
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V2D.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.zero">
            <summary>
              <para>Shorthand for writing V2(0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.one">
            <summary>
              <para>Shorthand for writing V2(1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.up">
            <summary>
              <para>Shorthand for writing V2(0, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.down">
            <summary>
              <para>Shorthand for writing V2(0, -1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.left">
            <summary>
              <para>Shorthand for writing V2(-1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.right">
            <summary>
              <para>Shorthand for writing V2(1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.positiveInfinity">
            <summary>
              <para>Shorthand for writing V2(double.PositiveInfinity, double.PositiveInfinity).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2D.negativeInfinity">
            <summary>
              <para>Shorthand for writing V2(double.NegativeInfinity, double.NegativeInfinity).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2D.#ctor(System.Double,System.Double)">
            <summary>
              <para>Constructs a new vector with given x, y components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Set(System.Double,System.Double)">
            <summary>
              <para>Set x and y components of an existing V2.</para>
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Lerp(XCSJ.Maths.V2D,XCSJ.Maths.V2D,System.Double)">
            <summary>
              <para>Linearly interpolates between vectors a and b by t.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.LerpUnclamped(XCSJ.Maths.V2D,XCSJ.Maths.V2D,System.Double)">
            <summary>
              <para>Linearly interpolates between vectors a and b by t.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.MoveTowards(XCSJ.Maths.V2D,XCSJ.Maths.V2D,System.Double)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Scale(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Scale(XCSJ.Maths.V2D)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Normalize">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2D.GetHashCode">
            <summary>
            获取Hash码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.Equals(System.Object)">
            <summary>
              <para>Returns true if the given vector is exactly equal to this vector.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Equals(XCSJ.Maths.V2D)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.Reflect(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Reflects a vector off the vector defined by a normal.</para>
            </summary>
            <param name="inDirection"></param>
            <param name="inNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Perpendicular(XCSJ.Maths.V2D)">
            <summary>
              <para>Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.</para>
            </summary>
            <param name="inDirection">The input direction.</param>
            <returns>
              <para>The perpendicular direction.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.Dot(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Angle(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Returns the unsigned angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
        </member>
        <member name="M:XCSJ.Maths.V2D.SignedAngle(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Returns the signed angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Distance(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.ClampMagnitude(XCSJ.Maths.V2D,System.Double)">
            <summary>
              <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
            </summary>
            <param name="vector"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.SqrMagnitude(XCSJ.Maths.V2D)">
            <summary>
            平方长度
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.SqrMagnitude">
            <summary>
            平方长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.Min(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.Max(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.SmoothDamp(XCSJ.Maths.V2D,XCSJ.Maths.V2D,XCSJ.Maths.V2D@,System.Double,System.Double,System.Double)">
            <summary>
            平滑抑制
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Addition(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Subtraction(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Multiply(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Division(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_UnaryNegation(XCSJ.Maths.V2D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Multiply(XCSJ.Maths.V2D,System.Single)">
            <summary>
            /重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Multiply(XCSJ.Maths.V2D,System.Double)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Multiply(System.Single,XCSJ.Maths.V2D)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Multiply(System.Double,XCSJ.Maths.V2D)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Division(XCSJ.Maths.V2D,System.Single)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Division(XCSJ.Maths.V2D,System.Double)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Equality(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Inequality(XCSJ.Maths.V2D,XCSJ.Maths.V2D)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Implicit(XCSJ.Maths.V3F)~XCSJ.Maths.V2D">
            <summary>
            由<see cref="T:XCSJ.Maths.V3F"/>隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Implicit(XCSJ.Maths.V2D)~XCSJ.Maths.V3F">
            <summary>
            隐式转化为<see cref="T:XCSJ.Maths.V3F"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Implicit(System.String)~XCSJ.Maths.V2D">
            <summary>
            由字符串隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.op_Implicit(XCSJ.Maths.V2D)~System.String">
            <summary>
            隐式转化为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2D.ToString">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2D.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.SetMembers(System.Double[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V2D.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2DConverter">
            <summary>
            V2D转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2DConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2DConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2F">
            <summary>
            <see cref="T:System.Single"/>型二维向量
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2F.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2F.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2F.kEpsilon">
            <summary>
            趋近0值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V2F.kEpsilonNormalSqrt">
            <summary>
            标准平方趋近0值
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V2F.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.zero">
            <summary>
              <para>Shorthand for writing V2(0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.one">
            <summary>
              <para>Shorthand for writing V2(1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.up">
            <summary>
              <para>Shorthand for writing V2(0, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.down">
            <summary>
              <para>Shorthand for writing V2(0, -1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.left">
            <summary>
              <para>Shorthand for writing V2(-1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.right">
            <summary>
              <para>Shorthand for writing V2(1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.positiveInfinity">
            <summary>
              <para>Shorthand for writing V2(float.PositiveInfinity, float.PositiveInfinity).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2F.negativeInfinity">
            <summary>
              <para>Shorthand for writing V2(float.NegativeInfinity, float.NegativeInfinity).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2F.#ctor(System.Single,System.Single)">
            <summary>
              <para>Constructs a new vector with given x, y components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Set(System.Single,System.Single)">
            <summary>
              <para>Set x and y components of an existing V2.</para>
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Lerp(XCSJ.Maths.V2F,XCSJ.Maths.V2F,System.Single)">
            <summary>
              <para>Linearly interpolates between vectors a and b by t.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.LerpUnclamped(XCSJ.Maths.V2F,XCSJ.Maths.V2F,System.Single)">
            <summary>
              <para>Linearly interpolates between vectors a and b by t.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.MoveTowards(XCSJ.Maths.V2F,XCSJ.Maths.V2F,System.Single)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Scale(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Scale(XCSJ.Maths.V2F)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Normalize">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2F.GetHashCode">
            <summary>
            获取Hash码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.Equals(System.Object)">
            <summary>
              <para>Returns true if the given vector is exactly equal to this vector.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Equals(XCSJ.Maths.V2F)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.Reflect(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Reflects a vector off the vector defined by a normal.</para>
            </summary>
            <param name="inDirection"></param>
            <param name="inNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Perpendicular(XCSJ.Maths.V2F)">
            <summary>
              <para>Returns the 2D vector perpendicular to this 2D vector. The result is always rotated 90-degrees in a counter-clockwise direction for a 2D coordinate system where the positive Y axis goes up.</para>
            </summary>
            <param name="inDirection">The input direction.</param>
            <returns>
              <para>The perpendicular direction.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.Dot(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Angle(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns the unsigned angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
        </member>
        <member name="M:XCSJ.Maths.V2F.SignedAngle(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns the signed angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Distance(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.ClampMagnitude(XCSJ.Maths.V2F,System.Single)">
            <summary>
              <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
            </summary>
            <param name="vector"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.SqrMagnitude(XCSJ.Maths.V2F)">
            <summary>
            平方长度
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.SqrMagnitude">
            <summary>
            平方长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.Min(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.Max(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.SmoothDamp(XCSJ.Maths.V2F,XCSJ.Maths.V2F,XCSJ.Maths.V2F@,System.Single,System.Single,System.Single)">
            <summary>
            平滑抑制
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Addition(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Subtraction(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Multiply(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Division(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_UnaryNegation(XCSJ.Maths.V2F)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Multiply(XCSJ.Maths.V2F,System.Single)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Multiply(System.Single,XCSJ.Maths.V2F)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Division(XCSJ.Maths.V2F,System.Single)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Equality(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Inequality(XCSJ.Maths.V2F,XCSJ.Maths.V2F)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Implicit(XCSJ.Maths.V3F)~XCSJ.Maths.V2F">
            <summary>
            由<see cref="T:XCSJ.Maths.V3F"/>隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Implicit(XCSJ.Maths.V2F)~XCSJ.Maths.V3F">
            <summary>
            隐式转化为<see cref="T:XCSJ.Maths.V3F"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Implicit(System.String)~XCSJ.Maths.V2F">
            <summary>
            由字符串隐式转化
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.op_Implicit(XCSJ.Maths.V2F)~System.String">
            <summary>
            隐式转化为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2F.ToString">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2F.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this RectF.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.SetMembers(System.Single[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V2F.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2FConverter">
            <summary>
            V2F转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2FConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2FConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2I">
            <summary>
            <see cref="T:System.Int32"/>型二维向量
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V2I.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.zero">
            <summary>
              <para>Shorthand for writing V2Int (0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.one">
            <summary>
              <para>Shorthand for writing V2Int (1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.up">
            <summary>
              <para>Shorthand for writing V2Int (0, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.down">
            <summary>
              <para>Shorthand for writing V2Int (0, -1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.left">
            <summary>
              <para>Shorthand for writing V2Int (-1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V2I.right">
            <summary>
              <para>Shorthand for writing V2Int (1, 0).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2I.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Set(System.Int32,System.Int32)">
            <summary>
              <para>Set x and y components of an existing V2Int.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Distance(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Min(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Max(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Scale(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Scale(XCSJ.Maths.V2I)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Clamp(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
              <para>Clamps the V2Int to the bounds given by min and max.</para>
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Implicit(XCSJ.Maths.V2I)~XCSJ.Maths.V2F">
            <summary>
            隐式转换为<see cref="T:XCSJ.Maths.V2F"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Explicit(XCSJ.Maths.V2I)~XCSJ.Maths.V3I">
            <summary>
            隐式转换为<see cref="T:XCSJ.Maths.V3I"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.FloorToInt(XCSJ.Maths.V2F)">
            <summary>
              <para>Converts a V2 to a V2Int by doing a Floor to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.CeilToInt(XCSJ.Maths.V2F)">
            <summary>
              <para>Converts a  V2 to a V2Int by doing a Ceiling to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.RoundToInt(XCSJ.Maths.V2F)">
            <summary>
              <para>Converts a  V2 to a V2Int by doing a Round to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Addition(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Subtraction(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Multiply(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Multiply(XCSJ.Maths.V2I,System.Int32)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Equality(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Inequality(XCSJ.Maths.V2I,XCSJ.Maths.V2I)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.Equals(System.Object)">
            <summary>
              <para>Returns true if the objects are equal.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.Equals(XCSJ.Maths.V2I)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.GetHashCode">
            <summary>
              <para>Gets the hash code for the V2Int.</para>
            </summary>
            <returns>
              <para>The hash code of the V2Int.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Implicit(System.String)~XCSJ.Maths.V2I">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.op_Implicit(XCSJ.Maths.V2I)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2I.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2I.SetMembers(System.Int32[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V2I.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V2IConverter">
            <summary>
            V2I转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V2IConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V2IConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3D">
            <summary>
            <see cref="T:System.Double"/>型三维向量
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3D.kEpsilon">
            <summary>
            趋近0值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3D.kEpsilonNormalSqrt">
            <summary>
            标准平方趋近0值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3D.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3D.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3D.z">
            <summary>
              <para>Z component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.X">
            <summary>
            针对X分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.Y">
            <summary>
            针对Y分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.Z">
            <summary>
            针对Z分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V3D.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.zero">
            <summary>
              <para>Shorthand for writing V3(0, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.one">
            <summary>
              <para>Shorthand for writing V3(1, 1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.forward">
            <summary>
              <para>Shorthand for writing V3(0, 0, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.back">
            <summary>
              <para>Shorthand for writing V3(0, 0, -1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.up">
            <summary>
              <para>Shorthand for writing V3(0, 1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.down">
            <summary>
              <para>Shorthand for writing V3(0, -1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.left">
            <summary>
              <para>Shorthand for writing V3(-1, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.right">
            <summary>
              <para>Shorthand for writing V3(1, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.positiveInfinity">
            <summary>
              <para>Shorthand for writing V3(double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3D.negativeInfinity">
            <summary>
              <para>Shorthand for writing V3(double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y, z components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.#ctor(System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y components and sets z to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Lerp(XCSJ.Maths.V3D,XCSJ.Maths.V3D,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.LerpUnclamped(XCSJ.Maths.V3D,XCSJ.Maths.V3D,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.MoveTowards(XCSJ.Maths.V3D,XCSJ.Maths.V3D,System.Double)">
            <summary>
              <para>Moves a point current in a straight line towards a target point.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.SmoothDamp(XCSJ.Maths.V3D,XCSJ.Maths.V3D,XCSJ.Maths.V3D@,System.Double,System.Double,System.Double)">
            <summary>
            平滑减弱
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.Set(System.Double,System.Double,System.Double)">
            <summary>
              <para>Set x, y and z components of an existing V3.</para>
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
            <param name="newZ"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Scale(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Scale(XCSJ.Maths.V3D)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Cross(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Cross Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.GetHashCode">
            <summary>
            获取Hash码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.Equals(System.Object)">
            <summary>
              <para>Returns true if the given vector is exactly equal to this vector.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Equals(XCSJ.Maths.V3D)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.Reflect(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Reflects a vector off the plane defined by a normal.</para>
            </summary>
            <param name="inDirection"></param>
            <param name="inNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Normalize(XCSJ.Maths.V3D)">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Normalize">
            <summary>
            标准化
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3D.Dot(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Project(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Projects a vector onto another vector.</para>
            </summary>
            <param name="vector"></param>
            <param name="onNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.ProjectOnPlane(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Projects a vector onto a plane defined by a normal orthogonal to the plane.</para>
            </summary>
            <param name="vector"></param>
            <param name="planeNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Angle(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Returns the angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <returns>
              <para>The angle in degrees between the two vectors.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.SignedAngle(XCSJ.Maths.V3D,XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Returns the signed angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <param name="axis">A vector around which the other vectors are rotated.</param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Distance(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.ClampMagnitude(XCSJ.Maths.V3D,System.Double)">
            <summary>
              <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
            </summary>
            <param name="vector"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Magnitude(XCSJ.Maths.V3D)">
            <summary>
            长度
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.SqrMagnitude(XCSJ.Maths.V3D)">
            <summary>
            平方长度
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.Min(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.Max(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Addition(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Subtraction(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_UnaryNegation(XCSJ.Maths.V3D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Multiply(XCSJ.Maths.V3D,System.Double)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Multiply(System.Double,XCSJ.Maths.V3D)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Division(XCSJ.Maths.V3D,System.Double)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Equality(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Inequality(XCSJ.Maths.V3D,XCSJ.Maths.V3D)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Implicit(System.String)~XCSJ.Maths.V3D">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.op_Implicit(XCSJ.Maths.V3D)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3D.SetMembers(System.Double[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V3D.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3DConverter">
            <summary>
            V3D转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3DConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3DConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3F">
            <summary>
            <see cref="T:System.Single"/>型三维向量
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3F.kEpsilon">
            <summary>
            趋近0值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3F.kEpsilonNormalSqrt">
            <summary>
            标准平方趋近0值
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3F.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3F.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V3F.z">
            <summary>
              <para>Z component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.X">
            <summary>
            针对X分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.Y">
            <summary>
            针对Y分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.Z">
            <summary>
            针对Z分向量的属性器
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V3F.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.zero">
            <summary>
              <para>Shorthand for writing V3(0, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.one">
            <summary>
              <para>Shorthand for writing V3(1, 1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.forward">
            <summary>
              <para>Shorthand for writing V3(0, 0, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.back">
            <summary>
              <para>Shorthand for writing V3(0, 0, -1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.up">
            <summary>
              <para>Shorthand for writing V3(0, 1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.down">
            <summary>
              <para>Shorthand for writing V3(0, -1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.left">
            <summary>
              <para>Shorthand for writing V3(-1, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.right">
            <summary>
              <para>Shorthand for writing V3(1, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.positiveInfinity">
            <summary>
              <para>Shorthand for writing V3(float.PositiveInfinity, float.PositiveInfinity, float.PositiveInfinity).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3F.negativeInfinity">
            <summary>
              <para>Shorthand for writing V3(float.NegativeInfinity, float.NegativeInfinity, float.NegativeInfinity).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
              <para>Creates a new vector with given x, y, z components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.#ctor(System.Single,System.Single)">
            <summary>
              <para>Creates a new vector with given x, y components and sets z to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Lerp(XCSJ.Maths.V3F,XCSJ.Maths.V3F,System.Single)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.LerpUnclamped(XCSJ.Maths.V3F,XCSJ.Maths.V3F,System.Single)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.MoveTowards(XCSJ.Maths.V3F,XCSJ.Maths.V3F,System.Single)">
            <summary>
              <para>Moves a point current in a straight line towards a target point.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.SmoothDamp(XCSJ.Maths.V3F,XCSJ.Maths.V3F,XCSJ.Maths.V3F@,System.Single,System.Single,System.Single)">
            <summary>
            平滑减弱
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="currentVelocity"></param>
            <param name="smoothTime"></param>
            <param name="maxSpeed"></param>
            <param name="deltaTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.Set(System.Single,System.Single,System.Single)">
            <summary>
              <para>Set x, y and z components of an existing V3.</para>
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
            <param name="newZ"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Scale(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Scale(XCSJ.Maths.V3F)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Cross(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Cross Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.GetHashCode">
            <summary>
            获取Hash码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.Equals(System.Object)">
            <summary>
              <para>Returns true if the given vector is exactly equal to this vector.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Equals(XCSJ.Maths.V3F)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.Reflect(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Reflects a vector off the plane defined by a normal.</para>
            </summary>
            <param name="inDirection"></param>
            <param name="inNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Normalize(XCSJ.Maths.V3F)">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Normalize">
            <summary>
            标准化
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3F.Dot(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Project(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Projects a vector onto another vector.</para>
            </summary>
            <param name="vector"></param>
            <param name="onNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.ProjectOnPlane(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Projects a vector onto a plane defined by a normal orthogonal to the plane.</para>
            </summary>
            <param name="vector"></param>
            <param name="planeNormal"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Angle(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Returns the angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <returns>
              <para>The angle in degrees between the two vectors.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.SignedAngle(XCSJ.Maths.V3F,XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Returns the signed angle in degrees between from and to.</para>
            </summary>
            <param name="from">The vector from which the angular difference is measured.</param>
            <param name="to">The vector to which the angular difference is measured.</param>
            <param name="axis">A vector around which the other vectors are rotated.</param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Distance(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.ClampMagnitude(XCSJ.Maths.V3F,System.Single)">
            <summary>
              <para>Returns a copy of vector with its magnitude clamped to maxLength.</para>
            </summary>
            <param name="vector"></param>
            <param name="maxLength"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Magnitude(XCSJ.Maths.V3F)">
            <summary>
            长度
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.SqrMagnitude(XCSJ.Maths.V3F)">
            <summary>
            平方长度
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.Min(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.Max(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Addition(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Subtraction(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_UnaryNegation(XCSJ.Maths.V3F)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Multiply(XCSJ.Maths.V3F,System.Single)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Multiply(System.Single,XCSJ.Maths.V3F)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Division(XCSJ.Maths.V3F,System.Single)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Equality(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Inequality(XCSJ.Maths.V3F,XCSJ.Maths.V3F)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Implicit(System.String)~XCSJ.Maths.V3F">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.op_Implicit(XCSJ.Maths.V3F)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3F.SetMembers(System.Single[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V3F.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3FConverter">
            <summary>
            V3F转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3FConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3FConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3I">
            <summary>
            <see cref="T:System.Int32"/>型三维向量
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.z">
            <summary>
              <para>Z component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V3I.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.zero">
            <summary>
              <para>Shorthand for writing V3Int (0, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.one">
            <summary>
              <para>Shorthand for writing V3Int (1, 1, 1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.up">
            <summary>
              <para>Shorthand for writing V3Int (0, 1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.down">
            <summary>
              <para>Shorthand for writing V3Int (0, -1, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.left">
            <summary>
              <para>Shorthand for writing V3Int (-1, 0, 0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V3I.right">
            <summary>
              <para>Shorthand for writing V3Int (1, 0, 0).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
              <para>Set x, y and z components of an existing V3Int.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Distance(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Min(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Max(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Scale(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Scale(XCSJ.Maths.V3I)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Clamp(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
              <para>Clamps the V3Int to the bounds given by min and max.</para>
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Implicit(XCSJ.Maths.V3I)~XCSJ.Maths.V3F">
            <summary>
            隐式转化为<see cref="T:XCSJ.Maths.V3I"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Explicit(XCSJ.Maths.V3I)~XCSJ.Maths.V2I">
            <summary>
            隐式转化为<see cref="T:XCSJ.Maths.V2I"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.FloorToInt(XCSJ.Maths.V3F)">
            <summary>
              <para>Converts a  V3 to a V3Int by doing a Floor to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.CeilToInt(XCSJ.Maths.V3F)">
            <summary>
              <para>Converts a  V3 to a V3Int by doing a Ceiling to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.RoundToInt(XCSJ.Maths.V3F)">
            <summary>
              <para>Converts a  V3 to a V3Int by doing a Round to each value.</para>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Addition(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Subtraction(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Multiply(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Multiply(XCSJ.Maths.V3I,System.Int32)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Equality(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Inequality(XCSJ.Maths.V3I,XCSJ.Maths.V3I)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.Equals(System.Object)">
            <summary>
              <para>Returns true if the objects are equal.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.Equals(XCSJ.Maths.V3I)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.GetHashCode">
            <summary>
              <para>Gets the hash code for the V3Int.</para>
            </summary>
            <returns>
              <para>The hash code of the V3Int.</para>
            </returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Implicit(System.String)~XCSJ.Maths.V3I">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.op_Implicit(XCSJ.Maths.V3I)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.ToValueString">
            <summary>
            转值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.FromValueString(System.String)">
            <summary>
            从值字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3I.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.SetMembers(System.Int32[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V3I.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V3IConverter">
            <summary>
            V3I转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V3IConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V3IConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V4D">
            <summary>
            <see cref="T:System.Double"/>型四维向量
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V4D.x">
            <summary>
              <para>X component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V4D.y">
            <summary>
              <para>Y component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V4D.z">
            <summary>
              <para>Z component of the vector.</para>
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V4D.w">
            <summary>
              <para>W component of the vector.</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.X">
            <summary>
            X
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.Y">
            <summary>
            Y
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.Z">
            <summary>
            Z
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.W">
            <summary>
            W
            </summary>
        </member>
        <member name="F:XCSJ.Maths.V4D.kEpsilon">
            <summary>
            趋近0值:1E-15
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Maths.V4D.normalized">
            <summary>
              <para>Returns this vector with a magnitude of 1 (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.magnitude">
            <summary>
              <para>Returns the length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.sqrMagnitude">
            <summary>
              <para>Returns the squared length of this vector (Read Only).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.zero">
            <summary>
              <para>Shorthand for writing V4D(0,0,0,0).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.one">
            <summary>
              <para>Shorthand for writing V4D(1,1,1,1).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.positiveInfinity">
            <summary>
              <para>Shorthand for writing V4D(double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity, double.PositiveInfinity).</para>
            </summary>
        </member>
        <member name="P:XCSJ.Maths.V4D.negativeInfinity">
            <summary>
              <para>Shorthand for writing V4D(double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity, double.NegativeInfinity).</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y, z, w components.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y, z components and sets w to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.#ctor(System.Double,System.Double)">
            <summary>
              <para>Creates a new vector with given x, y components and sets z and w to zero.</para>
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
              <para>Set x, y, z and w components of an existing V4D.</para>
            </summary>
            <param name="newX"></param>
            <param name="newY"></param>
            <param name="newZ"></param>
            <param name="newW"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Lerp(XCSJ.Maths.V4D,XCSJ.Maths.V4D,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.LerpUnclamped(XCSJ.Maths.V4D,XCSJ.Maths.V4D,System.Double)">
            <summary>
              <para>Linearly interpolates between two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.MoveTowards(XCSJ.Maths.V4D,XCSJ.Maths.V4D,System.Double)">
            <summary>
              <para>Moves a point current towards target.</para>
            </summary>
            <param name="current"></param>
            <param name="target"></param>
            <param name="maxDistanceDelta"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Scale(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Multiplies two vectors component-wise.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Scale(XCSJ.Maths.V4D)">
            <summary>
              <para>Multiplies every component of this vector by the same component of scale.</para>
            </summary>
            <param name="scale"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.Equals(System.Object)">
            <summary>
              <para>Returns true if the given vector is exactly equal to this vector.</para>
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Equals(XCSJ.Maths.V4D)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.Normalize(XCSJ.Maths.V4D)">
            <summary>
              <para></para>
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Normalize">
            <summary>
              <para>Makes this vector have a magnitude of 1.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V4D.Dot(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Dot Product of two vectors.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Project(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Projects a vector onto another vector.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Distance(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Returns the distance between a and b.</para>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Magnitude(XCSJ.Maths.V4D)">
            <summary>
            长度
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.Min(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Returns a vector that is made from the smallest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.Max(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
              <para>Returns a vector that is made from the largest components of two vectors.</para>
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Addition(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
            重载+
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Subtraction(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_UnaryNegation(XCSJ.Maths.V4D)">
            <summary>
            重载-
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Multiply(XCSJ.Maths.V4D,System.Double)">
            <summary>
            重载*
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Multiply(System.Double,XCSJ.Maths.V4D)">
            <summary>
            重载*
            </summary>
            <param name="d"></param>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Division(XCSJ.Maths.V4D,System.Double)">
            <summary>
            重载/
            </summary>
            <param name="a"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Equality(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
            重载==
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Inequality(XCSJ.Maths.V4D,XCSJ.Maths.V4D)">
            <summary>
            重载!=
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V3D)~XCSJ.Maths.V4D">
            <summary>
            由<see cref="T:XCSJ.Maths.V3D"/>隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V4D)~XCSJ.Maths.V3D">
            <summary>
            隐式转换为<see cref="T:XCSJ.Maths.V3D"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V2D)~XCSJ.Maths.V4D">
            <summary>
            由<see cref="T:XCSJ.Maths.V2D"/>隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V2F)~XCSJ.Maths.V4D">
            <summary>
            由<see cref="T:XCSJ.Maths.V2F"/>隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V4D)~XCSJ.Maths.V2D">
            <summary>
            隐式转换为<see cref="T:XCSJ.Maths.V2D"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V4D)~XCSJ.Maths.V2F">
            <summary>
            隐式转换为<see cref="T:XCSJ.Maths.V2F"/>
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.SqrMagnitude(XCSJ.Maths.V4D)">
            <summary>
            平方量
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.SqrMagnitude">
            <summary>
            平方量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(System.String)~XCSJ.Maths.V4D">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.op_Implicit(XCSJ.Maths.V4D)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.ToValueString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.FromValueString(System.String)">
            <summary>
            从字符串转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4D.ToString">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V4D.ToString(System.String)">
            <summary>
              <para>Returns a nicely formatted string for this vector.</para>
            </summary>
            <param name="format"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.SetMembers(System.Double[])">
            <summary>
            设置成员列表
            </summary>
            <param name="members"></param>
        </member>
        <member name="M:XCSJ.Maths.V4D.GetMembers">
            <summary>
            获取成员列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Maths.V4DConverter">
            <summary>
            V4D转换器
            </summary>
        </member>
        <member name="M:XCSJ.Maths.V4DConverter.GetMemberCount">
            <summary>
            获取成员数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4DConverter.NewInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            新建实例
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Maths.V4DConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            获取属性
            </summary>
            <param name="context"></param>
            <param name="value"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.EIcon">
            <summary>
            图标枚举
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.New">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Open">
            <summary>
            打开
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SaveAs">
            <summary>
            另存为
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Import">
            <summary>
            导入
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Export">
            <summary>
            导出
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Folder">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Directory">
            <summary>
            文件目录
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Clear">
            <summary>
            清除"
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cut">
            <summary>
            剪切
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Copy">
            <summary>
            复制
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Paste">
            <summary>
            粘贴
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Undo">
            <summary>
            撤销
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Redo">
            <summary>
            重做
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Edit">
            <summary>
            编辑
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Run">
            <summary>
            执行
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Select">
            <summary>
            选择
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Lock">
            <summary>
            锁定
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Unlock">
            <summary>
            解锁
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Tool">
            <summary>
            工具
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.NoteLine">
            <summary>
            注释行
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Border">
            <summary>
            边框
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Expand">
            <summary>
            展开
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Unexpand">
            <summary>
            折叠
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ResizeMin">
            <summary>
            设置最小尺寸
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ResizeMax">
            <summary>
            设置最大尺寸
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Help">
            <summary>
            帮助
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Home">
            <summary>
            主页
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.HomeOffline">
            <summary>
            离线主页
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Manual">
            <summary>
            手册
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ManualOffline">
            <summary>
            离线手册
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Store">
            <summary>
            商店
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Submit">
            <summary>
            提交
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Forward">
            <summary>
            向前
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Backward">
            <summary>
            向后
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Goto">
            <summary>
            跳转
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Enter">
            <summary>
            进入
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Exit">
            <summary>
            退出
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Map">
            <summary>
            地图
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MiniMap">
            <summary>
            导航图
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Layout">
            <summary>
            布局
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.AlignView">
            <summary>
            视角对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.LeftAlign">
            <summary>
            左对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.RightAlign">
            <summary>
            右对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.TopAlign">
            <summary>
            顶对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.BottomAlign">
            <summary>
            底对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CenterHorizontalAlign">
            <summary>
            中心水平对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CenterVerticalAlign">
            <summary>
            中心垂直对齐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CenterSameSpace">
            <summary>
            中心等间隔
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CenterHorizontalSameSpace">
            <summary>
            中心水平等间隔
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CenterVerticalSameSpace">
            <summary>
            中心垂直等间隔
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.BoundsHorizontalSameSpace">
            <summary>
            边界水平等间隔
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.BoundsVerticalSameSpace">
            <summary>
            边界垂直等间隔
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SameWidth">
            <summary>
            等宽
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SameHeight">
            <summary>
            等高
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SameSize">
            <summary>
            等尺寸
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.IncreaseWidth">
            <summary>
            递增宽
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.IncreaseHeight">
            <summary>
            递增高
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.IncreaseSize">
            <summary>
            递增尺寸
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.DirectionReset">
            <summary>
            方向重置
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.UpDownMirror">
            <summary>
            上下镜像
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.LeftRightMirror">
            <summary>
            左右镜像
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Add">
            <summary>
            添加
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveUp">
            <summary>
            上移
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveDown">
            <summary>
            下移
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveLeft">
            <summary>
            左移
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveRight">
            <summary>
            右移
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveUpBorder">
            <summary>
            移至上边界
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveDownBorder">
            <summary>
            移至下边界
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveLeftBorder">
            <summary>
            移至左边界
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.MoveRightBorder">
            <summary>
            移至右边界
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.NameAscendingOrder">
            <summary>
            名称升序
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.NameDescendingOrder">
            <summary>
            名称降序
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ReverseOrder">
            <summary>
            逆序
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Root">
            <summary>
            根
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.InsertChild">
            <summary>
            插入子项
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Model">
            <summary>
            模型
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Models">
            <summary>
            模型集合
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Move">
            <summary>
            平移
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Rotate">
            <summary>
            旋转
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Scale">
            <summary>
            缩放
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Put">
            <summary>
            摆放
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Drag">
            <summary>
            拖拽
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Focus">
            <summary>
            聚焦
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Click">
            <summary>
            点击
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Teleport">
            <summary>
            传送
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WireFrame">
            <summary>
            线框
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Text">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Audio">
            <summary>
            音频
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Music">
            <summary>
            音乐
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Video">
            <summary>
            视频
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Camera">
            <summary>
            相机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GIF">
            <summary>
            GIF
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Clock">
            <summary>
            时钟
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Trigger">
            <summary>
            触发器
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Hotspot">
            <summary>
            热点
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Tip">
            <summary>
            提示
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Note">
            <summary>
            标注
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Script">
            <summary>
            脚本
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CNScript">
            <summary>
            中文脚本
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Timer">
            <summary>
            定时器
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Curve">
            <summary>
            曲线
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Material">
            <summary>
            材质
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.QRCode">
            <summary>
            二维码
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadLeft_1">
            <summary>
            左箭头
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadRight_1">
            <summary>
            右箭头
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadUp_1">
            <summary>
            上箭头
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadDown_1">
            <summary>
            下箭头
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadLeft_2">
            <summary>
            左箭头宽版
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadRight_2">
            <summary>
            右箭头宽版
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadUp_2">
            <summary>
            上箭头宽版
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowHeadDown_2">
            <summary>
            下箭头宽版
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowLeft">
            <summary>
            左箭
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowRight">
            <summary>
            右箭
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowUp">
            <summary>
            上箭
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowDown">
            <summary>
            下箭
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowLeft_1">
            <summary>
            左箭白色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowRight_1">
            <summary>
            右箭白色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowUp_1">
            <summary>
            上箭白色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ArrowDown_1">
            <summary>
            下箭白色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Function">
            <summary>
            函数
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Command">
            <summary>
            命令
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Category">
            <summary>
            分类目录
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Transition">
            <summary>
            跳转
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Plugin">
            <summary>
            插件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Class">
            <summary>
            类
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Interface">
            <summary>
            接口
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Enum">
            <summary>
            枚举
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Event">
            <summary>
            事件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Group">
            <summary>
            组
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Link">
            <summary>
            关联
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Component">
            <summary>
            组件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ComponentEnable">
            <summary>
            组件启用
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Loop">
            <summary>
            循环
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Switch">
            <summary>
            分支
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Merge">
            <summary>
            合并
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Parallel">
            <summary>
            并发
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Sequential">
            <summary>
            顺序
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Assert">
            <summary>
            断言
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Grammar">
            <summary>
            语法
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarCommon">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarIf">
            <summary>
            如果
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarElseIf">
            <summary>
            否则如果
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarElse">
            <summary>
            否则
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarEndIf">
            <summary>
            结束
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarLoop">
            <summary>
            循环开始
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarEndLoop">
            <summary>
            循环结束
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarBreak">
            <summary>
            循环跳出
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarContinue">
            <summary>
            循环继续
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarReturn">
            <summary>
            逻辑返回
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarBegin">
            <summary>
            开始标识符
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarEnd">
            <summary>
            结束标识符
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarNote">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GrammarCategory">
            <summary>
            分类
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Net">
            <summary>
            网络
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Authentication">
            <summary>
            认证
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Download">
            <summary>
            下载
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Share">
            <summary>
            分享
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Wifi">
            <summary>
            无线网络
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.World">
            <summary>
            世界
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WebCam">
            <summary>
            摄像头
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Position">
            <summary>
            位置
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Relation">
            <summary>
            关系
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Organization">
            <summary>
            组织
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.UI">
            <summary>
            按钮
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Button">
            <summary>
            按钮
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Dropdown">
            <summary>
            下拉菜单
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.InputField">
            <summary>
            输入框
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ScrollBar">
            <summary>
            滚动条
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Slider">
            <summary>
            滑动条
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Toggle">
            <summary>
            切换
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.UIEvent">
            <summary>
            UI事件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Window">
            <summary>
            窗口
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.RawImage">
            <summary>
            图像
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Server">
            <summary>
            服务器
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.PC">
            <summary>
            个人电脑
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Phone">
            <summary>
            手机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Pad">
            <summary>
            平板电脑
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.VR">
            <summary>
            虚拟显示
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.AR">
            <summary>
            增强现实
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Mouse">
            <summary>
            鼠标
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Keyboard">
            <summary>
            键盘
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.JoyStick">
            <summary>
            游戏杆
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Screen">
            <summary>
            屏幕
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ManHead">
            <summary>
            男人头像
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WomanHead">
            <summary>
            女人头像
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ManBody">
            <summary>
            男人身体
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WomanBody">
            <summary>
            女人身体
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Chat">
            <summary>
            聊天
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Heart">
            <summary>
            心
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Face">
            <summary>
            面部
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Eye">
            <summary>
            眼睛
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Nose">
            <summary>
            鼻子
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Ear">
            <summary>
            耳朵
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Finger">
            <summary>
            手指
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Foot">
            <summary>
            脚
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Leg">
            <summary>
            腿
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Arm">
            <summary>
            手臂
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Firend">
            <summary>
            朋友
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Clip">
            <summary>
            别针
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Compass">
            <summary>
            指南针
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Badge">
            <summary>
            徽章
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Crown">
            <summary>
            皇冠
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cup">
            <summary>
            奖杯
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Diamond">
            <summary>
            钻石
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Car">
            <summary>
            汽车
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SpotCar">
            <summary>
            跑车
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Truck">
            <summary>
            卡车
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SteerWheel">
            <summary>
            方向盘
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.VehicleStability">
            <summary>
            车身稳定系统
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.VehicleAxis">
            <summary>
            车辆轴
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Plane">
            <summary>
            飞机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Speed">
            <summary>
            速度
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Target">
            <summary>
            目标
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Fuel">
            <summary>
            燃料
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.VehicleLight">
            <summary>
            车灯
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Suspension">
            <summary>
            车灯
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Motorcycle">
            <summary>
            摩托车
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Tricycle">
            <summary>
            三轮车
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Sun">
            <summary>
            太阳
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Earth">
            <summary>
            地球
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Moon">
            <summary>
            月亮
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Star">
            <summary>
            星星
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Weather">
            <summary>
            天气
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Wind">
            <summary>
            风
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Rain">
            <summary>
            雨
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Lightning">
            <summary>
            闪电
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Fire">
            <summary>
            火
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Water">
            <summary>
            水
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Flower">
            <summary>
            花
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Snow">
            <summary>
            雪
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cloud">
            <summary>
            云
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Machine">
            <summary>
            机器
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Mechanism">
            <summary>
            机构
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Module">
            <summary>
            模块
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Part">
            <summary>
            零件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.CrossSection">
            <summary>
            剖面
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Wheel">
            <summary>
            车轮
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Engine">
            <summary>
            引擎
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ExplodedView">
            <summary>
            爆炸视图
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.QQ">
            <summary>
            QQ
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.QQ_1">
            <summary>
            QQ_1
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WeChat">
            <summary>
            微信
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Android">
            <summary>
            安卓
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.IOS">
            <summary>
            IOS
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.UWP">
            <summary>
            通用统一平台
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Point">
            <summary>
            点
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Line">
            <summary>
            线
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Circle">
            <summary>
            圆
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Ellipse">
            <summary>
            椭圆
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Ring">
            <summary>
            圆环
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Square">
            <summary>
            方形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Rectangle">
            <summary>
            方形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Triangle">
            <summary>
            三角形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Pentagon">
            <summary>
            五边形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Hexagon">
            <summary>
            六边形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cube">
            <summary>
            圆
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Sphere">
            <summary>
            方形
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Capsule">
            <summary>
            胶囊体
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Cylinder">
            <summary>
            圆柱体
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Mono">
            <summary>
            Mono组件
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GameObject">
            <summary>
            游戏对象
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.GameObjectActive">
            <summary>
            游戏对象激活
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.ColorPicker">
            <summary>
            调色板
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.FontColor">
            <summary>
            文字颜色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.BackgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Temperature">
            <summary>
            温度
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.SmallBell">
            <summary>
            小铃铛
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Marker">
            <summary>
            标识
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.WalkCamera">
            <summary>
            行走相机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.FlyCamera">
            <summary>
            飞行相机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.AroundCamera">
            <summary>
            绕物相机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.FixCamera">
            <summary>
            定点相机
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Study">
            <summary>
            学习
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Exam">
            <summary>
            考试
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Question">
            <summary>
            问题
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.AnswerQuestion">
            <summary>
            回答问题
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Task">
            <summary>
            任务
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.StepGroup">
            <summary>
            步骤组
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EIcon.Step">
            <summary>
            步骤
            </summary>
        </member>
        <member name="T:XCSJ.Attributes.SkinIconAttribute">
            <summary>
            皮肤图标特性
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.SkinIconAttribute.icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.SkinIconAttribute.skinRule">
            <summary>
            皮肤规则
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.SkinIconAttribute.#ctor(System.String,XCSJ.Attributes.ESkinRule,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="icon"></param>
            <param name="skinRule"></param>
            <param name="index"></param>
        </member>
        <member name="T:XCSJ.Attributes.IconAttribute">
            <summary>
            图标特性
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.IconAttribute.needDefault">
            <summary>
            优先级最低，只在所有情况下找不到图片，才使用默认图标
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.IconAttribute.memberRule">
            <summary>
            成员规则
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.IconAttribute.inherited">
            <summary>
            继承的
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.#ctor(XCSJ.Attributes.EIcon)">
            <summary>
            构造
            </summary>
            <param name="icon"></param>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.#ctor(XCSJ.Attributes.EMemberRule)">
            <summary>
            构造
            </summary>
            <param name="memberRule"></param>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.#ctor(System.String,XCSJ.Attributes.ESkinRule)">
            <summary>
            构造
            </summary>
            <param name="icon"></param>
            <param name="skinRule"></param>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.#ctor(System.String,XCSJ.Attributes.ESkinRule,XCSJ.Attributes.EMemberRule,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="icon"></param>
            <param name="skinRule"></param>
            <param name="memberRule"></param>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetIcon(System.Reflection.MemberInfo,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="ignoreSuffixWhenIconNotEmpty"></param>
            <param name="memberInfoNameWhenIconEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetIcon(System.Reflection.MemberInfo,XCSJ.Attributes.IconAttribute@,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="iconAttribute"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="ignoreSuffixWhenIconNotEmpty"></param>
            <param name="memberInfoNameWhenIconEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetIcon(System.Reflection.MemberInfo,System.String,System.String,System.Boolean,System.Func{System.Reflection.MemberInfo,XCSJ.Attributes.IconAttribute,System.String})">
            <summary>
            获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="ignoreSuffixWhenIconNotEmpty"></param>
            <param name="getIconNameFuncWhenIconEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetIcon(System.Reflection.MemberInfo,System.String,System.String,System.Boolean,System.Func{System.Reflection.MemberInfo,XCSJ.Attributes.IconAttribute,System.String},XCSJ.Attributes.IconAttribute@)">
            <summary>
            获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <param name="ignoreSuffixWhenIconNotEmpty"></param>
            <param name="getIconNameFuncWhenIconEmpty"></param>
            <param name="iconAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetDefaultIcon(System.Reflection.MemberInfo)">
            <summary>
            获取默认图标
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IconAttribute.GetDefaultIcon(System.Reflection.MemberInfo,XCSJ.Attributes.IconAttribute@)">
            <summary>
            获取默认图标
            </summary>
            <param name="memberInfo"></param>
            <param name="iconAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.EMemberRule">
            <summary>
            成员规则
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EMemberRule.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EMemberRule.DeclaringType">
            <summary>
            申明类型
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EMemberRule.ReflectedType">
            <summary>
            反射类型
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EMemberRule.DeclaringType_MemberName">
            <summary>
            申明类型成员名
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EMemberRule.ReflectedType_MemberName">
            <summary>
            反射类型成员名
            </summary>
        </member>
        <member name="T:XCSJ.Attributes.ESkinRule">
            <summary>
            皮肤规则
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.ESkinRule.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.ESkinRule.OnlySkin">
            <summary>
            仅皮肤
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.ESkinRule.AutoSkin">
            <summary>
            自动皮肤
            </summary>
        </member>
        <member name="T:XCSJ.Attributes.IndexAttribute">
            <summary>
            索引特性
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.IndexAttribute.DefaultIndex">
            <summary>
            默认索引， 为整形最大值（2147483647）的一半（1073741823）， 便于某些索引项插入最后
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.IndexAttribute.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.IndexAttribute.GetIndex(System.Reflection.MemberInfo,System.Boolean,System.Int32)">
            <summary>
            获取索引
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="defaultIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.IndexAttribute.GetIndex``1(System.Reflection.MemberInfo,System.Boolean,System.Int32)">
            <summary>
            获取索引
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <param name="defaultIndex"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.NameAttribute">
            <summary>
            名称特性；用于说明类或成员的名称信息；一般用在界面中；
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.NameAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数，添加脚本的描述信息
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
        </member>
        <member name="M:XCSJ.Attributes.NameAttribute.EnumValues(System.Enum,XCSJ.Languages.ELanguageType)">
            <summary>
            根据枚举返回本类类型的特性信息
            </summary>
            <param name="value"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.NameAttribute.EnumValues``1(XCSJ.Languages.ELanguageType)">
            <summary>
            根据枚举返回本类类型的特性信息
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.NameAttribute.IndexOfEnumValue(System.Enum,System.String,XCSJ.Languages.ELanguageType)">
            <summary>
            根据特性存储的字符串返回对应的索引！
            </summary>
            <param name="value"></param>
            <param name="attributeString">NameAttribute的指定语言版本内容</param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.NameAttribute.IndexOfEnumValue``1(System.String,XCSJ.Languages.ELanguageType)">
            <summary>
            根据特性存储的字符串返回对应的索引！
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="attributeString"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.EEditorMode">
            <summary>
            编辑器模式
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EEditorMode.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EEditorMode.Edit">
            <summary>
            编辑态
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EEditorMode.Runtime">
            <summary>
            运行时
            </summary>
        </member>
        <member name="F:XCSJ.Attributes.EEditorMode.Both">
            <summary>
            二者:即在编辑态与运行时都生效
            </summary>
        </member>
        <member name="T:XCSJ.Attributes.ReadonlyAttribute">
            <summary>
            只读特性
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.ReadonlyAttribute.editorMode">
            <summary>
            编辑器模式
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.ReadonlyAttribute.#ctor(XCSJ.Attributes.EEditorMode)">
            <summary>
            构造
            </summary>
            <param name="editorMode"></param>
        </member>
        <member name="T:XCSJ.Attributes.OnlyMemberElementsAttribute">
            <summary>
            仅成员元素特性
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.OnlyMemberElementsAttribute.needIndent">
            <summary>
            需要缩进
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.OnlyMemberElementsAttribute.needBoundBox">
            <summary>
            需要包围盒
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.OnlyMemberElementsAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="needIndent"></param>
            <param name="needBoundBox"></param>
        </member>
        <member name="T:XCSJ.Attributes.TipAttribute">
            <summary>
            提示特性，用于界面中提示类或成员额外描述信息；
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.TipAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数，添加脚本的描述信息
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
        </member>
        <member name="T:XCSJ.Attributes.VersionAttribute">
            <summary>
            版本特性
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.VersionAttribute.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="build"></param>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="major"></param>
            <param name="minor"></param>
            <param name="build"></param>
            <param name="revision"></param>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.GetVersion">
            <summary>
            获取版本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Attributes.VersionAttribute.GetVersion(System.Type)">
            <summary>
            获取版本
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.VersionHelper">
            <summary>
            版本助手
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.VersionHelper.GetFullVersion(System.Type)">
            <summary>
            获取完整版本
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Attributes.AliasAttribute">
            <summary>
            别名特性：要求至少提供一个别名
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.AliasAttribute.alias">
            <summary>
            别名
            </summary>
        </member>
        <member name="P:XCSJ.Attributes.AliasAttribute.aliases">
            <summary>
            别名数组
            </summary>
        </member>
        <member name="M:XCSJ.Attributes.AliasAttribute.#ctor(System.String,System.String[])">
            <summary>
            构造
            </summary>
            <param name="alias">别名</param>
            <param name="aliases">别名数组</param>
        </member>
        <member name="T:XCSJ.Caches.AttributeCache`1">
            <summary>
            特性缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.Gets(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取特性
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.Get(System.Int32,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取
            </summary>
            <param name="index"></param>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.Get(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.Exist(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            存在
            </summary>
            <param name="memberInfo"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetsOfField(System.Enum,System.Boolean)">
            <summary>
            获取枚举字段上符合条件的所有特性
            </summary>
            <param name="e"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfField(System.Int32,System.Enum,System.Boolean)">
            <summary>
            获取枚举字段上符合条件的所有特性
            </summary>
            <param name="index"></param>
            <param name="e"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfField(System.Enum,System.Boolean)">
            <summary>
            获取类型字段上符合条件的第一个特性
            </summary>
            <param name="e"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetsOfField(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取类型字段上符合条件的所有特性
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr">查找字段时的绑定标志</param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfField(System.Int32,System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取类型字段上符合条件的指定索引的特性
            </summary>
            <param name="index">相对GetsOfField结果的索引值</param>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfField(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取类型字段上符合条件的第一个特性
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.ExistOfField(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取类型字段上是否存在符合条件的特性
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetsOfProperty(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取属性的特性
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfProperty(System.Int32,System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            /获取属性的特性
            </summary>
            <param name="index"></param>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.GetOfProperty(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取属性的特性
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.ExistOfProperty(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            属性的特性存在
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.AttributeCache`1.Gets(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取特性
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="memberTypes"></param>
            <param name="bindingAttr"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.AttributeCacheValue`1">
            <summary>
            特性缓存值
            </summary>
            <typeparam name="TAttribute"></typeparam>
        </member>
        <member name="P:XCSJ.Caches.AttributeCacheValue`1.attributes">
            <summary>
            特性数组
            </summary>
        </member>
        <member name="P:XCSJ.Caches.AttributeCacheValue`1.memberInfo">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:XCSJ.Caches.AttributeCacheValue`1.inherit">
            <summary>
            继承的
            </summary>
        </member>
        <member name="M:XCSJ.Caches.AttributeCacheValue`1.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.ObsoleteAttributeCache">
            <summary>
            ObsoleteAttribute类特性缓存
            </summary>
        </member>
        <member name="T:XCSJ.Caches.GuidAttributeCache">
            <summary>
            GuidAttribute类特性缓存
            </summary>
        </member>
        <member name="T:XCSJ.Caches.IconAttributeCache">
            <summary>
            IconAttribute类特性缓存
            </summary>
        </member>
        <member name="T:XCSJ.Caches.CacheHelper">
            <summary>
            缓存组手类
            </summary>
        </member>
        <member name="M:XCSJ.Caches.CacheHelper.Add(XCSJ.Algorithms.ICache)">
            <summary>
            添加
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:XCSJ.Caches.CacheHelper.Remove(XCSJ.Algorithms.ICache)">
            <summary>
            移除
            </summary>
            <param name="cache"></param>
        </member>
        <member name="M:XCSJ.Caches.CacheHelper.ClearAll">
            <summary>
            清理全部
            </summary>
        </member>
        <member name="M:XCSJ.Caches.CacheHelper.Clear``1(System.Boolean)">
            <summary>
            清理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeChildClasses"></param>
        </member>
        <member name="M:XCSJ.Caches.CacheHelper.Clear(System.Type,System.Boolean)">
            <summary>
            清理
            </summary>
            <param name="type"></param>
            <param name="includeChildClasses"></param>
        </member>
        <member name="T:XCSJ.Caches.EnumCache`1">
            <summary>
            枚举缓存泛型类;获取枚举中定义的所有值；
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="P:XCSJ.Caches.EnumCache`1.Array">
            <summary>
            枚举的字段值数组
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache`1.ArrayReverse">
            <summary>
            枚举的字段值数组:逆序
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache`1.List">
            <summary>
            枚举的字段值列表
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache`1.Values">
            <summary>
            枚举的字段值列表
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache`1.Length">
            <summary>
            枚举的字段值列表长度
            </summary>
        </member>
        <member name="T:XCSJ.Caches.EnumCache">
            <summary>
            枚举缓存;获取枚举中定义的所有值；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.FirstOrDefaultValue(System.Type)">
            <summary>
            第一个或默认值：获取指定枚举类型中定义的第一个值或默认的值；
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.GetValue(System.Type)">
            <summary>
            枚举缓存值
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.GetValues(System.Enum)">
            <summary>
            获取枚举中所有值
            </summary>
            <param name="e">枚举值</param>
            <returns>枚举值数组</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.GetValues(System.Type)">
            <summary>
            获取枚举中所有值
            </summary>
            <param name="enumType"></param>
            <returns>枚举值数组</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.List(System.Enum)">
            <summary>
            枚举中所有值转列表;比通过数组获取的效率略低些；
            </summary>
            <param name="e"></param>
            <returns>枚举值列表</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.List(System.Type)">
            <summary>
            枚举中所有值转列表;比通过数组获取的效率略低些；
            </summary>
            <param name="enumType"></param>
            <returns>枚举值列表</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.Length(System.Enum)">
            <summary>
            枚举的字段值列表长度
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.Length(System.Type)">
            <summary>
            枚举的字段值列表长度
            </summary>
        </member>
        <member name="T:XCSJ.Caches.EnumCache.Value">
            <summary>
            枚举缓存值
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache.Value.array">
            <summary>
            数组
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache.Value.list">
            <summary>
            列表
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache.Value.enumFields">
            <summary>
            枚举的字段信息
            </summary>
        </member>
        <member name="P:XCSJ.Caches.EnumCache.Value.length">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumCache.Value.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EnumFieldInfoCache">
            <summary>
            枚举字段信息缓存;仅可处理已定义字段信息，无法处理被FlagsAttribute特性修饰且进行组合运算后的情况；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumFieldInfoCache.CreateValue(System.Enum)">
            <summary>
            通过枚举值获取对应的字段信息
            </summary>
            <param name="key1">枚举值</param>
            <returns>字段信息对象</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumFieldInfoCache.GetFieldInfo(System.Enum)">
            <summary>
            获取字段信息
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EnumIndexCache`1">
            <summary>
            枚举值到索引的转换缓存;仅可处理单向递增型的枚举情况；
            </summary>
            <typeparam name="T">枚举模版</typeparam>
        </member>
        <member name="M:XCSJ.Caches.EnumIndexCache`1.CreateValue(`0)">
            <summary>
            通过枚举值构建索引
            </summary>
            <param name="key1">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumIndexCache`1.Get(`0)">
            <summary>
            获取索引
            </summary>
            <param name="e">枚举值</param>
            <returns>成功找到返回对应索引；否则返回-1</returns>
        </member>
        <member name="T:XCSJ.Caches.IndexEnumCache`1">
            <summary>
            索引到枚举值的转换缓存;仅可处理单向递增型的枚举情况；
            </summary>
            <typeparam name="T">枚举模版</typeparam>
        </member>
        <member name="M:XCSJ.Caches.IndexEnumCache`1.CreateValue(System.Int32)">
            <summary>
            通过索引构建枚举值
            </summary>
            <param name="key1">索引</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.IndexEnumCache`1.Get(System.Int32)">
            <summary>
            获取枚举值
            </summary>
            <param name="index">索引</param>
            <returns>成功找到返回对应枚举值；否则返回默认枚举值</returns>
        </member>
        <member name="T:XCSJ.Caches.EnumIndexCache">
            <summary>
            枚举索引缓存；获取枚举值在枚举中定义的所有值的索引；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumIndexCache.CreateValue(System.Enum)">
            <summary>
            通过枚举值构建索引
            </summary>
            <param name="key1">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumIndexCache.Get(System.Enum)">
            <summary>
            获取索引
            </summary>
            <param name="e">枚举值</param>
            <returns>成功找到返回对应索引；否则返回-1</returns>
        </member>
        <member name="M:XCSJ.Caches.EnumIndexCache.Index(System.Enum)">
            <summary>
            获取索引
            </summary>
            <param name="e">枚举值</param>
            <returns>成功找到返回对应索引；否则返回-1</returns>
        </member>
        <member name="T:XCSJ.Caches.EEnumTip">
            <summary>
            枚举提示的枚举；主要考虑FlagsAttribute特性的情况；
            </summary>
        </member>
        <member name="F:XCSJ.Caches.EEnumTip.AutoFlags">
            <summary>
            自动标识；通过判断是否有FlagsAttribute特性做对应的处理；
            </summary>
        </member>
        <member name="F:XCSJ.Caches.EEnumTip.NoFlags">
            <summary>
            无标识
            </summary>
        </member>
        <member name="F:XCSJ.Caches.EEnumTip.Flags">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:XCSJ.Caches.EnumTipCache">
            <summary>
            枚举提示缓存；缓存TipAttribute特性的信息；可处理枚举被FlagsAttribute特性修饰的情况；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumTipCache.CreateValue(XCSJ.Languages.ELanguageType,System.Enum,XCSJ.Caches.EEnumTip)">
            <summary>
            构建索引
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumTipCache.Tip(XCSJ.Languages.ELanguageType,System.Enum,XCSJ.Caches.EEnumTip)">
            <summary>
            获取提示;
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns>返回提示字符串形式: {名称:NameAttribute}({定义值:FieldInfo.Name}):{提示:TipAttribute}</returns>
        </member>
        <member name="T:XCSJ.Caches.EnumValueCache">
            <summary>
            枚举值缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache.CreateValue(System.Type,XCSJ.Helper.EEnumStringType,System.String)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache.Get(System.Type,System.String,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举值
            </summary>
            <param name="enumType"></param>
            <param name="text"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache.TryGet(System.Type,System.String,System.Enum@,XCSJ.Helper.EEnumStringType)">
            <summary>
            尝试获取枚举值
            </summary>
            <param name="enumType"></param>
            <param name="text"></param>
            <param name="enumValue"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EnumValueCache`1">
            <summary>
            枚举值泛型缓存
            </summary>
            <typeparam name="T">枚举泛型类型</typeparam>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache`1.CreateValue(XCSJ.Helper.EEnumStringType,System.String)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache`1.Get(System.String,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举值
            </summary>
            <param name="text"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumValueCache`1.TryGet(System.String,`0@,XCSJ.Helper.EEnumStringType)">
            <summary>
            尝试获取枚举值
            </summary>
            <param name="text"></param>
            <param name="enumValue"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EnumStringCache">
            <summary>
            枚举字符串缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumStringCache.CreateValue(System.Enum,XCSJ.Helper.EEnumStringType)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumStringCache.Get(System.Enum,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串
            </summary>
            <param name="enumValue"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EnumStringsCache">
            <summary>
            枚举字符串数组缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumStringsCache.CreateValue(System.Type,XCSJ.Helper.EEnumStringType)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumStringsCache.Get(System.Type,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串数组
            </summary>
            <param name="enumType"></param>
            <param name="enumStringType"></param>
            <returns>结果数组不为null，即至少为非null的空数组</returns>
        </member>
        <member name="T:XCSJ.Caches.EnumStringsCache`1">
            <summary>
            枚举字符串数组泛型缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EnumStringsCache`1.CreateValue(XCSJ.Helper.EEnumStringType)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.EnumStringsCache`1.Get(XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串数组
            </summary>
            <param name="enumStringType"></param>
            <returns>结果数组不为null，即至少为非null的空数组</returns>
        </member>
        <member name="T:XCSJ.Caches.MultiValueStringSplitCache">
            <summary>
            多值字符串拆分缓存：将字符串以<see cref="F:XCSJ.Scripts.ScriptHelper.ValueDelimiter"/>拆分的缓存，拆分选项为<see cref="F:System.StringSplitOptions.None"/>即保留空项；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.MultiValueStringSplitCache.GetSplitArray(System.String)">
            <summary>
            获取拆分数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.MultiValueStringSplitCache.CreateValue(System.String)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.MultiValueStringSplitCache_RemoveEmptyEntries">
            <summary>
            多值字符串拆分缓存(删除空项)：将字符串以<see cref="F:XCSJ.Scripts.ScriptHelper.ValueDelimiter"/>拆分的缓存，拆分选项为<see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/>即删除空项；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.MultiValueStringSplitCache_RemoveEmptyEntries.GetSplitArray(System.String)">
            <summary>
            获取拆分数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.MultiValueStringSplitCache_RemoveEmptyEntries.CreateValue(System.String)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.StringSplitCache">
            <summary>
            字符串拆分缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.StringSplitCache.GetSplitArray(System.String,System.String,System.StringSplitOptions)">
            <summary>
            获取拆分字符串
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <param name="stringSplitOptions"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.StringSplitCache.CreateValue(System.String,System.String,System.StringSplitOptions)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <param name="key3"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.MemberInfoCache`2">
            <summary>
            成员信息缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMemberInfo"></typeparam>
        </member>
        <member name="M:XCSJ.Caches.MemberInfoCache`2.CreateValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key1">期望获取成员信息的类型</param>
            <param name="key2">成员名称</param>
            <param name="key3">绑定标志</param>
            <param name="key4">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.MemberInfoCache`2.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName"></param>
            <param name="bindingAttr"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.MemberInfoCache`2.Get(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName">成员名称</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="includeBaseType">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.FieldInfoCache">
            <summary>
            字段信息缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.FieldInfoCache.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName">成员名称</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="includeBaseType">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.FieldInfoCache.GetValue(System.Enum)">
            <summary>
            获取枚举值对应的字段信息对象
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.PropertyInfoCache">
            <summary>
            属性信息缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.PropertyInfoCache.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName">成员名称</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="includeBaseType">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.FieldOrPropertyInfoCache">
            <summary>
            字段或属性信息缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.FieldOrPropertyInfoCache.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取值
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="bindingAttr"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.MethodInfoCache">
            <summary>
            方法信息缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.MethodInfoCache.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName">成员名称</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="includeBaseType">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EventInfoCache">
            <summary>
            事件信息缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EventInfoCache.GetValue(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息值
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="memberName">成员名称</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="includeBaseType">标识是否包含基础类型</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.StringMemberInfoCache`1">
            <summary>
            字符串成员信息缓存
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:XCSJ.Caches.StringMemberInfoCache`1.stringToMemberInfoFunc">
            <summary>
            字符串到成员信息函数：可用于扩展
            </summary>
        </member>
        <member name="M:XCSJ.Caches.StringMemberInfoCache`1.CreateValue(System.String)">
            <summary>
            创建值
            </summary>
            <param name="memberInfoString">成员信息字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.StringMemberInfoCache`1.Get(System.String)">
            <summary>
            通过成员信息字符串获取成员信息对象
            </summary>
            <param name="memberInfoString">成员信息字符串，类型的全名称或是GUID,成员信息对象ToString()的字符串</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TypeCache">
            <summary>
            类型缓存
            </summary>
        </member>
        <member name="T:XCSJ.Caches.TypesCache">
            <summary>
            类型列表缓存：用于缓存当前程序集中所有的类型；
            </summary>
        </member>
        <member name="E:XCSJ.Caches.TypesCache.customGetTypes">
            <summary>
            自定义获取类型：用于获取类型的扩展机制：如果返回值中有任意一个结果的键值为False，则不执行<see cref="M:XCSJ.Helper.TypeHelper.Where(System.Func{System.Type,System.Boolean})"/>的全反射返回；
            </summary>
        </member>
        <member name="P:XCSJ.Caches.TypesCache.Types">
            <summary>
            类型列表的缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TypesCache.GetTypes">
            <summary>
            获取当前程序集中所有缓存的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.TypesCache.GetTypesWithoutCache">
            <summary>
            不使用缓存获取所有的类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.TypesCache.GetTypesWithoutCache(System.Func{System.Type,System.Boolean})">
            <summary>
            不使用缓存获取所有符合条件的类型:外部调用时必须有遍历才能将所有符合条件的类型获取到；
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.TypesCache.ForeachTypesWithoutCache(System.Action{System.Type})">
            <summary>
            不使用缓存遍历程序集中所有的类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Caches.TypeMembersCache">
            <summary>
            类型成员集合缓存：支持的成员信息有字段、属性、空形参方法
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TypeMembersCache.Get(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TypeMembersCacheValue">
            <summary>
            类型成员集合缓存值：支持的成员信息有字段、属性、空形参方法
            </summary>
        </member>
        <member name="P:XCSJ.Caches.TypeMembersCacheValue.memberNames">
            <summary>
            成员名称数组
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TypeMembersCacheValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TypeMemberCache">
            <summary>
            类型成员缓存：支持的成员信息有字段、属性、空形参方法
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TypeMemberCache.Get(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TypeMemberCacheValue">
            <summary>
            类型成员缓存值：支持的成员信息有字段、属性、空形参方法
            </summary>
        </member>
        <member name="P:XCSJ.Caches.TypeMemberCacheValue.memberInfo">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:XCSJ.Caches.TypeMemberCacheValue.memberValueType">
            <summary>
            成员值类型
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TypeMemberCacheValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.MemberInfosCache`2">
            <summary>
            成员信息列表缓存
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMemberInfo"></typeparam>
        </member>
        <member name="M:XCSJ.Caches.MemberInfosCache`2.Get(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取成员信息列表
            </summary>
            <param name="type">期望获取成员信息的类型</param>
            <param name="bindingAttr">获取成员信息时的绑定标志</param>
            <param name="includeBaseType">获取成员信息时是否包含基础类型中的成员信息</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.FieldInfosCache">
            <summary>
            字段信息列表缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.FieldInfosCache.CreateValue(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            创建值
            </summary>
            <param name="key1">期望获取成员信息的类型</param>
            <param name="key2">获取成员信息时的绑定标志</param>
            <param name="key3">获取成员信息时是否包含基础类型中的成员信息</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.PropertyInfosCache">
            <summary>
            属性信息列表缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.PropertyInfosCache.CreateValue(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            创建值
            </summary>
            <param name="key1">期望获取成员信息的类型</param>
            <param name="key2">获取成员信息时的绑定标志</param>
            <param name="key3">获取成员信息时是否包含基础类型中的成员信息</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.MethodInfosCache">
            <summary>
            方法信息列表缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.MethodInfosCache.CreateValue(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            创建值
            </summary>
            <param name="key1">期望获取成员信息的类型</param>
            <param name="key2">获取成员信息时的绑定标志</param>
            <param name="key3">获取成员信息时是否包含基础类型中的成员信息</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.EventInfosCache">
            <summary>
            事件信息列表缓存
            </summary>
        </member>
        <member name="M:XCSJ.Caches.EventInfosCache.CreateValue(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            创建值
            </summary>
            <param name="key1">期望获取成员信息的类型</param>
            <param name="key2">获取成员信息时的绑定标志</param>
            <param name="key3">获取成员信息时是否包含基础类型中的成员信息</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.NameCache">
            <summary>
            名称缓存；缓存名称特性<see cref="T:XCSJ.Attributes.NameAttribute"/>的信息；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.NameCache.TryGet(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo,XCSJ.Caches.NameCacheValue@)">
            <summary>
            尝试获取名称缓存值
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.NameCache.Get(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            获取名称
            </summary>
            <param name="memberInfo"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.NameCache.Get(System.Enum,XCSJ.Languages.ELanguageType)">
            <summary>
            获取枚举字段值的名称
            </summary>
            <param name="e"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.NameCacheValue">
            <summary>
            名称缓存值；缓存名称特性<see cref="T:XCSJ.Attributes.NameAttribute"/>的信息；
            </summary>
        </member>
        <member name="P:XCSJ.Caches.NameCacheValue.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:XCSJ.Caches.NameCacheValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TipCache">
            <summary>
            提示缓存；缓存提示特性<see cref="T:XCSJ.Attributes.TipAttribute"/>的信息；
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TipCache.TryGet(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo,XCSJ.Caches.TipCacheValue@)">
            <summary>
            尝试获取提示缓存值
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.TipCache.Get(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            获取提示
            </summary>
            <param name="memberInfo"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Caches.TipCache.Get(System.Enum,XCSJ.Languages.ELanguageType)">
            <summary>
            获取枚举字段值的提示
            </summary>
            <param name="e"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Caches.TipCacheValue">
            <summary>
            提示缓存值；缓存提示特性<see cref="T:XCSJ.Attributes.TipAttribute"/>的信息；
            </summary>
        </member>
        <member name="P:XCSJ.Caches.TipCacheValue.tip">
            <summary>
            提示
            </summary>
        </member>
        <member name="M:XCSJ.Caches.TipCacheValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.ArrayExtension">
            <summary>
            数组扩展：针对<see cref="T:System.Array"/>的扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Add``1(``0[]@,``0)">
            <summary>
            添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.ArrayEquals``1(``0[],``0[])">
            <summary>
            数组中元素相等：使用泛型类型中的<see cref="M:System.Object.Equals(System.Object)"/>可重载函数比较；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.ArrayReferenceEquals``1(``0[],``0[])">
            <summary>
            数组中元素引用相等：使用<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>比较；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.AddRange``1(``0[]@,``0[])">
            <summary>
            批量添加
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="items"></param>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Insert``1(``0[]@,System.Int32,``0)">
            <summary>
            插入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Remove``1(``0[]@,``0)">
            <summary>
            移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            查找所有符合条件的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Find``1(``0[],System.Predicate{``0})">
            <summary>
            查找第一个符合条件的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            查找索引
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.IndexOf``1(``0[],``0)">
            <summary>
            获取索引
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.LastIndexOf``1(``0[],``0)">
            <summary>
            获取项的最后索引
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.RemoveAt``1(``0[]@,System.Int32)">
            <summary>
            通过索引移除
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Contains``1(``0[],``0)">
            <summary>
            是否包含项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ArrayExtension.Clear``1(``0[]@)">
            <summary>
            清空数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
        </member>
        <member name="T:XCSJ.Collections.BitArrayExtension">
            <summary>
            位数组扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.BitArrayExtension.GetNumeral(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
            转换位数组为整形
            </summary>
            <param name="array">位数组</param>
            <param name="startIndex">起始索引</param>
            <param name="bitLength">位长度</param>
            <returns>转换后的整形</returns>
        </member>
        <member name="M:XCSJ.Collections.BitArrayExtension.ToNumeral(System.Collections.BitArray)">
            <summary>
            Convert BitArray to int
            </summary>
            <returns>Converted int</returns>
        </member>
        <member name="T:XCSJ.Collections.CollectionExtension">
            <summary>
            集合扩展：针对<see cref="T:System.Collections.ICollection"/>与<see cref="T:System.Collections.Generic.ICollection`1"/>的扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.CollectionExtension.AddWithDistinct``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            去重添加
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <returns>成功添加返回True；如果已经存在或发生异常，返回False；</returns>
        </member>
        <member name="M:XCSJ.Collections.CollectionExtension.AddWithDistinct``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            去重添加
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns>成功添加返回True；如果已经存在或发生异常，返回False；</returns>
        </member>
        <member name="M:XCSJ.Collections.CollectionExtension.AddWithDistinct``1(System.Collections.Generic.ICollection{``0},``0,System.Func{``0,``0,System.Boolean})">
            <summary>
            去重添加
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="value"></param>
            <param name="comparer"></param>
            <returns>成功添加返回True；如果已经存在或发生异常，返回False；</returns>
        </member>
        <member name="M:XCSJ.Collections.CollectionExtension.AddRangeWithDistinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            去重批量添加
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="values"></param>
        </member>
        <member name="M:XCSJ.Collections.CollectionExtension.AddRangeWithDistinct``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            去重批量添加
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="values"></param>
            <param name="comparer"></param>
        </member>
        <member name="T:XCSJ.Collections.DictionaryExtension">
            <summary>
            字段扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.DictionaryExtension.TryGetValue``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1@,System.Boolean,System.Func{``0,System.Collections.Generic.KeyValuePair{System.Boolean,``1}})">
            <summary>
            尝试获取值
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="createIfNotExist"></param>
            <param name="createFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryExtension.Sort``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            对字典根据键升序排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryExtension.Sort``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            对字典根据键升序排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="M:XCSJ.Collections.DictionaryExtension.SortByDescending``2(System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            对字典根据键降序排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryExtension.SortByDescending``2(System.Collections.Generic.Dictionary{``0,``1}@)">
            <summary>
            对字典根据键降序排序
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="dictionary"></param>
        </member>
        <member name="T:XCSJ.Collections.DictionaryS`2">
            <summary>
            线程安全的字典类
            </summary>
        </member>
        <member name="P:XCSJ.Collections.DictionaryS`2.isWeakDictionary">
            <summary>
            是弱字典：为True时，当前对象管理的字典不属于当前类，即为弱引用管理；为false时，当前对象管理的字典为当前类专属，即其他任何对象无法直接对字典进行任何增删改查操作；
            </summary>
        </member>
        <member name="P:XCSJ.Collections.DictionaryS`2.weakItems">
            <summary>
            弱项字典
            </summary>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:XCSJ.Collections.DictionaryS`2.count">
            <summary>
            字典中项的数目
            </summary>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.GetOrAddValue(`0,System.Func{`1})">
            <summary>
            获取或添加值
            </summary>
            <param name="key"></param>
            <param name="newFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.Add(`0,`1)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.Update(`0,`1)">
            <summary>
            更新值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.AddOrUpdate(`0,`1)">
            <summary>
            添加或更新值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
            <summary>
            添加或更新
            </summary>
            <param name="key">键</param>
            <param name="value">值:如果字典中不存在对应键，则使用本值作为新值</param>
            <param name="updateFunc">更新函数：如果字典中存在对应键，则使用本更新函数的返回值作为新值;如本对象为空，使用传入的值参数作为新值</param>
            <returns>返回True表示新加；返回False表示更新；</returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.TryGetAndRemoveValue(`0,`1@)">
            <summary>
            尝试获取并移除值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.Remove(`0)">
            <summary>
            移除
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.Remove(`0,System.Func{`0,`1,System.Boolean})">
            <summary>
            移除
            </summary>
            <param name="key">键</param>
            <param name="removeFunc">移除函数：参数依次为：键、旧值，返回值标识是否移除</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.UpdateOrRemove(`0,System.Func{`0,`1,`1},System.Func{`0,`1,`1,System.Boolean})">
            <summary>
            更新或移除
            </summary>
            <param name="key">键</param>
            <param name="updateFunc">更新函数：参数依次为：键、旧值，返回值标识新值</param>
            <param name="removeFunc">移除函数：参数依次为：键、旧值、新值，返回值标识是否移除</param>
            <returns>存在对应键返回True；不存在对应键返回False;</returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.UpdateOrRemove(`0,System.Func{`0,`1,`1},System.Func{`0,`1,`1,System.Boolean},System.Boolean@)">
            <summary>
            更新或移除
            </summary>
            <param name="key">键</param>
            <param name="updateFunc">更新函数：参数依次为：键、旧值，返回值标识新值</param>
            <param name="removeFunc">移除函数：参数依次为：键、旧值、新值，返回值标识是否移除</param>
            <param name="updateOrRemove">执行更新返回True;执行移除范围False;本返回值仅在函数返回值为True时有意义；</param>
            <returns>存在对应键返回True；不存在对应键返回False;</returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.CopyDictionary">
            <summary>
            拷贝一个新的字典返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.CopyValues">
            <summary>
            拷贝值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.DictionaryS`2.CopyValues``1(System.Func{`1,``0})">
            <summary>
            拷贝值
            </summary>
            <typeparam name="TNewValue"></typeparam>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.EnumerableExtension">
            <summary>
            可迭代扩展：针对<see cref="T:System.Collections.IEnumerable"/>与<see cref="T:System.Collections.Generic.IEnumerable`1"/>的扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            判断源中任意元素是否满足断言
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">源</param>
            <param name="predicate">断言</param>
            <param name="resultOnEmptySource">源为空时的返回值；函数<see cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>此情况下返回值为False；</param>
            <returns>如果源为空，返回resultOnEmptySource；源不空时，如任意元素满足断言则返回True,如任意元素不满足断言则返回False；</returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            判断源中所有元素是否满足断言
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source">源</param>
            <param name="predicate">断言</param>
            <param name="resultOnEmptySource">源为空时的返回值；函数<see cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})"/>此情况下返回值为True；</param>
            <returns>如果源为空，返回resultOnEmptySource；源不空时，如所有元素均满足断言则返回True,如任意元素不满足断言则返回False；</returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Cast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            转换
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Cast``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            转换
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Cast``1(System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            转换
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            转List
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,``1})">
            <summary>
            转List
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.FirstOrNew``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Action{``0})">
            <summary>
            查找第一符合条件的，如果没有符合条件的则new并调用初始化后返回
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.FirstOrNew``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0})">
            <summary>
            查找第一符合条件的，如果没有符合条件的则新建后返回
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="newFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            查找第一符合条件的，如果没有符合条件的则返回对应类型的默认值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.FirstOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            查找第一符合条件的，如果没有符合条件的则返回对应类型的默认值；同时将返回值执行转换
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String,System.String,System.String,System.Boolean)">
            <summary>
            转字符串
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="cast"></param>
            <param name="separator"></param>
            <param name="leftQuote"></param>
            <param name="rightQuote"></param>
            <param name="trimEndSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ToStringDirect``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            直接转为字符串
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="separator"></param>
            <param name="leftQuote"></param>
            <param name="rightQuote"></param>
            <param name="trimEndSeparator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Foreach``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            遍历
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ForeachLite``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            简版遍历；不做异常处理;
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.ForeachLite``1(System.Collections.Generic.IEnumerable{``0},System.Action{System.Int32,``0})">
            <summary>
            简版遍历；不做异常处理;
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            查找最小值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="lessEqualPredicate">小于等于比较器</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},``0)">
            <summary>
            查找最小值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="lessEqualPredicate">小于等于比较器</param>
            <param name="defaultMinIfSourceEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean})">
            <summary>
            查找最大值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="greaterEqualPredicate">大于等于比较器</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},``0)">
            <summary>
            查找最大值
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="greaterEqualPredicate">大于等于比较器</param>
            <param name="defaultMaxIfSourceEmpty"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            获取索引
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            获取索引
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0@)">
            <summary>
            获取索引
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean},``0@)">
            <summary>
            获取索引
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            检查是否包含
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Int32,``0,System.Boolean})">
            <summary>
            检查是否包含
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Get``1(System.Collections.Generic.IEnumerable{``0},System.Type,System.Boolean)">
            <summary>
            获取可转为期望类型的第一个元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Get``2(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            获取可转为期望类型的第一个元素;
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Gets``1(System.Collections.Generic.IEnumerable{``0},System.Type,System.Boolean)">
            <summary>
            获取可转为期望类型的所有元素;
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.Gets``2(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            获取可转为期望类型的所有元素
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.OrderByNaturalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            通过自然比较对迭代器排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.EnumerableExtension.WhereCast``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
            条件转换
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source"></param>
            <param name="whereFunc"></param>
            <param name="castFunc"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.ListExtension">
            <summary>
            列表扩展：针对<see cref="T:System.Collections.IList"/>与<see cref="T:System.Collections.Generic.IList`1"/>的扩展
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.RemoveAll(System.Collections.IList,System.Func{System.Object,System.Boolean})">
            <summary>
            移除所有
            </summary>
            <param name="list"></param>
            <param name="match"></param>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.RemoveFirst(System.Collections.IList,System.Func{System.Object,System.Boolean})">
            <summary>
            移除第一个
            </summary>
            <param name="list"></param>
            <param name="match"></param>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.RemoveLast(System.Collections.IList,System.Func{System.Object,System.Boolean})">
            <summary>
            移除末一个
            </summary>
            <param name="list"></param>
            <param name="match"></param>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.AnyMatch(System.Collections.IList,System.Func{System.Object,System.Boolean})">
            <summary>
            任意匹配
            </summary>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.AllMatch(System.Collections.IList,System.Func{System.Object,System.Boolean})">
            <summary>
            全部匹配
            </summary>
            <param name="list"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.SwapAt``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            通过索引交换
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.MoveTo``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            通过索引移动
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.First``1(System.Collections.Generic.IList{``0})">
            <summary>
            第一个对象：比调用<see cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})"/>可迭代扩展函数执行效率略高；
            </summary>
            <typeparam name="TSource">源队列：如果队列为空，会报出异常<see cref="T:System.IndexOutOfRangeException"/></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.FirstOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            第一个或默认对象：比调用<see cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>可迭代扩展函数执行效率略高；
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            末一个目标：比调用<see cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})"/>可迭代扩展函数执行效率略高；
            </summary>
            <typeparam name="TSource">源队列：如果队列为空，会报出异常<see cref="T:System.IndexOutOfRangeException"/></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.LastOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            末一个或默认对象：比调用<see cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>可迭代扩展函数执行效率略高；
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.GetPrefixMatchValue(System.String,System.String)">
            <summary>
            获取前缀匹配值：即获取文本与标准前缀连续相同前缀字符的数目；
            </summary>
            <param name="text"></param>
            <param name="standardPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.PrefixMatchCompare(System.String,System.String,System.String)">
            <summary>
            前缀匹配比较
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="standardPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.GetBestPrefixMatch``1(System.Collections.Generic.List{``0},System.String,System.Func{``0,System.String})">
            <summary>
            获取最佳前缀匹配
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="standardPrefix"></param>
            <param name="cast"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.GetBestPrefixMatch(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            获取最佳前缀匹配
            </summary>
            <param name="list"></param>
            <param name="standardPrefix"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListExtension.PrefixMatchSort(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            前缀匹配排序
            </summary>
            <param name="list"></param>
            <param name="standardPrefix"></param>
        </member>
        <member name="T:XCSJ.Collections.ListS`1">
            <summary>
            线程安全的列表类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Collections.ListS`1.isWeakList">
            <summary>
            是弱列表：为True时，当前对象管理的列表不属于当前类，即为弱引用管理；为false时，当前对象管理的列表为当前类专属，即其他任何对象无法直接对列表进行任何增删改查操作；
            </summary>
        </member>
        <member name="P:XCSJ.Collections.ListS`1.weakItems">
            <summary>
            弱项列表
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            构造
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:XCSJ.Collections.ListS`1.count">
            <summary>
            列表中项的数目
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加项
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.Add(`0)">
            <summary>
            添加项
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryAdd(System.Func{`0,System.Boolean},`0)">
            <summary>
            尝试添加：无匹配则添加，有匹配不添加；
            </summary>
            <param name="match">匹配函数，如果为null，直接添加项</param>
            <param name="item"></param>
            <returns>如果已存在匹配项，返回false；成功添加，返回True；</returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.AddWithDistinct(`0)">
            <summary>
            去重添加项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.Remove(`0)">
            <summary>
            移除列表中指定项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.Clear">
            <summary>
            列表清空
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryGetAndRemoveByCount(System.Int32,System.Collections.Generic.List{`0}@,System.Int32@,System.Int32@)">
            <summary>
            尝试获取并移除通过数量：尝试获取期望数量的项并同时从列表中移除该数量的项
            </summary>
            <param name="count"></param>
            <param name="list"></param>
            <param name="listCount"></param>
            <param name="totalCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryGetAndRemoveByCount(System.Int32,System.Collections.Generic.List{`0}@)">
            <summary>
            尝试获取并移除通过数量：尝试获取期望数量的项并同时从列表中移除该数量的项
            </summary>
            <param name="count"></param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryGetAndRemove(System.Int32,`0@)">
            <summary>
            尝试获取并移除：尝试获取指定索引的项并同时从列表中移除该项
            </summary>
            <param name="index"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.Items">
            <summary>
            拷贝一个新的数组返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.CopyList">
            <summary>
            拷贝一个新的列表返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.CopyAndClear">
            <summary>
            拷贝一个新的数组返回，同时将列表清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.CopyListAndClear">
            <summary>
            拷贝一个新的列表返回，同时将列表清空;执行效率高于CopyAndClear;
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryCopyListAndClear(System.Collections.Generic.List{`0}@)">
            <summary>
            尝试拷贝一个新的列表返回，同时将列表清空;如果列表中没有元素，则返回false与null；
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.CopyListAndClear(System.Collections.Generic.List{`0}@,System.Boolean)">
            <summary>
            将数据拷贝到参数列表中，同时将列表清空；如果列表中没有元素，则返回false；
            </summary>
            <param name="list">参数列表；如果列表有数据时，将列表数据拷贝到参数列表中；如本参数列表对象无效会新建；如果列表无数据时，不会本参数做任何操作；</param>
            <param name="clearParamList">清空参数列表：在拷贝数据前是否将参数列表清空；</param>
            <returns>如果列表有数据，返回True；否则返回False;</returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryGetItem(System.Func{`0,System.Boolean},`0@)">
            <summary>
            尝试获取项
            </summary>
            <param name="match"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListS`1.TryGetItems(System.Func{`0,System.Boolean},System.Collections.Generic.List{`0}@)">
            <summary>
            尝试获取项
            </summary>
            <param name="match"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.DelegateFun`1">
            <summary>
            委托函数声明，传入一个形参
            </summary>
            <typeparam name="T"></typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.EventDelegateList`2">
            <summary>
            事件委托链类
            特别注意：只能指向一种类型的委托函数
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TParam"></typeparam>
        </member>
        <member name="M:XCSJ.Collections.EventDelegateList`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Collections.EventDelegateList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            构造函数，带比较器的构造函数
            用于自定义的类做key时使用
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:XCSJ.Collections.EventDelegateList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化后的构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:XCSJ.Collections.EventDelegateList`2.CallFun(`0,`1)">
            <summary>
            查找指定key的委托链函数，然后传入对应参数依次执行
            </summary>
            <param name="key"></param>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Collections.ListMap`2">
            <summary>
            列表映射
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="F:XCSJ.Collections.ListMap`2.values">
            <summary>
            值列表
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ListMap`2.valuesMap">
            <summary>
            值映射
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.#ctor(System.Func{`1,`0})">
            <summary>
            构造
            </summary>
            <param name="valueToKeyFunc"></param>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.Init(System.Func{`1,`0})">
            <summary>
            初始化
            </summary>
            <param name="valueToKeyFunc"></param>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.AddByKey``1(`0,System.Action{``0})">
            <summary>
            通过键添加
            </summary>
            <typeparam name="TNewValue"></typeparam>
            <param name="key"></param>
            <param name="initValueAction"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.AddByValue(`1)">
            <summary>
            通过值添加
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.Add(`0,`1)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ListMap`2.ListToMap">
            <summary>
            列表转映射
            </summary>
        </member>
        <member name="T:XCSJ.Collections.ListMap`1">
            <summary>
            列表映射
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:XCSJ.Collections.ListMap`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ListMap`1.ValueToKey(`0)">
            <summary>
            值转键
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.MapList`2">
            <summary>
            映射链表类:可存储一键多值的容器类
            </summary>
            <typeparam name="TKey">映射表的key</typeparam>
            <typeparam name="TValue">链表类中的value</typeparam>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            构造函数，带比较器的构造函数
            用于自定义的类做key时使用
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.Add(`0,`1)">
            <summary>
            添加一个新的value到value链；
            有对应key，value链的末尾添加新value；没有对应key，先创建新的value链，再在value链中添加新的value；
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.Add(`1)">
            <summary>
            添加一个新的value到所有的value链；只对目前有key的链中进行添加；
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.Remove(`0,`1)">
            <summary>
            移除key对应value链中的一个value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.RemoveValue(`1)">
            <summary>
            从所有key对应的value链中,移出所有value；
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.Clear(`0)">
            <summary>
            清空整个key对应的value链，不会将key-value对移除
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XCSJ.Collections.MapList`2.Contains(`0,`1)">
            <summary>
            检测映射链表类中是否存在对应项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.InstanceObjectPool`1">
            <summary>
            单例对象池
            接口函数线程安全
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Collections.InstanceObjectPool`1._instance">
            <summary>
            本类的实例对象
            </summary> 
        </member>
        <member name="P:XCSJ.Collections.InstanceObjectPool`1.instance">
            <summary>
            静态函数，单例模式
            </summary>
            <returns></returns> 
        </member>
        <member name="M:XCSJ.Collections.InstanceObjectPool`1.Get(XCSJ.Algorithms.ParamList)">
            <summary>
            获取对象,使用参数对实例对象进行初始化
            </summary>
            <param name="param"></param>
            <returns></returns> 
        </member>
        <member name="M:XCSJ.Collections.InstanceObjectPool`1.Get">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.ObjectQueueNew`1">
            <summary>
            对象队列新建
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Collections.ObjectQueueNew`1.Get">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Collections.ObjectQueue`1">
            <summary>
            对象队列-接口函数线程安全
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Collections.ObjectQueue`1.objectQueue">
            <summary>
            实体对象列表
            </summary> 
        </member>
        <member name="M:XCSJ.Collections.ObjectQueue`1.Get">
            <summary>
            获取对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ObjectQueue`1.Set(`0)">
            <summary>
            添加对象到对象池~
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:XCSJ.Collections.ObjectPool`1">
            <summary>
            对象池：基于<see cref="T:System.Collections.Generic.Stack`1"/>实现
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.idleObjectsOfStatck">
            <summary>
            空闲对象基于堆栈
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.idleObjectsOfQueue">
            <summary>
            空闲对象基于队列
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.newFun">
            <summary>
            新建：当分配对象时，如空闲容器为空则默认调用当前委托对象执行新建
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.onAlloc">
            <summary>
            分配回调：当分配对象时，从空闲堆栈获取或新建对象后调用当前委托对象，以方便外围代码完成对象的初始化或重置类操作
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.onFree">
            <summary>
            释放回调：当释放对象时，已加入空闲堆栈后回调，以方便外围代码完成对象的初始化或重置类操作
            </summary>
        </member>
        <member name="F:XCSJ.Collections.ObjectPool`1.validObjectFunc">
            <summary>
            有效验证：用于验证对象有效性的委托对象，默认检测对象不为null
            </summary>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.Init(System.Func{`0},System.Action{`0},System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            初始化缓存池
            </summary>
            <param name="newFun"></param>
            <param name="onAlloc"></param>
            <param name="onFree"></param>
            <param name="validObjectFunc"></param>
            <param name="idleObjectUseStatck"></param>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.OnNew">
            <summary>
            新建对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.OnAlloc(`0)">
            <summary>
            分配回调
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.OnFree(`0)">
            <summary>
            释放回调
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.OnValidObject(`0)">
            <summary>
            有效验证
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.Alloc">
            <summary>
            分配：优先从空闲堆栈中分配，如堆栈为空则新建对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.ObjectPool`1.Free(`0)">
            <summary>
            释放对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:XCSJ.Collections.WorkObjectPool`1">
            <summary>
            工作型对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Collections.WorkObjectPool`1.workObjects">
            <summary>
            工作列表
            </summary>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.OnAlloc(`0)">
            <summary>
            分配回调
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.OnFree(`0)">
            <summary>
            释放回调
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.Clear">
            <summary>
            清空工作列表<see cref="F:XCSJ.Collections.WorkObjectPool`1.workObjects"/>中所有对象，并依次执行释放<see cref="M:XCSJ.Collections.ObjectPool`1.Free(`0)"/>
            </summary>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.Free(System.Predicate{`0})">
            <summary>
            释放工作列表<see cref="F:XCSJ.Collections.WorkObjectPool`1.workObjects"/>中匹配的第一个对象
            </summary>
            <param name="match"></param>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.Find(System.Predicate{`0})">
            <summary>
            从工作列表<see cref="F:XCSJ.Collections.WorkObjectPool`1.workObjects"/>中查找匹配对象
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Collections.WorkObjectPool`1.FindOrAlloc(System.Predicate{`0})">
            <summary>
            从工作列表<see cref="F:XCSJ.Collections.WorkObjectPool`1.workObjects"/>中查找匹配对象，如果未找到则执行分配<see cref="M:XCSJ.Collections.ObjectPool`1.Alloc"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.IBaseDB">
            <summary>
            数据库接口
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IBaseDB.connectSettings">
            <summary>
            连接设置
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.IBaseDB.GetTableStructure(System.String)">
            <summary>
            获取表结果
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.IBaseDB.ExecuteNonQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行非查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.IBaseDB.ExecuteQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.IBaseDBAsync">
            <summary>
            异步数据库接口
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.IBaseDBAsync.ExecuteNonQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行非查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.IBaseDBAsync.ExecuteQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.BaseDB">
            <summary>
            基础数据库
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseDB.converter">
            <summary>
            定义当前数据库使用的转换器
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseDB.tables">
            <summary>
            表列表
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseDB.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseDB.connectSettings">
            <summary>
            数据库的连接设置信息；子类中必须实现且不可为null;
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryGetConnectionString(System.String@)">
            <summary>
            尝试获取连接字符串
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.ExecuteNonQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行非查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteNonQuery(XCSJ.DataBase.Sql,XCSJ.DataBase.Result@)">
            <summary>
            尝试执行非查询
            </summary>
            <param name="sql"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.ExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行非查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String},XCSJ.DataBase.Result@)">
            <summary>
            尝试执行键值非查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.ExecuteQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteQuery(XCSJ.DataBase.Sql,XCSJ.DataBase.ResultSet@)">
            <summary>
            尝试执行查询
            </summary>
            <param name="sql"></param>
            <param name="resultSet"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.ExecuteKVQuery(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行键值查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteKVQuery(System.String,System.Collections.Generic.List{System.String},XCSJ.DataBase.ResultSet@)">
            <summary>
            尝试执行键值查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="resultSet"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.HandleException(System.String,System.Exception,System.String)">
            <summary>
            处理异常
            </summary>
            <param name="method"></param>
            <param name="exception"></param>
            <param name="message"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.FromatSingleObjectToSql(System.Object,System.Type)">
            <summary>
            将单一对象转化为数据库字段类型对象后，再转化为对应的字符串类型；会根据字段类型需要添加引号！
            </summary>
            <param name="o"></param>
            <param name="fieldType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.FormatModelToSql(XCSJ.DataBase.Table,XCSJ.DataBase.IBaseModel,System.Boolean,System.Boolean)">
            <summary>
            将模型对象的各成员信息(数据库存在对应字段的)转化为SQL语句要求的以逗号分割的字符串
            </summary>
            <param name="table"></param>
            <param name="value"></param>
            <param name="needFieldNameAndEqual"></param>
            <param name="ingoreIndexZero"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.IsNeedQuotes(System.Type)">
            <summary>
            是否需要引号
            </summary>
            <param name="filedType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.ToDBTypeString(System.Type)">
            <summary>
            类型转数据库类型字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.FromDBTypeString(System.String)">
            <summary>
            从数据库类型字符串转类型
            </summary>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableStructure(System.String)">
            <summary>
            获取表结构
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableStructure(System.String,System.Type)">
            <summary>
            获取表结构
            </summary>
            <param name="tableName"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableStructure``1(System.String)">
            <summary>
            获取表结构
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableStructure``1">
            <summary>
            获取表结构
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableStructure(System.Type)">
            <summary>
            获取表结构
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateTableSQL(System.String,System.Collections.Generic.List{XCSJ.DataBase.Field})">
            <summary>
            创建表SQL
            </summary>
            <param name="tableName"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateTable(System.String)">
            <summary>
            创建表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateTable(System.String,System.Collections.Generic.List{XCSJ.DataBase.Field})">
            <summary>
            创建表
            </summary>
            <param name="tableName"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateTable``1(System.String)">
            <summary>
            创建表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateTable``1">
            <summary>
            创建表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.DropTableSQL(System.String)">
            <summary>
            删除表SQL
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.DropTable(System.String)">
            <summary>
            删除表
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.DropTable``1(System.String)">
            <summary>
            删除表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.DropTable``1">
            <summary>
            删除表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateInsertSQL(System.String,System.Object[])">
            <summary>
            插入SQL
            </summary>
            <param name="tableName"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Insert(System.String)">
            <summary>
            插入
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Insert(System.String,System.Object[])">
            <summary>
            插入
            </summary>
            <param name="tableName"></param>
            <param name="paramList"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Insert(XCSJ.DataBase.IBaseModel)">
            <summary>
            插入
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Insert(System.String,XCSJ.DataBase.IBaseModel)">
            <summary>
            插入
            </summary>
            <param name="tableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Delete(System.String)">
            <summary>
            删除
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Delete(System.String,System.Int64)">
            <summary>
            删除
            </summary>
            <param name="tableName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Delete(XCSJ.DataBase.IBaseModel)">
            <summary>
            删除
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Update(System.String)">
            <summary>
            更新
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Update(XCSJ.DataBase.IBaseModel)">
            <summary>
            更新
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Update(System.String,XCSJ.DataBase.IBaseModel)">
            <summary>
            更新
            </summary>
            <param name="tableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.CreateSelectSQL(System.String,System.String,System.String[])">
            <summary>
            创建查询SQL
            </summary>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select(System.Type,System.String,System.Int64)">
            <summary>
            查询
            </summary>
            <param name="bmType"></param>
            <param name="tableName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select``1(System.String,System.Int64)">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select``1(System.Int64)">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select``1(System.String)">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAgain(XCSJ.DataBase.IBaseModel)">
            <summary>
            再次查询
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAgain(System.String,XCSJ.DataBase.IBaseModel)">
            <summary>
            再次查询
            </summary>
            <param name="tableName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAgain(System.String,System.Object,System.String)">
            <summary>
            再次查询
            </summary>
            <param name="tableName"></param>
            <param name="value"></param>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAll(System.Type,System.String)">
            <summary>
            查询全部
            </summary>
            <param name="bmType"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAll``1(System.String)">
            <summary>
            查询全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAll``1">
            <summary>
            查询全部
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyAll(System.Type,System.String)">
            <summary>
            查询任意全部
            </summary>
            <param name="objType"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyAll``1(System.String)">
            <summary>
            查询任意全部
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyAll``1">
            <summary>
            查询任意全部
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectWhere(System.Type,System.String,System.String,System.String[])">
            <summary>
            查询满足条件的
            </summary>
            <param name="bmType"></param>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectWhere``1(System.String,System.String,System.String[])">
            <summary>
            查询满足条件的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectWhereWithLimit``1(System.String,System.String[])">
            <summary>
            查询满足条件带限制的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyWhere(System.Type,System.String,System.String,System.String[])">
            <summary>
            查询任意满足条件的
            </summary>
            <param name="objType"></param>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyWhere``1(System.String,System.String,System.String[])">
            <summary>
            查询任意满足条件的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAnyWhereWithLimit``1(System.String,System.String[])">
            <summary>
            查询任意满足条件带限制的
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select(System.Type,System.String,System.String)">
            <summary>
            查询
            </summary>
            <param name="bmType"></param>
            <param name="sql"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select``1(System.String,System.String)">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAny(System.Type,System.String)">
            <summary>
            查询任意
            </summary>
            <param name="objType"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectAny``1(System.String)">
            <summary>
            查询任意
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select(System.String,System.Type,System.Func{System.Object,System.Object})">
            <summary>
            查询
            </summary>
            <param name="sql"></param>
            <param name="objType"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.Select``1(System.String,System.Func{``0,``0})">
            <summary>
            查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sql"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TrySelect``1(System.Type,System.String,System.Collections.Generic.List{``0},System.Func{``0})">
            <summary>
            尝试查询
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bmType"></param>
            <param name="sql"></param>
            <param name="list"></param>
            <param name="newT"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectCount(System.String,System.String)">
            <summary>
            查询数量
            </summary>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectCountWithLimit``1(System.String)">
            <summary>
            查询数量带限制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectSum(System.String,System.String,System.String)">
            <summary>
            查询和值
            </summary>
            <param name="tableName"></param>
            <param name="fieldName"></param>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SelectSumWithLimit``1(System.String,System.String)">
            <summary>
            查询和值带限制
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fieldName"></param>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetMaxID(System.String,System.String)">
            <summary>
            获取最大ID
            </summary>
            <param name="tableName"></param>
            <param name="idFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetMinID(System.String,System.String)">
            <summary>
            获取最小ID
            </summary>
            <param name="tableName"></param>
            <param name="idFieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.SameTableName(System.String,System.String)">
            <summary>
            判断是否为相同表名
            </summary>
            <param name="table1Name"></param>
            <param name="table2ame"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTableInCache(System.String)">
            <summary>
            获取在缓存中的表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.AddTableToCache(XCSJ.DataBase.Table)">
            <summary>
            添加表到缓存
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTable(System.String)">
            <summary>
            获取表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTable``1">
            <summary>
            获取表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTable(System.Type)">
            <summary>
            获取表
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTables">
            <summary>
            获取当前数据库的所有表名称，为了执行效率，本函数仅返回名称列表，不获取对应表的表结构信息；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.GetTablesWithTableStructure">
            <summary>
            获取当前数据库的所有表名称，并请求表的表结构信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.BaseDB.validAsyncMode">
            <summary>
            是否为有效异步模式：如果为True时，那么执行结果大概率是在多线程状态下回调的（WebGL环境除外）；
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryGetTablesWithTableStructure(System.Action{XCSJ.Algorithms.InvokeResult})">
            <summary>
            尝试获取当前数据库的所有表名称，并请求表的表结构信息
            </summary>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteNonQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            尝试执行非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            尝试执行键值非查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            尝试执行查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB.TryExecuteKVQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            尝试执行键值查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.BaseDB`1">
            <summary>
            基础数据库
            </summary>
            <typeparam name="TConnectSettings"></typeparam>
        </member>
        <member name="F:XCSJ.DataBase.BaseDB`1._connectSettings">
            <summary>
            连接设置
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseDB`1.connectSettings">
            <summary>
            连接设置
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB`1.Connect(`0)">
            <summary>
            连接
            </summary>
            <param name="connectSettings"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.AstractDB`4">
            <summary>
            抽象数据库
            </summary>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TReader"></typeparam>
            <typeparam name="TConnectSettings"></typeparam>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.CreateConnection">
            <summary>
            创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.CreateCommand">
            <summary>
            创建命令
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.AstractDB`4.connection">
            <summary>
            连接对象
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.CreateCommand(XCSJ.DataBase.Sql)">
            <summary>
            创建连接命令
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.ExecuteNonQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行非查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.ExecuteReader(XCSJ.DataBase.Sql)">
            <summary>
            执行阅读
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.AstractDB`4.ExecuteQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行查询
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.BaseDB`4">
            <summary>
            基础数据库
            </summary>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TReader"></typeparam>
            <typeparam name="TConnectSettings"></typeparam>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB`4.CreateConnection">
            <summary>
            创建连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseDB`4.CreateCommand">
            <summary>
            创建命令
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.IBaseModel">
            <summary>
            基础模型
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IBaseModel.id">
            <summary>
            ID编号
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IBaseModel.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.BaseModel">
            <summary>
            基础模型
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseModel._id">
            <summary>
            ID编号
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseModel.id">
            <summary>
            ID:数据库主键ID
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseModel.tableName">
            <summary>
            表名:模型所在数据库的数据表名称
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.BaseSqlite`3">
            <summary>
            基础SQLite
            </summary>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TReader"></typeparam>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`3.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`3.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="sqliteFileFullPath"></param>
        </member>
        <member name="T:XCSJ.DataBase.BaseSqlite`4">
            <summary>
            基础SQLite
            </summary>
            <typeparam name="TConnection"></typeparam>
            <typeparam name="TCommand"></typeparam>
            <typeparam name="TReader"></typeparam>
            <typeparam name="TConnectSettings"></typeparam>
        </member>
        <member name="P:XCSJ.DataBase.BaseSqlite`4.sqliteFileFullPath">
            <summary>
            SQLite文件全路径
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseSqlite`4.sqliteFileName">
            <summary>
            SQLite文件名
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseSqlite`4.isNewCreate">
            <summary>
            是新建的
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseSqlite`4.createIfNotExist">
            <summary>
            数据库文件不存在时，是否创建；默认是会创建，即有则打开，无则创建后打开；
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="sqliteFileFullPath"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.TestConnect(System.String,System.Action)">
            <summary>
            测试连接
            </summary>
            <param name="sqliteFileFullPath"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.Connect(System.String,System.Action)">
            <summary>
            连接
            </summary>
            <param name="sqliteFileFullPath"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.FillTableStructure(XCSJ.DataBase.ResultSet)">
            <summary>
            将数据库查询结果集解析并填充到表结构；需要保证结果集至少有1条记录+3个字段(字段索引、字段名、字段类型)信息
            </summary>
            <param name="resultSet"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.GetTableStructure(System.String)">
            <summary>
            获取表结构
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.GetTables">
            <summary>
            获取表列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.ToDBTypeString(System.Type)">
            <summary>
            转数据库类型字符串
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqlite`4.FromDBTypeString(System.String)">
            <summary>
            由数据库类型字符串转类型
            </summary>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.BaseSqliteConnectSettings">
            <summary>
            基础SQLite连接字符串
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseSqliteConnectSettings.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="sqliteFileFullPath"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.Set(System.String)">
            <summary>
            设置
            </summary>
            <param name="sqliteFileFullPath"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.op_Implicit(System.String)~XCSJ.DataBase.BaseSqliteConnectSettings">
            <summary>
            由SQLite文件全路径字符串隐式转换
            </summary>
            <param name="sqliteFileFullPath"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.TryGetConnectionString(System.String@)">
            <summary>
            尝试获取连接字符串
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.BaseSqliteConnectSettings.Merge(XCSJ.DataBase.BaseSqliteConnectSettings)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:XCSJ.DataBase.ConnectSettings">
            <summary>
            启动设置类；用于数据库的启动连接时使用
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ConnectSettings.name">
            <summary>
            名称:数据库名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ConnectSettings.address">
            <summary>
            地址:数据库地址,根据数据库的不同，可能是IP / URL / 本地磁盘路径(绝度或相对路径)
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="address"></param>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.Set(System.String,System.String)">
            <summary>
            设置
            </summary>
            <param name="name"></param>
            <param name="address"></param>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.TryGetConnectionString(System.String@)">
            <summary>
            尝试获取连接字符串
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.FromJson(System.String)">
            <summary>
            从Json转换
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.ConnectSettings.typeMaps">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.TryGetType(System.String,System.Type@)">
            <summary>
            尝试获取类型
            </summary>
            <param name="dbTypeString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings.TryGetDBType(System.Type,System.String@)">
            <summary>
            尝试获取DB类型
            </summary>
            <param name="dbTypeString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.TypeMap">
            <summary>
            类型映射
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.TypeMap.dbTypeString">
            <summary>
            数据库类型字符串
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.TypeMap.typeFullName">
            <summary>
            类型全名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.TypeMap.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TypeMap.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.ConnectSettings`1">
            <summary>
            连接设置
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings`1.FromJson(System.String)">
            <summary>
            从Json转换
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ConnectSettings`1.Merge(`0)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:XCSJ.DataBase.DBHelper">
            <summary>
            数据库辅助类
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.DBHelper.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.DBHelper.DefaultPort">
            <summary>
            默认端口
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.DBHelper.CreateSelectSQL(System.String,System.String,System.String[])">
            <summary>
            创建Select型SQL语句
            </summary>
            <param name="tableName"></param>
            <param name="whereCondition"></param>
            <param name="fieldNames"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.DBHelper.GetWhereCondition(System.String)">
            <summary>
            获取where条件
            </summary>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.DBExtension">
            <summary>
            数据库扩展：针对<see cref="T:XCSJ.DataBase.IBaseDB"/>的扩展
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.DBAsyncExtension">
            <summary>
            异步数据库扩展：针对<see cref="T:XCSJ.DataBase.IBaseDBAsync"/>的扩展
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.index">
            <summary>
            数据库（或结果集）字段列的索引
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.name">
            <summary>
            数据库（或结果集）字段列的名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.type">
            <summary>
            数据库（或结果集）字段列的数据类型
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.typeFullName">
            <summary>
            数据库（或结果集）字段列的数据类型全名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.primaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.autoincrement">
            <summary>
            自增
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.unique">
            <summary>
            唯一
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.notNull">
            <summary>
            非空
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.rule">
            <summary>
            C# 对象中出现同名成员时的处理规则
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.fieldOrProperty">
            <summary>
            字段/属性
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.memberName">
            <summary>
            成员名
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.memberType">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Field.memberInfo">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Field.Create(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="mi"></param>
            <param name="needHasFieldAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.Create(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="mi"></param>
            <param name="needHasFieldAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.Create(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="mi"></param>
            <param name="needHasFieldAttribute"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.SetValue(System.Object,System.Object,System.Object[])">
            <summary>
            设置值
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.GetValue(System.Object,System.Object[])">
            <summary>
            获取值
            </summary>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.SameField(System.String)">
            <summary>
            相同字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.SameField(XCSJ.DataBase.Field)">
            <summary>
            相同字段
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.CompareTo(XCSJ.DataBase.Field)">
            <summary>
            与字段比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Field.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.FieldHelper">
            <summary>
            数据库字段助手类
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.FieldHelper.GetFields``1">
            <summary>
            获取数据库字段列表:包括类型中字段成员与属性成员；
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.FieldHelper.GetFields(System.Type)">
            <summary>
            获取数据库字段列表:包括类型中字段成员与属性成员；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.FieldHelper.Add(System.Collections.Generic.List{XCSJ.DataBase.Field},XCSJ.DataBase.Field)">
            <summary>
            添加
            </summary>
            <param name="list"></param>
            <param name="field"></param>
        </member>
        <member name="T:XCSJ.DataBase.FieldAttribute">
            <summary>
            数据库字段特性：使用 C# 类对象创建数据库表时使用的特性类；推荐使用属性器作为数据库字段；
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.primaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.autoincrement">
            <summary>
            自增
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.unique">
            <summary>
            唯一
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.notNull">
            <summary>
            非空
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.rule">
            <summary>
            规则
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldAttribute.ignore">
            <summary>
            忽略
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.FieldSet">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.FieldSet.fields">
            <summary>
            字段列表
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.FieldSet.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.FieldSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.FieldSet.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.FieldSet.count">
            <summary>
            数目
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.FieldSet.GetField(System.String)">
            <summary>
            获取字段
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.FieldSet.GetIndex(System.String)">
            <summary>
            获取索引
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.FieldSet.ToJsonLite(System.Boolean)">
            <summary>
            转Json简版
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalModel">
            <summary>
            本地模型: 用于数据信息存储模型，基础结构有 id,name,...,description,createTime,otherinfo 这5个字段
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModel._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModel._createTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel.createTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModel._description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel.description">
            <summary>
            描述:字符串描述信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModel.defaultOhterinfo">
            <summary>
            默认其他信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel.otherinfoString">
            <summary>
            其他信息:其他信息格式化后的字符串
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Models.LocalModel.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalModel_NameUnique">
            <summary>
            本地模型，名称有UNIQUE约束
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel_NameUnique.name">
            <summary>
            名称:名称:受 UNIQUE 约束，即名称项信息不可重复;同时不可为空;
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Models.LocalModel_NameUnique.NameIsValid">
            <summary>
            名称有效
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalModel_NameGuidUnique">
            <summary>
            本地模型，名称、Guid有UNIQUE约束
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModel_NameGuidUnique._guid">
            <summary>
            GUID唯一便哈哈
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModel_NameGuidUnique.guid">
            <summary>
            GUID:GUID:受 UNIQUE 约束，即名称项信息不可重复;同时不可为空;
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalModelExample">
            <summary>
            local model example 本地模型案例
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalModelExample.OtherInfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModelExample.OtherInfo.boolValue">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModelExample.OtherInfo.intValue">
            <summary>
            整型值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModelExample.OtherInfo.stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalModelExample.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalModelExample.otherinfoString">
            <summary>
            其他信息字符串
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalNetModel">
            <summary>
            本地网络模型：用于本地数据库与网络数据库之间信息同步的模型；
            基础结构有 id,serverid,name,...,description,createTime,otherinfo,localinfo 这7个字段;
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModel._serverid">
            <summary>
            服务器ID
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalNetModel.serverid">
            <summary>
            服务器ID,服务器数据库的组件ID;本地数据库的仍然为id；
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModel.defaultLocalinfo">
            <summary>
            用于存储本地信息的字段；可被重写
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalNetModel.localinfoString">
            <summary>
            本地信息:本地信息格式化后的字符串
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalNetModelExample">
            <summary>
            local net model example 本地网络模型案例
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalNetModelExample.OtherInfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.OtherInfo.boolValue">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.OtherInfo.intValue">
            <summary>
            整型值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.OtherInfo.stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalNetModelExample.otherinfoString">
            <summary>
            其他信息字符串
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Models.LocalNetModelExample.LocalInfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.LocalInfo.boolValue">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.LocalInfo.intValue">
            <summary>
            整型值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.LocalInfo.stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Models.LocalNetModelExample.localinfo">
            <summary>
            本地信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Models.LocalNetModelExample.localinfoString">
            <summary>
            本地信息字符串
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.UserInfo">
            <summary>
            向数据库网络服务获取数据时需要的用户信息
            本信息是 数据库网络服务 启用用户系统用于认证客户端有效性时的用户信息，不代表数据库网络服务连接的具体实体数据库的用户信息；
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.UserInfo._name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserInfo.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.UserInfo._password">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserInfo.password">
            <summary>
            密码
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.UserInfo._otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserInfo.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.UserInfo.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.UserInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="password"></param>
            <param name="otherinfo"></param>
        </member>
        <member name="M:XCSJ.DataBase.UserInfo.Merge(XCSJ.DataBase.UserInfo)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.DataBase.UserInfo.Merge(System.Object)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.DataBase.UserInfo.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.BaseQ">
            <summary>
            基础问题
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseQ.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseQ.userInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseQ.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.BaseA">
            <summary>
            基础答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseA.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseA.result">
            <summary>
            结果
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.BaseA.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.BaseA.boolResult">
            <summary>
            布尔结果
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.BaseA.SetError(System.String,System.Int32)">
            <summary>
            设置错误
            </summary>
            <param name="error"></param>
            <param name="result"></param>
        </member>
        <member name="M:XCSJ.DataBase.BaseA.Set(XCSJ.Net.QuestionNetPackage)">
            <summary>
            设置
            </summary>
            <param name="question"></param>
        </member>
        <member name="T:XCSJ.DataBase.ESqlType">
            <summary>
            SQL类型
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.ESqlType.StandardSQL">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.ESqlType.KeyValue">
            <summary>
            键值
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.NonQueryQ">
            <summary>
            非查询问题
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryQ.sqlType">
            <summary>
            SQL类型
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryQ.valueParams">
            <summary>
            值参数列表
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryQ.sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryQ.msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.NonQueryA">
            <summary>
            非查询答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryA.sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NonQueryA.msg">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NonQueryA.Set(XCSJ.Net.QuestionNetPackage)">
            <summary>
            设置
            </summary>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.DataBase.NonQueryA.ToResult">
            <summary>
            转结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NonQueryA.op_Implicit(XCSJ.DataBase.NonQueryA)~XCSJ.DataBase.Result">
            <summary>
            隐式转换为<see cref="T:XCSJ.DataBase.Result"/>
            </summary>
            <param name="nonQueryA"></param>
        </member>
        <member name="T:XCSJ.DataBase.QueryQ">
            <summary>
            查询问题
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.QueryA">
            <summary>
            查询答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.QueryA.resultSet">
            <summary>
            结果集
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.TableStructureQ">
            <summary>
            表结构问题
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.TableStructureQ.tableNames">
            <summary>
            表名列表
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.TableStructureA">
            <summary>
            表结构答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.TableStructureA.tableStructures">
            <summary>
            表结构数据列表
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TableStructureA.Set(XCSJ.Net.QuestionNetPackage)">
            <summary>
            设置
            </summary>
            <param name="question"></param>
        </member>
        <member name="T:XCSJ.DataBase.TableStructureData">
            <summary>
            表结构数据
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.TableStructureData.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.TableStructureData.tableStructure">
            <summary>
            表结构
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.CreateTableQ">
            <summary>
            创建表问题
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.CreateTableQ.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.CreateTableQ.fields">
            <summary>
            字段
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.CreateTableA">
            <summary>
            创建表答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.CreateTableA.tableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.CreateTableA.Set(XCSJ.Net.QuestionNetPackage)">
            <summary>
            设置
            </summary>
            <param name="question"></param>
        </member>
        <member name="T:XCSJ.DataBase.TablesQ">
            <summary>
            表问题
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.TablesA">
            <summary>
            表答案
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.TablesA.tables">
            <summary>
            表列表
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.CloseQ">
            <summary>
            关闭问题
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.CloseA">
            <summary>
            关闭答案
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.UserQ">
            <summary>
            用户问题
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.UserA">
            <summary>
            用户答案
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.NetDBConnectSettings">
            <summary>
            网络数据库连接设置
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDBConnectSettings.port">
            <summary>
            端口:远程网络数据库的监听端口
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.NetDBConnectSettings.userInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDBConnectSettings.userName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDBConnectSettings.userPassword">
            <summary>
            用户密钥
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDBConnectSettings.userOtherinfo">
            <summary>
            用户其他信息
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="serverAddress"></param>
            <param name="serverPort"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.Set(System.String,System.Int32)">
            <summary>
            设置
            </summary>
            <param name="serverAddress"></param>
            <param name="serverPort"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.TryGetConnectionString(System.String@)">
            <summary>
            尝试获取连接字符串
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.Merge(XCSJ.DataBase.NetDBConnectSettings)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDBConnectSettings.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.NetDB">
            <summary>
            网络数据库
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.userInfo">
            <summary>
            用户信息
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.asyncClient">
            <summary>
            异步客户端
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.supportAsync">
            <summary>
            支持异步
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.#ctor(XCSJ.Net.IClientNetPackage,XCSJ.DataBase.UserInfo)">
            <summary>
            构造
            </summary>
            <param name="client"></param>
            <param name="userInfo"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.Connect(System.String,System.Int32,System.String,System.Action)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <param name="serverPort"></param>
            <param name="wsPath"></param>
            <param name="onConnect"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.CreateTable(System.String,System.Collections.Generic.List{XCSJ.DataBase.Field})">
            <summary>
            不同类型数据库创建表时的字段类型不同，需要到服务器上根据具体的数据库类型再做分析后生成对应的SQL语句；
            </summary>
            <param name="tableName"></param>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.DataBase.NetDB.wsPath">
            <summary>
            WS路径
            </summary>
        </member>
        <member name="E:XCSJ.DataBase.NetDB.onConnect">
            <summary>
            当连接
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.OnConnected">
            <summary>
            当已连接后回调:本函数回调不保证网络连接成功；
            </summary>
        </member>
        <member name="E:XCSJ.DataBase.NetDB.onClose">
            <summary>
            当关闭
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.OnClosed">
            <summary>
            当已关闭
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.NetDB.validAsyncMode">
            <summary>
            是否为有效异步模式：如果为True时，那么执行结果大概率是在多线程状态下回调的（WebGL环境除外）；
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.TryGetTablesWithTableStructure(System.Action{XCSJ.Algorithms.InvokeResult})">
            <summary>
            尝试获取当前数据库的所有表名称，并请求表的表结构信息
            </summary>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.TryExecuteNonQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            尝试执行非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.TryExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            尝试执行键值非查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.TryExecuteQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            尝试执行查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.TryExecuteKVQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            尝试执行键值查询
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.SendUserQ">
            <summary>
            发送用户问题<see cref="T:XCSJ.DataBase.UserQ"/>
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.SendCloseQ">
            <summary>
            发送关闭问题<see cref="T:XCSJ.DataBase.CloseQ"/>
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteNonQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行键值非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteQuery(XCSJ.DataBase.Sql)">
            <summary>
            执行查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteKVQuery(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            执行键值查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTableStructure(System.String)">
            <summary>
            获取表结果,即发送表结构问题<see cref="T:XCSJ.DataBase.TableStructureQ"/>
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTables">
            <summary>
            获取表列表,即发送表问题<see cref="T:XCSJ.DataBase.TablesQ"/>
            </summary>
            <returns></returns>
        </member>
        <member name="E:XCSJ.DataBase.NetDB.onError">
            <summary>
            当发生内部处理错误时
            </summary>
        </member>
        <member name="E:XCSJ.DataBase.NetDB.onReceived">
            <summary>
            当收到答案时回调：仅在异步型网络数据库时生效
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.OnReceive(XCSJ.Net.NetPackage)">
            <summary>
            当收到数据包时
            </summary>
            <param name="netPackage"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.OnReceive(XCSJ.Net.AnswerNetPackage)">
            <summary>
            当接收到答案数据包时
            </summary>
            <param name="answerNetPackage"></param>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteNonQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            执行非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteKVNonQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Result})">
            <summary>
            执行键值非查询,即发送非查询问题<see cref="T:XCSJ.DataBase.NonQueryQ"/>
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteQuery(XCSJ.DataBase.Sql,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            执行查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="sql"></param>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.ExecuteKVQuery(System.String,System.Collections.Generic.List{System.String},System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.ResultSet})">
            <summary>
            执行键值查询,即发送查询问题<see cref="T:XCSJ.DataBase.QueryQ"/>
            </summary>
            <param name="key"></param>
            <param name="valueParams"></param>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTableStructure(System.String,System.Action{XCSJ.Algorithms.InvokeResult,System.Collections.Generic.List{XCSJ.DataBase.TableStructureData}})">
            <summary>
            获取表结构,即发送表结构问题<see cref="T:XCSJ.DataBase.TablesQ"/>
            </summary>
            <param name="tableName"></param>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTableStructure(System.Collections.Generic.IEnumerable{System.String},System.Action{XCSJ.Algorithms.InvokeResult,System.Collections.Generic.List{XCSJ.DataBase.TableStructureData}})">
            <summary>
            获取表结构,即发送表结构问题<see cref="T:XCSJ.DataBase.TablesQ"/>
            </summary>
            <param name="tableNames"></param>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTables(System.Action{XCSJ.Algorithms.InvokeResult,System.Collections.Generic.List{System.String}})">
            <summary>
            获取表列表,即发送表问题<see cref="T:XCSJ.DataBase.TablesQ"/>
            </summary>
            <param name="onInvoked">当已调用后回调；其中参数的成员值<see cref="P:XCSJ.Algorithms.InvokeResult.tag"/>用于存储问题的唯一编号；</param>
            <returns>如果成功发送查询问题，返回标识此问题的唯一编号字符串；否则返回null</returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTablesWithTableStructure(System.Action{XCSJ.Algorithms.InvokeResult})">
            <summary>
            获取当前数据库的所有表名称，并请求表的表结构信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.NetDB.GetTable(System.String,System.Action{XCSJ.Algorithms.InvokeResult,XCSJ.DataBase.Table})">
            <summary>
            获取表
            </summary>
            <param name="tableName"></param>
            <param name="onInvoked"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.FieldValue">
            <summary>
            字段值
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.FieldValue.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.FieldValue.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.Record">
            <summary>
            记录
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.Record.fieldValues">
            <summary>
            字段值列表
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Record.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.Record.Item(System.String)">
            <summary>
            索引器
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.Record.fieldSet">
            <summary>
            字段集
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Record.fieldCount">
            <summary>
            字段数目
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Record.#ctor(XCSJ.DataBase.FieldSet)">
            <summary>
            构造
            </summary>
            <param name="fieldSet"></param>
        </member>
        <member name="M:XCSJ.DataBase.Record.TryGetFieldValue(System.Int32,XCSJ.DataBase.FieldValue@)">
            <summary>
            尝试获取字段值
            </summary>
            <param name="index"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Record.TryGetFieldValue(System.String,XCSJ.DataBase.FieldValue@)">
            <summary>
            尝试获取字段值
            </summary>
            <param name="name"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.RecordSet">
            <summary>
            记录集
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.RecordSet.records">
            <summary>
            记录猎豹
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.RecordSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.RecordSet.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.RecordSet.count">
            <summary>
            计数
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.RecordSet.ToJsonLite(System.Boolean)">
            <summary>
            转Json简版
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.Sql">
            <summary>
            SQL语句类
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Sql.sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Sql.op_Implicit(System.String)~XCSJ.DataBase.Sql">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:XCSJ.DataBase.Sql.op_Implicit(XCSJ.DataBase.Sql)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:XCSJ.DataBase.Sql.IsInvalid">
            <summary>
            是无效的
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Sql.IsValid">
            <summary>
            是有效的
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.Sql.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.IResult">
            <summary>
            结果接口
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IResult.sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IResult.result">
            <summary>
            结果值
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.IResult.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Result.sql">
            <summary>
            SQL语句
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Result.result">
            <summary>
            结果值
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Result.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Result.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.Result.#ctor(XCSJ.DataBase.Sql,System.Int32,System.String)">
            <summary>
            构造
            </summary>
            <param name="sql"></param>
            <param name="result"></param>
            <param name="error"></param>
        </member>
        <member name="T:XCSJ.DataBase.ResultSet">
            <summary>
            结果集
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.recordsAffected">
            <summary>
            受影响的记录数
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.fieldCount">
            <summary>
            字段数目
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.result">
            <summary>
            结果值
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.isValid">
            <summary>
            是有效
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.ResultSet.fieldSet">
            <summary>
            字段集
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.ResultSet.recordSet">
            <summary>
            记录集
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.DataBase.ResultSet.db">
            <summary>
            数据库对象
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.GetFieldValue(System.Int32,System.Int32)">
            <summary>
            获取字段值
            </summary>
            <param name="recordIndex"></param>
            <param name="fieldIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.TryGetFieldValue(System.Int32,System.Int32,XCSJ.DataBase.FieldValue@)">
            <summary>
            尝试获取字段值
            </summary>
            <param name="recordIndex"></param>
            <param name="fieldIndex"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.GetFieldValue(System.Int32,System.String)">
            <summary>
            获取字段值
            </summary>
            <param name="recordIndex"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.TryGetFieldValue(System.Int32,System.String,XCSJ.DataBase.FieldValue@)">
            <summary>
            尝试获取字段值
            </summary>
            <param name="recordIndex"></param>
            <param name="fieldName"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.#ctor(XCSJ.DataBase.IBaseDB,XCSJ.DataBase.Sql,System.Int32,System.String)">
            <summary>
            构造
            </summary>
            <param name="db"></param>
            <param name="sql"></param>
            <param name="result"></param>
            <param name="error"></param>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.Corrent(XCSJ.DataBase.IBaseDB)">
            <summary>
            修正数据
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:XCSJ.DataBase.ResultSet.ToJson(System.Boolean)">
            <summary>
            转Json字符串
            </summary>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.TableStructure">
            <summary>
            表结构类，数据表的字段标题头
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TableStructure.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TableStructure.#ctor(XCSJ.DataBase.Table)">
            <summary>
            构造
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XCSJ.DataBase.TableStructure.#ctor(System.Collections.Generic.List{XCSJ.DataBase.Field})">
            <summary>
            构造
            </summary>
            <param name="fields"></param>
        </member>
        <member name="T:XCSJ.DataBase.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Table.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Table.db">
            <summary>
            数据库
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Table.tableStructure">
            <summary>
            表结构
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.Table.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.TableAttribute">
            <summary>
            表特性
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.TableAttribute.name">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TableAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:XCSJ.DataBase.IAsTableStructure">
            <summary>
            用于描述某个类作为表结构存在
            </summary>
        </member>
        <member name="T:XCSJ.DataBase.TableHelper">
            <summary>
            表组手类
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.TableHelper.Name``1">
            <summary>
            名称
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.TableHelper.Name(System.Type)">
            <summary>
            名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.TableHelper.Name(XCSJ.DataBase.IBaseModel)">
            <summary>
            名称
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.UserSystem.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserSystem.User.password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.UserSystem.User._status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserSystem.User.status">
            <summary>
            状态:用户状态，默认1时为启用，其他值为禁用；
            </summary>
        </member>
        <member name="F:XCSJ.DataBase.UserSystem.User._expirationTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="P:XCSJ.DataBase.UserSystem.User.expirationTime">
            <summary>
            过期时间:本账户超过过期时间后，将被设置为无效帐号
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.User.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.User.DefaultCheckValid(XCSJ.DataBase.UserSystem.User)">
            <summary>
            默认检查有效性
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.User.CheckVaild(XCSJ.DataBase.UserSystem.User)">
            <summary>
            检查有效性
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.DataBase.UserSystem.UserServer`2">
            <summary>
            用户服务，用于在关联数据库用户表后，处理用于的认证信息
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TUser"></typeparam>
        </member>
        <member name="P:XCSJ.DataBase.UserSystem.UserServer`2.db">
            <summary>
            数据库
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.#ctor(XCSJ.DataBase.BaseDB)">
            <summary>
            构造
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.CheckVaild(`1)">
            <summary>
            检查有效
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.CheckVaild(`1,`1@)">
            <summary>
            检查有效
            </summary>
            <param name="other"></param>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.GetUser(`1)">
            <summary>
            获取用户
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.GetUser(System.String)">
            <summary>
            获取用户
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.GetUsers">
            <summary>
            获取用户列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Update(`1)">
            <summary>
            更新
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Add(`1)">
            <summary>
            添加
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Delete(`1)">
            <summary>
            删除
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Count(System.String)">
            <summary>
            数目
            </summary>
            <param name="whereCondition"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.IsRunning">
            <summary>
            是在运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.DataBase.UserSystem.UserServer`2.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:XCSJ.Extension.Action`5">
            <summary>
            5个输入参数的动作委托定义
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
        </member>
        <member name="T:XCSJ.Extension.Action`6">
            <summary>
            5个输入参数的动作委托定义
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="T5"></typeparam>
            <typeparam name="T6"></typeparam>
        </member>
        <member name="T:XCSJ.Extension.ActionExtension">
            <summary>
            <see cref="T:System.Action"/>扩展
            </summary>
        </member>
        <member name="M:XCSJ.Extension.ActionExtension.InvokeIfNotNull(System.Action)">
            <summary>
            非空调用
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Extension.ActionExtension.InvokeIfNotNull``1(System.Action{``0},``0)">
            <summary>
            非空调用
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="action"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:XCSJ.Extension.ActionExtension.InvokeIfNotNull``2(System.Action{``0,``1},``0,``1)">
            <summary>
            非空调用
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="action"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:XCSJ.Extension.EnumExtension">
            <summary>
            枚举扩展
            </summary>
        </member>
        <member name="T:XCSJ.Extension.Int32Extension">
            <summary>
            32位整形扩展
            </summary>
        </member>
        <member name="M:XCSJ.Extension.Int32Extension.HasAnyFlag(System.Int32,System.Int32)">
            <summary>
            有任意标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.Int32Extension.HasFlag(System.Int32,System.Int32)">
            <summary>
            有标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.Int32Extension.HasValidFlag(System.Int32,System.Int32)">
            <summary>
            有有效标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.Int32Extension.RemoveFlag(System.Int32,System.Int32)">
            <summary>
            移除标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.Int32Extension.AddFlag(System.Int32,System.Int32)">
            <summary>
            添加标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Extension.FuncExtension">
            <summary>
            函数扩展:针对<see cref="T:System.Func`1"/>以及多参数情况的扩展；
            </summary>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.InvokeIfNotNull``1(System.Func{``0},``0)">
            <summary>
            非空时调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.InvokeIfNotNull``2(System.Func{``0,``1},``0,``1)">
            <summary>
            非空时调用
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.InvokeIfNotNull``3(System.Func{``0,``1,``2},``0,``1,``2)">
            <summary>
            非空时调用
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``1(System.Func{``0,System.Boolean},``0)">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``2(System.Func{``0,``1,System.Boolean},``0,``1)">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``3(System.Func{``0,``1,``2,System.Boolean},``0,``1,``2)">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``4(System.Func{``0,``1,``2,``3,System.Boolean},``0,``1,``2,``3)">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``2(System.Func{``0,``1},``0,System.Func{``1,System.Boolean})">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``3(System.Func{``0,``1,``2},``0,``1,System.Func{``2,System.Boolean})">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Func{``3,System.Boolean})">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.All``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Func{``4,System.Boolean})">
            <summary>
            全部
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``1(System.Func{``0,System.Boolean},``0)">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``2(System.Func{``0,``1,System.Boolean},``0,``1)">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``3(System.Func{``0,``1,``2,System.Boolean},``0,``1,``2)">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``4(System.Func{``0,``1,``2,``3,System.Boolean},``0,``1,``2,``3)">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``2(System.Func{``0,``1},``0,System.Func{``1,System.Boolean})">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``3(System.Func{``0,``1,``2},``0,``1,System.Func{``2,System.Boolean})">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``4(System.Func{``0,``1,``2,``3},``0,``1,``2,System.Func{``3,System.Boolean})">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Any``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,System.Func{``4,System.Boolean})">
            <summary>
            任意
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.FirstOrDefault``1(System.Func{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            第一个或默认值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="predicate"></param>
            <param name="defaultTResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.FirstOrDefault``2(System.Func{``0,``1},System.Func{``1,System.Boolean},``0,``1)">
            <summary>
            第一个或默认值
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="predicate"></param>
            <param name="arg1"></param>
            <param name="defaultTResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.FirstOrDefault``3(System.Func{``0,``1,``2},System.Func{``2,System.Boolean},``0,``1,``2)">
            <summary>
            第一个或默认值
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="predicate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="defaultTResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.FirstOrDefault``4(System.Func{``0,``1,``2,``3},System.Func{``3,System.Boolean},``0,``1,``2,``3)">
            <summary>
            第一个或默认值
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="predicate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="defaultTResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.FirstOrDefault``5(System.Func{``0,``1,``2,``3,``4},System.Func{``4,System.Boolean},``0,``1,``2,``3,``4)">
            <summary>
            第一个或默认值
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="predicate"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="defaultTResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Results``1(System.Func{``0})">
            <summary>
            结果集
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Results``2(System.Func{``0,``1},``0)">
            <summary>
            结果集
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Results``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            结果集
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Results``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            结果集
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Results``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            结果集
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Foreach``1(System.Func{``0})">
            <summary>
            遍历
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Foreach``2(System.Func{``0,``1},``0)">
            <summary>
            遍历
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Foreach``3(System.Func{``0,``1,``2},``0,``1)">
            <summary>
            遍历
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Foreach``4(System.Func{``0,``1,``2,``3},``0,``1,``2)">
            <summary>
            遍历
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Extension.FuncExtension.Foreach``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3)">
            <summary>
            遍历
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
            <typeparam name="T4"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Formulas.Circle">
            <summary>
            圆形
            </summary>
        </member>
        <member name="M:XCSJ.Formulas.Circle.Area(System.Double,System.Double)">
            <summary>
            圆形面积公式:S=πr²
            </summary>
            <param name="r">半径</param>
            <param name="pi">圆周率π</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Formulas.Circle.Circumference(System.Double,System.Double)">
            <summary>
            圆形周长公式:C=2πr;
            </summary>
            <param name="r">半径</param>
            <param name="pi">圆周率π</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Formulas.Constant">
            <summary>
            常量：数学与物理学中定义的常量
            </summary>
        </member>
        <member name="F:XCSJ.Formulas.Constant.PI">
            <summary>
            圆周率π
            </summary>
        </member>
        <member name="F:XCSJ.Formulas.Constant.E">
            <summary>
            自然常数e
            </summary>
        </member>
        <member name="F:XCSJ.Formulas.Constant.g">
            <summary>
            重力加速度g,单位m^2/s
            </summary>
        </member>
        <member name="F:XCSJ.Formulas.Constant.G">
            <summary>
            引力常量G,单位N·m^2/kg^2
            </summary>
        </member>
        <member name="F:XCSJ.Formulas.Constant.c">
            <summary>
            光速c,单位m/s
            </summary>
        </member>
        <member name="T:XCSJ.Formulas.Pendulum">
            <summary>
            钟摆（单摆）
            </summary>
        </member>
        <member name="M:XCSJ.Formulas.Pendulum.PendulumPeriod(System.Double,System.Double,System.Double)">
            <summary>
            单摆周期公式:T=2π√(L/g);单摆的摆动幅度低于5度时可用的物理学公式;
            </summary>
            <param name="l">摆长,单位m</param>
            <param name="pi">圆周率π</param>
            <param name="g"> 重力加速度,单位m^2/s</param>
            <returns>对应摆长时的单摆周期，单位s</returns>
        </member>
        <member name="M:XCSJ.Formulas.Pendulum.PendulumLength(System.Double,System.Double,System.Double)">
            <summary>
            计算公式:l=g*(T/2/π)^2;摆动幅度低于5度时可用的物理学公式;
            </summary>
            <param name="T"></param>
            <param name="pi"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Formulas.RectilinearMotion">
            <summary>
            直线运动：轨迹是直线的质点运动，包括匀速直线运动和变速直线运动两类
            </summary>
        </member>
        <member name="M:XCSJ.Formulas.RectilinearMotion.SpeedOfUniformlyAcceleratedRectilinearMotion(System.Double,System.Double,System.Double)">
            <summary>
            匀加速直线运动的速度时间公式:V=V0+at
            </summary>
            <param name="v0">初速度,单位m/s</param>
            <param name="a">加速度,单位m^2/s</param>
            <param name="t">时间,单位s</param>
            <returns>时间点瞬时速度,单位m/s</returns>
        </member>
        <member name="M:XCSJ.Formulas.RectilinearMotion.DisplacementOfUniformlyAcceleratedRectilinearMotion(System.Double,System.Double,System.Double)">
            <summary>
            匀加速直线运动的位移时间公式: s=V0t+(at^2)/2
            </summary>
            <param name="v0">初速度,单位m/s</param>
            <param name="a">加速度,单位m^2/s</param>
            <param name="t">时间,单位s</param>
            <returns>时间点的位移,单位m</returns>
        </member>
        <member name="T:XCSJ.Formulas.Sphere">
            <summary>
            球体
            </summary>
        </member>
        <member name="M:XCSJ.Formulas.Sphere.SurfaceArea(System.Double,System.Double)">
            <summary>
            球体表面积公式：S=4πr²
            </summary>
            <param name="r">半径</param>
            <param name="pi">圆周率π</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Formulas.Sphere.Volume(System.Double,System.Double)">
            <summary>
            球体体积公式：S=4πrrr/3
            </summary>
            <param name="r">半径</param>
            <param name="pi">圆周率π</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.AttributeHelper">
            <summary>
            特性组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.AttributeHelper.GetAttribute``1(System.Reflection.Assembly,System.Boolean)">
            <summary>
            获取特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.AttributeHelper.Exist``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            存在特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="element"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.MethodHelper">
            <summary>
            方法组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.MethodHelper.GetStaticMethods(System.Boolean)">
            <summary>
            获取程序集中所有静态方法
            </summary>
            <param name="needIsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MethodHelper.GetStaticMethods``1(System.Boolean)">
            <summary>
            获取被特性修饰的静态方法
            </summary>
            <typeparam name="T"></typeparam>
            <param name="needIsPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MethodHelper.GetStaticMethodsAndAttribute``1(System.Boolean,System.Boolean)">
            <summary>
            获取带特性修饰的静态方法；仅查找到的第一个符合条件的特性对象，并存储在返回值信息对象中；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="needIsPublic"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MethodHelper.GetStaticMethodsAndAttributes``1(System.Boolean,System.Boolean)">
            <summary>
            获取带特性修饰的静态方法；会查找的所有符合条件的特性对象，并存储在返回值信息对象中；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="needIsPublic"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.MethodHelper.Info`1">
            <summary>
            信息类
            </summary>
            <typeparam name="T">特性类型</typeparam>
        </member>
        <member name="P:XCSJ.Helper.MethodHelper.Info`1.methodInfo">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:XCSJ.Helper.MethodHelper.Info`1.attribute">
            <summary>
            第一个特性
            </summary>
        </member>
        <member name="P:XCSJ.Helper.MethodHelper.Info`1.attributes">
            <summary>
            特新数组
            </summary>
        </member>
        <member name="T:XCSJ.Helper.ByteHelper">
            <summary>
            字节组手类
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.B">
            <summary>
            字节B
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.KB">
            <summary>
            千字节KB
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.MB">
            <summary>
            兆字节MB
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.GB">
            <summary>
            千兆字节GB
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.TB">
            <summary>
            太字节TB
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.PB">
            <summary>
            拍字节PB
            </summary>
        </member>
        <member name="F:XCSJ.Helper.ByteHelper.EB">
            <summary>
            艾字节EB
            </summary>
        </member>
        <member name="M:XCSJ.Helper.ByteHelper.ToDescription0(System.Int64)">
            <summary>
            转描述0
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.ByteHelper.ToDescription1(System.Int64)">
            <summary>
            转描述1
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.DateTimeHelper">
            <summary>
            日期时间辅助类
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.DateFormat">
            <summary>
            日期格式：如系统日期格式被调整为-间隔，如仍期望输出本格式字符串，需配合<see cref="P:XCSJ.Helper.DateTimeHelper.dateTimeFormatInfo"/>使用；
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.DateFormatShort">
            <summary>
            短日期格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.TimeFormat">
            <summary>
            时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.TimeFormatLong">
            <summary>
            长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.TimeFormatShort">
            <summary>
            短时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.DefaultFormat">
            <summary>
            默认格式：yyyy/MM/dd HH:mm:ss
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.FormatLong">
            <summary>
            长格式为：yyyy/MM/dd HH:mm:ss:fff
            </summary>
        </member>
        <member name="F:XCSJ.Helper.DateTimeHelper.FormatShort">
            <summary>
            短格式为：yyyyMMddHHmmss
            </summary>
        </member>
        <member name="P:XCSJ.Helper.DateTimeHelper.dateTimeFormatInfo">
            <summary>
            日期时间格式化信息：用于修复因调整系统日期格式，以-分割日期格式时，传入日期格式字符串中/会被自动替换为-的问题；
            </summary>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.ToDefaultFormat(System.DateTime)">
            <summary>
            输出默认格式：即输出<see cref="F:XCSJ.Helper.DateTimeHelper.DefaultFormat"/>格式的字符串
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.ToFormatLong(System.DateTime)">
            <summary>
            输出长格式：即输出<see cref="F:XCSJ.Helper.DateTimeHelper.FormatLong"/>格式的字符串
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.ToDataFormat(System.DateTime)">
            <summary>
            转日期格式化：即输出<see cref="F:XCSJ.Helper.DateTimeHelper.DateFormat"/>格式的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.ToDateTime(System.String)">
            <summary>
            转为日期时间
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.Format(System.DateTime,XCSJ.Helper.EDateTimeFormat,System.String)">
            <summary>
            格式化输出日时时间信息
            </summary>
            <param name="dateTime"></param>
            <param name="format"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DateTimeHelper.FormatString(XCSJ.Helper.EDateTimeFormat,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="format"></param>
            <param name="formatString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.DateTimeFormatAttribute">
            <summary>
            时间日期格式特性
            </summary>
        </member>
        <member name="P:XCSJ.Helper.DateTimeFormatAttribute.format">
            <summary>
            格式
            </summary>
        </member>
        <member name="M:XCSJ.Helper.DateTimeFormatAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="format"></param>
        </member>
        <member name="T:XCSJ.Helper.EDateTimeFormat">
            <summary>
            时间日期格式枚举
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.Custom">
            <summary>
            自定义:用户自定义格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.Default">
            <summary>
            默认:使用默认格式；特定文化，为当前系统的短日期长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.d">
            <summary>
            特定文化，为当前系统的短日期格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.D">
            <summary>
            特定文化，为当前系统的长日期格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.f">
            <summary>
            特定文化，为当前系统的长日期短时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.F">
            <summary>
            特定文化，为当前系统的长日期长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.g">
            <summary>
            特定文化，为当前系统的短日期短时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.G">
            <summary>
            特定文化，为当前系统的短日期长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.m">
            <summary>
            特定文化，为当前系统的日期格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.M">
            <summary>
            特定文化，为当前系统的日期格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.o">
            <summary>
            格式为：yyyy-MM-ddTHH:mm:ss.fffffffK
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.O">
            <summary>
            格式为：yyyy-MM-ddTHH:mm:ss.fffffffK
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.r">
            <summary>
            RCF1123日期，格式为：ddd, dd MMM yyyy HH':'mm':'ss 'GMT'
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.R">
            <summary>
            RCF1123日期，格式为：ddd, dd MMM yyyy HH':'mm':'ss 'GMT'
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.s">
            <summary>
            基于ISO 8601,格式为：yyyy-MM-dd'T'HH:mm:ss
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.t">
            <summary>
            特定文化，为当前系统的短时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.T">
            <summary>
            特定文化，为当前系统的长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.u">
            <summary>
            基于ISO 8601的国际标准时间的有序格式，格式为：yyyy'-'MM'-'dd HH':'mm':'ss'Z'
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.U">
            <summary>
            特定文化，国际标准时间的长日期长时间格式
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.y">
            <summary>
            特定文化，为当前系统的年月信息
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.Y">
            <summary>
            特定文化，为当前系统的年月信息
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.yy">
            <summary>
            年份后两位
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.yyyy">
            <summary>
            4位年份
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.MM">
            <summary>
            两位月份；一位数月份前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.dd">
            <summary>
            两位日期；一位数日期前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.ddd">
            <summary>
            周几
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.dddd">
            <summary>
            星期几
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.hh">
            <summary>
            12小时制的小时数；一位数小时数前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.HH">
            <summary>
            24小时制的小时数；一位数小时数前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.mm">
            <summary>
            分钟数；一位数分钟数前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.ss">
            <summary>
            秒数；一位数秒数前面用0填充
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.ff">
            <summary>
            毫秒数前2位
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.fff">
            <summary>
            毫秒数前3位
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EDateTimeFormat.ffff">
            <summary>
            毫秒数前4位
            </summary>
        </member>
        <member name="T:XCSJ.Helper.DESHelper">
            <summary>
            DES组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.DESHelper.CreateKey(System.String,System.String@,System.String@)">
            <summary>
            对 data 做 md5 计算后生成密钥与初始化向量
            </summary>
            <param name="data">任意字符串</param>
            <param name="key">Base64格式的密钥</param>
            <param name="iv">Base64格式的初始化向量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DESHelper.CreateKey(System.String@,System.String@)">
            <summary>
            生成随机的密钥与初始化向量
            </summary>
            <param name="key">Base64格式的密钥</param>
            <param name="iv">Base64格式的初始化向量</param>
        </member>
        <member name="M:XCSJ.Helper.DESHelper.Encrypt(System.String,System.String,System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            加密
            </summary>
            <param name="data">明文</param>
            <param name="key">Base64格式的密钥</param>
            <param name="iv">Base64格式的初始化向量</param>
            <param name="exceptionHandle"></param>
            <returns>Base64格式的密文</returns>
        </member>
        <member name="M:XCSJ.Helper.DESHelper.Decrypt(System.String,System.String,System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            解密
            </summary>
            <param name="data">Base64格式的密文</param>
            <param name="key">Base64格式的密钥</param>
            <param name="iv">Base64格式的初始化向量</param>
            <param name="exceptionHandle"></param>
            <returns>明文</returns>
        </member>
        <member name="T:XCSJ.Helper.DirectoryHelper">
            <summary>
            目录组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.DirectoryHelper.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            获取文件列表
            </summary>
            <param name="path"></param>
            <param name="searchPattern"></param>
            <param name="searchOption"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DirectoryHelper.Delete(System.String,System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="path"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.DirectoryHelper.Create(System.String,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="path"></param>
            <param name="createParentIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.EExceptionHandle">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EExceptionHandle.UseGlobal">
            <summary>
            使用全局
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EExceptionHandle.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EExceptionHandle.Throw">
            <summary>
            抛出
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EExceptionHandle.LogException">
            <summary>
            日志异常
            </summary>
        </member>
        <member name="T:XCSJ.Helper.ExceptionHelper">
            <summary>
            异常组手
            </summary>
        </member>
        <member name="M:XCSJ.Helper.ExceptionHelper.HandleException(XCSJ.Helper.EExceptionHandle,System.Exception,System.String)">
            <summary>
            处理异常
            </summary>
            <param name="exceptionHandle">异常处理</param>
            <param name="ex">异常</param>
            <param name="context">上下文</param>
        </member>
        <member name="F:XCSJ.Helper.ExceptionHelper.globalExceptionHandle">
            <summary>
            全局异常处理
            </summary>
        </member>
        <member name="M:XCSJ.Helper.ExceptionHelper.HandleException(System.Exception,System.String)">
            <summary>
            处理异常：使用<see cref="F:XCSJ.Helper.ExceptionHelper.globalExceptionHandle"/>的规则处理异常
            </summary>
            <param name="ex">异常</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:XCSJ.Helper.ExceptionHelper.HandleException(System.Object,System.String)">
            <summary>
            处理异常：使用<see cref="F:XCSJ.Helper.ExceptionHelper.globalExceptionHandle"/>的规则处理异常
            </summary>
            <param name="ex"></param>
            <param name="context"></param>
        </member>
        <member name="T:XCSJ.Helper.FileHelper">
            <summary>
            文件助手类
            </summary>
        </member>
        <member name="F:XCSJ.Helper.FileHelper.NewLine">
            <summary>
            新行
            </summary>
        </member>
        <member name="P:XCSJ.Helper.FileHelper.UTF8NoBOM">
            <summary>
            无BOM的UTF-8编码
            </summary>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.OutputFile(System.String,System.String,System.Boolean,System.Boolean,XCSJ.Helper.EExceptionHandle)">
            <summary>
            输出文件，默认输出的文件会携带UTF-8 BOM前缀
            </summary>
            <param name="path">路径：文件的输出路径</param>
            <param name="text">文本</param>
            <param name="addLineEnd"></param>
            <param name="useUtf8BOM">使用UTF-8 BOM编码：为true时，表示使用UTF-8 BOM编码；为false时，使用无BOM的UTF-8编码；</param>
            <param name="exceptionHandle">异常处理</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.InputFile(System.String,System.Boolean,System.Boolean,System.IO.FileAccess,System.IO.FileShare,XCSJ.Helper.EExceptionHandle)">
            <summary>
            输入文件，默认以UTF-8格式读取文件
            </summary>
            <param name="path">路径：待读取文件的路径</param>
            <param name="createIfNotExist">文件不存在时，是否创建文件</param>
            <param name="checkUtf8BOM">检查UTF-8 BOM编码：为true时，表示检查文件开头的UTF-8 BOM编码；为false时，使用无BOM的UTF-8编码读取文件；</param>
            <param name="fileAccess">文件权限</param>
            <param name="fileShare">文件共享方式</param>
            <param name="exceptionHandle">异常处理</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.InputFileBytes(System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            输入文件字节，读取文件完整的字节流
            </summary>
            <param name="path"></param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.Rename(System.String,System.String)">
            <summary>
            重命名
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="fileNewName">文件的新名称</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.Rename(System.String,System.String,System.String@,XCSJ.Helper.EExceptionHandle)">
            <summary>
            重命名
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="fileNewName">文件的新名称</param>
            <param name="fileNewFullPath">文件新的全路径</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.CopyTo(System.String,System.String,System.Boolean,XCSJ.Helper.EExceptionHandle)">
            <summary>
            复制到；将源文件复制一份到新的位置；结果会有2个相同文件在不同位置；
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="fileNewFullPath">文件新的全路径</param>
            <param name="overwrite">覆盖；如果为ture，且在文件新的全路径已经存在一个同名文件时，会覆盖文件；</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.MoveTo(System.String,System.String,System.Boolean,XCSJ.Helper.EExceptionHandle)">
            <summary>
            移动到；将源文件拷贝到新的位置；结果会有1个文件在新的位置，原位置的文件被移除；
            </summary>
            <param name="fileFullPath">文件全路径</param>
            <param name="fileNewFullPath">文件新的全路径</param>
            <param name="overwrite">覆盖；如果为ture，且在文件新的全路径已经存在一个同名文件时，会覆盖文件；</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.Delete(System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            删除
            </summary>
            <param name="fileFullPath"></param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.Exists(System.String)">
            <summary>
            存在
            </summary>
            <param name="fileFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.Size(System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            尺寸，完整文件的字节流长度
            </summary>
            <param name="fileFullPath"></param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.CreateFile(System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            无则添加有则覆盖
            </summary>
            <param name="fileFullPath"></param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.FileHelper.SaveFile(System.String,System.Byte[],XCSJ.Helper.EExceptionHandle)">
            <summary>
            保存文件
            </summary>
            <param name="filePath">文件路径</param>
            <param name="bytes">字节流</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.GuidHelper">
            <summary>
            GUID组手
            </summary>
        </member>
        <member name="M:XCSJ.Helper.GuidHelper.GetNewGuid">
            <summary>
            获取新的GUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.GuidHelper.IsValid(System.String)">
            <summary>
            是有效的GUID
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.AsyncActionHelper">
            <summary>
            异步动作助手
            </summary>
        </member>
        <member name="P:XCSJ.Helper.AsyncActionHelper.asyncActionHandler">
            <summary>
            异步动作处理器对象
            </summary>
        </member>
        <member name="M:XCSJ.Helper.AsyncActionHelper.AsyncExecute(System.Action)">
            <summary>
            异步执行
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Helper.JsonObject`1">
            <summary>
            JSON对象泛型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Helper.JsonObject`1.ToJson">
            <summary>
            将对象转为JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonObject`1.FromJson(System.String)">
            <summary>
            将JSON字符串转化为特定类型的对象
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonObject`1.ToObject``1(System.String)">
            <summary>
            将JSON字符串转化为特定模版类型的对象
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.IJsonTypeObject">
            <summary>
            JSON类型对象接口
            </summary>
        </member>
        <member name="P:XCSJ.Helper.IJsonTypeObject.epyt">
            <summary>
            类型:type 的倒写；防止用户在子类中添加type类似名称的变量时，引起冲突或理解上的混淆；
            </summary>
        </member>
        <member name="T:XCSJ.Helper.JsonTypeObject">
            <summary>
            JSON类型对象
            </summary>
        </member>
        <member name="F:XCSJ.Helper.JsonTypeObject._epyt">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.Helper.JsonTypeObject.epyt">
            <summary>
            类型:类型单词type的倒写；防止用户在子类中添加type类似名称的变量时，引起冲突或理解上的混淆；
            </summary>
        </member>
        <member name="M:XCSJ.Helper.JsonTypeObject.ToJson">
            <summary>
            将对象转为JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonTypeObject.FromJson``1(System.String)">
            <summary>
            将JSON字符串转化为特定类型的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonTypeObject.op_Implicit(XCSJ.Helper.JsonTypeObject)~System.Boolean">
            <summary>
            重载bool运算符
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.Helper.JsonTypeObject.OnBeforeSerialize(XCSJ.Interfaces.ISerializeContext)">
            <summary>
            当序列化之前回调
            </summary>
            <param name="serializeContext">序列化上下文</param>
        </member>
        <member name="M:XCSJ.Helper.JsonTypeObject.OnAfterDeserialize(XCSJ.Interfaces.ISerializeContext)">
            <summary>
            当反序列化之后回调
            </summary>
            <param name="serializeContext">序列化上下文</param>
        </member>
        <member name="T:XCSJ.Helper.JsonCiphertext`1">
            <summary>
            JSON密文类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Helper.JsonCiphertext`1.FromCiphertext(System.String)">
            <summary>
            由密文转为模版类型的对象；先解密获取JSON字符串，然后将JSON字符串转化为模版类型的对象；
            </summary>
            <param name="ciphertext">密文</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonCiphertext`1.FromCiphertext(System.String,System.String)">
            <summary>
            由密文转为模版类型的对象；先解密获取JSON字符串，然后将JSON字符串转化为模版类型的对象；
            </summary>
            <param name="ciphertext">密文</param>
            <param name="key">解密密钥</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonCiphertext`1.ToCiphertext">
            <summary>
            将当前对象转为密文；先将对象转为JSON字符串，然后将JSON字符串加密；
            </summary>
            <returns>密文</returns>
        </member>
        <member name="M:XCSJ.Helper.JsonCiphertext`1.ToCiphertext(System.String)">
            <summary>
            将当前对象转为密文；先将对象转为JSON字符串，然后将JSON字符串加密；
            </summary>
            <param name="key">加密密钥</param>
            <returns>密文</returns>
        </member>
        <member name="T:XCSJ.Helper.JsonHelper">
            <summary>
            JSON助手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.ToJson(System.Object,System.Boolean)">
            <summary>
            转JSON:将对象转为JSON字符串
            </summary>
            <param name="obj"></param>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.ToJsonTypeObject``1(System.String,System.Boolean,XCSJ.Helper.EExceptionHandle)">
            <summary>
            转JSON类型对象：将JSON字符串转化为特定类型的JSON类型对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <param name="trySubclassFirst">是否优先尝试模版类型T的子类</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.GetBestSubclass(System.Type,System.String)">
            <summary>
            获取最优子类
            </summary>
            <param name="baseType"></param>
            <param name="subclassTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.GetBestSubclassNoCache(System.Type,System.String)">
            <summary>
            无缓存获取最优子类
            </summary>
            <param name="baseType"></param>
            <param name="subclassTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.ToObject``1(System.String,System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            转对象：将JSON字符串转化为特定类型的对象！
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <param name="subclassTypeName">模版T 的期望返回的子类名称;不为空时，会优先尝试查找对应名称的子类类型并进行转换；为空时不做任何处理</param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.ToObject(System.String,System.Type)">
            <summary>
            转对象：将JSON字符串转化为特定类型的对象
            </summary>
            <param name="jsonString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.JsonHelper.ToJsonData(System.String,XCSJ.Helper.EExceptionHandle)">
            <summary>
            转JSON数据
            </summary>
            <param name="jsonString"></param>
            <param name="exceptionHandle"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.MD5Helper">
            <summary>
            MD5组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.MD5Helper.GetHash(System.String)">
            <summary>
            将数据的MD5信息以字节流输出
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MD5Helper.GetBase64(System.String)">
            <summary>
            将数据的MD5信息以基础64进制的字符串输出
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MD5Helper.Get32(System.String)">
            <summary>
            将数据的MD5信息以16进制的32长度的字符串输出
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MD5Helper.FromFile(System.String)">
            <summary>
            获取文件的MD5值，结果以16进制的32长度的字符串输出
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.MD5Helper.CheckFile(System.String,System.String)">
            <summary>
            检查文件的MD5值
            </summary>
            <param name="filePath"></param>
            <param name="md5"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.PathHelper">
            <summary>
            路径组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.PathHelper.EnsureDirectoryExist(System.String,System.Boolean)">
            <summary>
            确保目录存在
            </summary>
            <param name="path"></param>
            <param name="createParentIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.PathHelper.Format(System.String)">
            <summary>
            将路径中的\\替换为/
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.PathHelper.GetFullPath(System.String)">
            <summary>
            获取完整路径，可用于处理../或./等相对路径等情况
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.RSAHelper">
            <summary>
            RSA组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.IsValid(System.String)">
            <summary>
            验证RSA公钥/私钥的有效性
            </summary>
            <param name="rsaKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.CreateKey(System.String@,System.String@)">
            <summary>
            生成密钥
            </summary>
            <param name="publicKey">公钥</param>
            <param name="privateKey">私钥</param>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.GetPublicKey(System.String)">
            <summary>
            根据公钥/私钥获取公钥;会校验有效性
            </summary>
            <param name="rsaKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.Encrypt(System.String,System.String)">
            <summary>
            加密**参数data在转为字节序后长度不可超过88字节**
            </summary>
            <param name="publicKey">RSA公钥</param>
            <param name="data">明文，转为字节序后长度不可超过88字节</param>
            <returns>Base64格式的密文</returns>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="privateKey">RSA私钥</param>
            <param name="data">Base64格式的密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.SignatureFormatter(System.String,System.String)">
            <summary>
            生成签名
            </summary>
            <param name="privateKey">RSA私钥</param>
            <param name="md5">Base64格式的MD5字符串;即明文的md5;</param>
            <returns>Base64格式的签名</returns>
        </member>
        <member name="M:XCSJ.Helper.RSAHelper.SignatureDeformatter(System.String,System.String,System.String)">
            <summary>
            验证签名
            </summary>
            <param name="publicKey">RSA公钥</param>
            <param name="signature">Base64格式的签名</param>
            <param name="md5">Base64格式的MD5字符串;明文的md5;</param>
            <returns>是否验证成功</returns>
        </member>
        <member name="T:XCSJ.Helper.EStringType">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EStringType.String">
            <summary>
            字符串：任意字符串以UTF8编码规则，实现字符串与字节数组互相转化
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EStringType.HexString">
            <summary>
            16进制字符串：由字符0~9与A-F(a~f)构成的字符串，以每2字符对应1字节规则，实现字符串与字节数组互相转化；16进制字符串允许每2字符之后使用空格、逗号等非16进制字符做间隔，以增强可阅读性；
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EStringType.Base64String">
            <summary>
            64进制字符串：由字符0~9、A-Z、a~z、+/=构成的字符串，以每4字符对应3字节规则，实现字符串与字节数组互相转化
            </summary>
        </member>
        <member name="T:XCSJ.Helper.StringHelper">
            <summary>
            字符串助手类
            </summary>
        </member>
        <member name="F:XCSJ.Helper.StringHelper.CRLF">
            <summary>
            CRLF
            </summary>
        </member>
        <member name="F:XCSJ.Helper.StringHelper.Utf8_BOM">
            <summary>
            UTF-8的BOM字节值定义
            </summary>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.GetBytes(System.String,XCSJ.Helper.EStringType)">
            <summary>
            获取字符串对应的字节流
            </summary>
            <param name="value">字符串</param>
            <param name="st">字符串的类型</param>
            <returns>返回对应的字节流</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.GetString(System.Byte[],XCSJ.Helper.EStringType)">
            <summary>
            获取字节流对应的字符串
            </summary>
            <param name="value">字节流</param>
            <param name="st">字符串的类型</param>
            <returns>返回对应的字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToBase64String(System.String)">
            <summary>
            将文本字符串转为64进制字符串
            </summary>
            <param name="text">文本</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.FromBase64String(System.String,System.Boolean)">
            <summary>
            将64进制字符串转为文本字符串
            </summary>
            <param name="base64String"></param>
            <param name="removeUTF8BOM"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.RemoveUTF8BOM(System.String)">
            <summary>
            移除字符串中UTF-8的BOM信息
            </summary>
            <param name="value">字符串</param>
            <returns>移除UTF-8的BOM信息后的字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.RemoveUTF8BOM(System.Byte[])">
            <summary>
            移除字节流中UTF-8的BOM信息
            </summary>
            <param name="buffer">字节流</param>
            <returns>移除UTF-8的BOM信息后的字节流</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.RandomString">
            <summary>
            返回1到65长度的随机字符串
            </summary>
            <returns>返回1到65长度的随机字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.RandomString(System.Int32)">
            <summary>
            返回期望长度的随机字符串
            </summary>
            <param name="length">期望的随机字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.RandomJsonString">
            <summary>
            返回随机的JSON字符串
            </summary>
            <returns>返回随机的JSON字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.StringTransform(System.String)">
            <summary>
            字符串转换函数:使用缓存
            m_listName      List Name
            m_list_name     List Name
            _list_name_     List Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.StringTransformNoCache(System.String)">
            <summary>
            字符串转换函数:不使用缓存
            m_listName      List Name
            m_list_name     List Name
            _list_name_     List Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToString(System.Object)">
            <summary>
            将对象转化为字符串
            </summary>
            <param name="obj">待转化的对象</param>
            <returns>对象转化后的字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.SearchMatch(System.String,System.String,System.StringComparison)">
            <summary>
            检测是否搜索匹配
            </summary>
            <param name="value">带检测的字符串</param>
            <param name="searchText">搜索字符串</param>
            <param name="comparisonType">比较类型</param>
            <returns>如果搜索字符串为空，或搜索字符串在带检测的字符串存在，返回True；否则返回False；</returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.NaturalCompare(System.String,System.String)">
            <summary>
            自然比较，符合人理解的字符串比较，考虑到字符串中有数字情况的比较；效率较低；
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToCoreVersion(System.DateTime)">
            <summary>
            转核心版本；仅以(年-2000.月.日)信息作为版本号；如2021年8月3日，则对应版本号为21.8.3；
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToVersion(System.DateTime)">
            <summary>
            转版本；仅以(年-2000.月日)信息作为版本号；如2021年8月3日，则对应版本号为21.803；
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToVersionFull(System.DateTime)">
            <summary>
            转完整版本；以(年-2000.月日.时分)信息作为版本号；如2021年8月3日17点6分，则对应版本号为21.803.1706；
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.GetSplitArray(System.String,System.String,System.StringSplitOptions)">
            <summary>
            获取拆分数组：使用<see cref="T:XCSJ.Caches.StringSplitCache"/>的缓存结果做返回值；
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <param name="stringSplitOptions"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToLong(System.String,System.Int64)">
            <summary>
            转长整型:使用缓存
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.TryToLong(System.String,System.Int64@)">
            <summary>
            尝试转长整型:使用缓存
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.ToDouble(System.String,System.Double)">
            <summary>
            转双精度:使用缓存
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.StringHelper.TryToDouble(System.String,System.Double@)">
            <summary>
            尝试转双精度:使用缓存
            </summary>
            <param name="str"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.EnumHelper">
            <summary>
            枚举组手类
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EnumHelper.BindingFlags">
            <summary>
            绑定标志；用于搜索枚举定义字段时的绑定标志；
            </summary>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.GetFields(System.Type)">
            <summary>
            获取枚举中所有定义的字段信息;使用Type.GetFields实现，保留原始定义的顺序；
            </summary>
            <param name="enumType"></param>
            <returns>如果enumType无效或enumType不是枚举类型，返回空数组；否则返回字段信息数组</returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.FirstOrDefaultValue(System.Type)">
            <summary>
            第一个或默认值：获取指定枚举类型中定义的第一个值或默认的值；
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Foreach(System.Type,System.Func{System.Reflection.FieldInfo,System.Object,System.Boolean})">
            <summary>
            遍历枚举中的定义字段值
            </summary>
            <param name="enumType"></param>
            <param name="func">返回值为时继续循环，否则跳出循环</param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Foreach``1(System.Func{System.Reflection.FieldInfo,``0,System.Boolean})">
            <summary>
            遍历枚举中的定义字段值
            </summary>
            <param name="func">返回值为True时继续循环，否则跳出循环</param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Foreach(System.Type,System.Action{System.Reflection.FieldInfo,System.Object})">
            <summary>
            遍历枚举中的定义字段值
            </summary>
            <param name="enumType"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Foreach``1(System.Action{System.Reflection.FieldInfo,``0})">
            <summary>
            遍历枚举中的定义字段值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Enums(System.Type)">
            <summary>
            枚举所有值;使用Type.GetFields实现，保留原始定义的顺序；
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Enums``1">
            <summary>
            枚举所有值;使用Type.GetFields实现，保留原始定义的顺序；
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.EnumValues``1">
            <summary>
            枚举所有值；使用Enum.GetValues实现，返回结果会根据对应枚举的数值升序排序的结果；
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.MaskEnum(System.Type,System.Int32,System.Action{System.Enum})">
            <summary>
            枚举掩码：枚举与数值进行与操作，匹配则执行回调函数
            </summary>
            <param name="enumType"></param>
            <param name="mask">掩码</param>
            <param name="onMatchMask">匹配回调函数</param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.ToObject(System.Type,System.Object)">
            <summary>
            转对象；将值转为期望的参数类型
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.StringToEnum``1(System.String,``0)">
            <summary>
            字符串到枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.To``1(System.Enum)">
            <summary>
            强制转换枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Helper.EnumHelper._enumTypes">
            <summary>
            枚举类型数组缓存
            </summary>
        </member>
        <member name="P:XCSJ.Helper.EnumHelper.enumTypes">
            <summary>
            枚举类型数组
            </summary>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.ForeachTypes(System.Action{System.Type})">
            <summary>
            遍历枚举类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.ForeachTypes(System.Func{System.Type,System.Boolean})">
            <summary>
            遍历枚举类型
            </summary>
            <param name="func">返回值为True时继续循环，否则跳出循环</param>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Value(System.Enum)">
            <summary>
            转为值；默认为整形；
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Int(System.Enum)">
            <summary>
            转为整形
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.And(System.Enum,System.Enum)">
            <summary>
            与运算
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Or(System.Enum,System.Enum)">
            <summary>
            或运算
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.XOr(System.Enum,System.Enum)">
            <summary>
            异或运算
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Not(System.Enum)">
            <summary>
            取反运算
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Left(System.Enum,System.Int32)">
            <summary>
            左移运算
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.Right(System.Enum,System.Int32)">
            <summary>
            右移运算
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="E:XCSJ.Helper.EnumHelper.onCheckEnumString">
            <summary>
            用于检查枚举字符串与枚举值是否匹配方法<see cref="M:XCSJ.Helper.EnumHelper.CheckEnumString(XCSJ.Helper.EEnumStringType,System.String,System.Reflection.FieldInfo,System.Object)"/>的扩展机制事件，如有任意函数方法True会认为检测成功；
            </summary>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.CheckEnumString(XCSJ.Helper.EEnumStringType,System.String,System.Reflection.FieldInfo,System.Object)">
            <summary>
            检查枚举字符串与枚举值是否匹配；
            </summary>
            <param name="enumStringType"></param>
            <param name="enumString">如null或空，直接返回检查失败</param>
            <param name="enumFieldInfo"></param>
            <param name="enumValue"></param>
            <returns>如果异常或检查失败，返回false</returns>
        </member>
        <member name="E:XCSJ.Helper.EnumHelper.onGetEnumString">
            <summary>
            用于获取枚举字符串时的扩展机制事件，获取第一个<see cref="P:System.Collections.Generic.KeyValuePair`2.Key"/>为True的<see cref="P:System.Collections.Generic.KeyValuePair`2.Value"/>的值；
            </summary>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.GetEnumString(System.Reflection.FieldInfo,System.Object,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串；如果对应项信息不存在,会返回枚举值的默认值字符串；
            </summary>
            <param name="enumFieldInfo"></param>
            <param name="enumValue"></param>
            <param name="enumStringType"></param>
            <returns>如果获取失败，返回null</returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.GetEnumString(System.Enum,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串；
            </summary>
            <param name="enumValue"></param>
            <param name="enumStringType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.EnumHelper.GetFieldInfo(System.Enum)">
            <summary>
            获取字段信息：获取枚举值对应的字段信息
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.EEnumStringType">
            <summary>
            枚举字符串类型
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.Any">
            <summary>
            任意：可以表示任意枚举字符串类型
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.Default">
            <summary>
            默认：由枚举值直接转为字符串的类型，即直接调用<see cref="M:System.Enum.ToString"/>函数获得的字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.FieldInfoName">
            <summary>
            字段信息名：由枚举值对应的字段信息对象的名称字符串的类型，即枚举字段信息对象的<see cref="P:System.Reflection.MemberInfo.Name"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.UnderlyingType">
            <summary>
            基础类型：将枚举值先转为对应的基础类型，然后再转为字符串的类型，即获取枚举的UnderlyingType（通过调用<see cref="M:System.Enum.GetUnderlyingType(System.Type)"/>函数）然后再调用基础类型值的<see cref="M:System.Object.ToString"/>函数获得的字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.DescriptionAttribute">
            <summary>
            描述特性：将获取枚举值字段的<see cref="F:XCSJ.Helper.EEnumStringType.DescriptionAttribute"/>修饰特性的描述字符串，即获取<see cref="P:System.ComponentModel.DescriptionAttribute.Description"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.NameAttributeCN">
            <summary>
            名称特性中文：将获取枚举值字段的<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>修饰特性的中文名称字符串，即获取<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>的<see cref="F:XCSJ.Languages.ELanguageType.Chinese"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.NameAttributeEN">
            <summary>
            名称特性英文：将获取枚举值字段的<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>修饰特性的英文名称字符串，即获取<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>的<see cref="F:XCSJ.Languages.ELanguageType.English"/>字符串
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.NameAttribute">
            <summary>
            名称特性：将获取枚举值字段的<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>修饰特性的英文名称字符串（即获取<see cref="F:XCSJ.Helper.EEnumStringType.NameAttribute"/>的<see cref="F:XCSJ.Languages.ELanguageType.English"/>字符串），并根据不同语言类型尝试做翻译；
            </summary>
        </member>
        <member name="F:XCSJ.Helper.EEnumStringType.Custom">
            <summary>
            自定义：
            </summary>
        </member>
        <member name="T:XCSJ.Helper.HexHelper">
            <summary>
            16进制助手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.ToHexString(System.Int32)">
            <summary>
            将整型值转为16进制字符串
            </summary>
            <param name="value">整型值</param>
            <returns>整型值对应的16进制字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.ToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节流中由起始索引开始指定长度的字节流转化为16进制字符串
            </summary>
            <param name="value">字节流</param>
            <param name="startIndex">起始索引</param>
            <param name="length">长度</param>
            <returns>转化后的16进制字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.ToHexString(System.Byte[],System.Int32)">
            <summary>
            将字节流中由起始索引开始到结束的字节流转化为16进制字符串
            </summary>
            <param name="value">字节流</param>
            <param name="startIndex">起始索引</param>
            <returns>转化后的16进制字符串</returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.ToHexString(System.Byte[])">
            <summary>
            将字节流转化为16进制字符串
            </summary>
            <param name="value">字节流</param>
            <returns>转化后的16进制字符串</returns>
        </member>
        <member name="F:XCSJ.Helper.HexHelper.DefaultSeparator">
            <summary>
            默认分隔符
            </summary>
        </member>
        <member name="P:XCSJ.Helper.HexHelper.Separators">
            <summary>
            分隔符字符串列表
            </summary>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.RemoveSeparators(System.String)">
            <summary>
            移除分隔符
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.AddSeparator(System.String,System.String)">
            <summary>
            为16进制字符串添加分隔符，每2字符之后使用分隔符做间隔；如果传入字符串长度不为偶数，会丢弃最后的单一字符；不对传入字符串做16进制的有效检查；
            </summary>
            <param name="hexString">16进制字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.IsValidHexString(System.String,System.Boolean)">
            <summary>
            是有效16进制字符串
            </summary>
            <param name="hexString">16进制字符串</param>
            <param name="allowSeparator">允许分隔符：即是否允许分隔符存在；</param>
            <returns>如果字符串为null或空，移除分隔符后字符串长度不为偶数，均返回False；</returns>
        </member>
        <member name="M:XCSJ.Helper.HexHelper.GetBytes(System.String,System.Boolean)">
            <summary>
            将16进制字符串转化为字节流
            </summary>
            <param name="hexString">16进制字符串</param>
            <param name="removeSeparator">移除分隔符：本值为True时，会移除传入字符串中的分割符<see cref="P:XCSJ.Helper.HexHelper.Separators"/>；为False时，不对传入字符串做修改,但要求传入字符串必须是严格的16进制字符串，等同于会对传入字符串做16进制强校验</param>
            <returns>转化后的字节流</returns>
        </member>
        <member name="T:XCSJ.Helper.RandomHelper">
            <summary>
            随机组手类
            </summary>
        </member>
        <member name="M:XCSJ.Helper.RandomHelper.Next">
            <summary>
            下一个随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.RandomHelper.Next(System.Int32)">
            <summary>
            下一个随机数
            </summary>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.RandomHelper.Next(System.Int32,System.Int32)">
            <summary>
            下一个随机数
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.TypeNameComparer">
            <summary>
            类型名称比较器：用于类型排序的比较器，根据类型的名称字符串进行比较
            </summary>
        </member>
        <member name="M:XCSJ.Helper.TypeNameComparer.Compare(System.Type,System.Type)">
            <summary>
            比较函数
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Helper.TypeHelper">
            <summary>
            类型组手：所有方法均通过实时反射执行处理；
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultLookup">
            <summary>
            默认搜索
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultLookupHierarchy">
            <summary>
            默认搜索层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultLookupNonPublic">
            <summary>
            默认搜索非公有
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultStatic">
            <summary>
            默认静态
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultStaticHierarchy">
            <summary>
            默认静态层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultInstance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.DefaultInstanceHierarchy">
            <summary>
            默认实例层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.StaticNotPublic">
            <summary>
            静态非公有
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.StaticNotPublicHierarchy">
            <summary>
            静态非公有层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.StaticPublic">
            <summary>
            静态公有
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.StaticPublicHierarchy">
            <summary>
            静态公有层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.InstanceNotPublic">
            <summary>
            实例非公有
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.InstanceNotPublicHierarchy">
            <summary>
            实例非公有层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.InstancePublic">
            <summary>
            实例公有
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.InstancePublicHierarchy">
            <summary>
            实例公有层级
            </summary>
        </member>
        <member name="F:XCSJ.Helper.TypeHelper.constructorFuncs">
            <summary>
            构造器函数
            </summary>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.RegisterConstructorFunc(System.Type,System.Func{System.Object})">
            <summary>
            注册构造器
            </summary>
            <param name="type"></param>
            <param name="constructorFunc"></param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.RegisterConstructorFunc``1">
            <summary>
            注册构造器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.CreateInstance(System.Type,System.Boolean)">
            <summary>
            创建实例
            </summary>
            <param name="type"></param>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.CreateInstance``1(System.Boolean)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nonPublic"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.DefaultConstructor(System.Type)">
            <summary>
            默认构造：调用类型对应默认的无参数构造函数，构建实例；推荐使用<see cref="M:XCSJ.Helper.TypeHelper.CreateInstance(System.Type,System.Boolean)"/>替代；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.IsStatic(System.Type)">
            <summary>
            是否是静态类型：类型是密封<see cref="P:System.Type.IsSealed"/>且抽象<see cref="P:System.Type.IsAbstract"/>的，即为静态的；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.CanCreateInstance(System.Type)">
            <summary>
            能否创建实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypeInApp(System.Type,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从当前APP所有程序集中遍历查找符合要求的所有类型
            </summary>
            <param name="parentType">当前待查找的 Type  表示的类是否是从指定的 parentType 表示的类派生的</param>
            <param name="parentInterfaceType">当前待查找的 Type  表示的类是否是从指定的 parentInterfaceType 表示的接口派生的</param>
            <param name="needIsPublic">当前待查找的 Type  表示的类是否要求是共有的</param>
            <param name="canIsAbstract">当前待查找的 Type  表示的类是否可以是一个抽象类</param>
            <param name="canIsGenericType">当前待查找的 Type  表示的类是否可以是一个泛型类，即模板类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypesInAppByBaseTypeOrInterface(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            通过基类或接口在APP中查找类型
            </summary>
            <param name="parentType"></param>
            <param name="needIsPublic"></param>
            <param name="canIsAbstract"></param>
            <param name="canIsGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypeInAppWithClass(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从当前APP所有程序集中遍历查找符合要求的所有类型
            </summary>
            <param name="parentType">当前待查找的 Type  表示的类是否是从指定的 parentType 表示的类派生的</param>
            <param name="needIsPublic">当前待查找的 Type  表示的类是否要求是共有的</param>
            <param name="canIsAbstract">当前待查找的 Type  表示的类是否可以是一个抽象类</param>
            <param name="canIsGenericType">当前待查找的 Type  表示的类是否可以是一个泛型类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypeInAppWithInterface(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从当前APP所有程序集中遍历查找符合要求的所有类型
            </summary>
            <param name="parentInterfaceType">当前待查找的 Type  表示的类是否是从指定的 parentInterfaceType 表示的接口派生的</param>
            <param name="needIsPublic">当前待查找的 Type  表示的类是否要求是共有的</param>
            <param name="canIsAbstract">当前待查找的 Type  表示的类是否可以是一个抽象类</param>
            <param name="canIsGenericType">当前待查找的 Type  表示的类是否可以是一个泛型类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetAssemblies">
            <summary>
            获取所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypes(System.Reflection.Assembly)">
            <summary>
            获取程序集中所有类型
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.Where(System.Func{System.Type,System.Boolean})">
            <summary>
            查找所有符合条件的类型:外部调用时必须有遍历才能将所有符合条件的类型获取到；
            </summary>
            <param name="predicate">条件判断：如果为null时报出异常；</param>
            <returns>符合条件的类型可迭代对象</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.Foreach(System.Action{System.Type})">
            <summary>
            遍历所有类型
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypes(System.Func{System.Type,System.Boolean})">
            <summary>
            获取所有符合条件的类型
            </summary>
            <param name="predicate">条件判断：如果为null时报出异常；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypes">
            <summary>
            获取当前所有程序集中所有类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypes(System.String)">
            <summary>
            获取类型全名称或GUID一致的类型
            </summary>
            <param name="typeFullNameOrGuid"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetFieldInfos(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取字段信息列表
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetPropertyInfos(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取属性信息列表
            </summary>
            <param name="type"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetFieldInfo(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取字段信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetPropertyInfo(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取属性信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetFieldOrProperty(System.Type,System.String,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取字段或属性信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            获取字段的值
            </summary>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            获取属性的值
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetValue(System.Reflection.MemberInfo,System.Object,System.Object[])">
            <summary>
            获取字段、属性、空形参方法的值
            </summary>
            <param name="memberInfo"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            获取字段或属性的值
            </summary>
            <param name="obj"></param>
            <param name="fieldOrPropertyName"></param>
            <param name="bindingFlags"></param>
            <param name="index"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetValue(System.Type,System.Object,System.String,System.Object[],System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取字段或属性的值
            </summary>
            <param name="type"></param>
            <param name="obj"></param>
            <param name="fieldOrPropertyName"></param>
            <param name="index"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TryGetValue(System.Object@,System.Type,System.Object,System.String,System.Object[],System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="type">类型：本参数必须有效</param>
            <param name="obj">对象：对于静态成员本项为null</param>
            <param name="fieldOrPropertyName">字段或属性名</param>
            <param name="index"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TryGetValue(System.Object@,System.Reflection.MemberInfo,System.Object,System.Object[])">
            <summary>
            尝试获取值
            </summary>
            <param name="value"></param>
            <param name="memberInfo"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetFieldValue(System.Type,System.String,System.Reflection.BindingFlags,System.Object)">
            <summary>
            获取字段值
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <param name="obj"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetFieldValue(System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>
            获取字段值
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetPropertyValue(System.Type,System.String,System.Reflection.BindingFlags,System.Object,System.Object[])">
            <summary>
            获取属性值
            </summary>
            <param name="type"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetPropertyValue(System.Object,System.String,System.Reflection.BindingFlags,System.Object[])">
            <summary>
            获取属性值
            </summary>
            <param name="obj"></param>
            <param name="fieldName"></param>
            <param name="bindingFlags"></param>
            <param name="index"></param>
            <returns>如果参数无效或执行失败会报出异常</returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.SetValue(System.Reflection.MemberInfo,System.Object,System.Object,System.Object[])">
            <summary>
            设置值：如果参数无效或执行失败会报出异常
            </summary>
            <param name="memberInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TrySetValue(System.Object,System.Reflection.MemberInfo,System.Object,System.Object[])">
            <summary>
            尝试设置值
            </summary>
            <param name="value"></param>
            <param name="memberInfo"></param>
            <param name="obj"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TrySetValue(System.Object,System.Type,System.Object,System.String,System.Object[],System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            尝试设置值
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="obj"></param>
            <param name="fieldOrPropertyName"></param>
            <param name="index"></param>
            <param name="bindingFlags"></param>
            <param name="includeBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            获取成员类型：可获取字段信息的字段类型、属性信息的属性类型、事件信息的事件处理器类型、构造器的反射类型、方法信息的返回类型、类型信息的类型、嵌套类型的类型；如果无法处理返回null;
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypesHasAttribute``1(System.Reflection.Assembly)">
            <summary>
            查找指定程序集中所有被指定类型的特性修饰的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypesHasAttribute``1(System.Reflection.Assembly,System.Action{System.Type,``0[]},System.Boolean)">
            <summary>
            查找指定程序集中所有被指定类型的特性修饰的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="assembly"></param>
            <param name="action"></param>
            <param name="inherit"></param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TryGetAttributes``1(System.Type,``0[]@,System.Boolean)">
            <summary>
            尝试获取特性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="attributes"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypesHasAttribute``2(System.Boolean)">
            <summary>
            获取指定类型的子类且该子类类型被指定类型的特性修饰
            </summary>
            <typeparam name="TClass"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetTypesHasAttribute``2(System.Func{System.Type,``1[],System.Boolean},System.Boolean)">
            <summary>
            获取指定类型的子类且该子类类型被指定类型的特性修饰
            </summary>
            <typeparam name="TClass"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <param name="predicate"></param>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FindTypesHasAttribute``2(System.Action{System.Type,``1[]},System.Boolean)">
            <summary>
            查找指定类型的子类且该子类类型被指定类型的特性修饰
            </summary>
            <typeparam name="TClass">父类类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="action"></param>
            <param name="inherit"></param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.IsIntegerType(System.Type)">
            <summary>
            是否是整形
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetType(System.String,System.Boolean,System.Boolean)">
            <summary>
            获取名称对应的类型
            </summary>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.Exists(System.String,System.Boolean,System.Boolean)">
            <summary>
            判断类型存在
            </summary>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.ExistsAndAssemblyFileExists(System.String,System.Boolean,System.Boolean)">
            <summary>
            判断类型存在并且程序集文件存在
            </summary>
            <param name="name"></param>
            <param name="fullName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.ExistsAndAssemblyFileExists(System.String,System.Type@,System.Boolean,System.Boolean)">
            <summary>
            判断类型存在并且程序集文件存在, 并返回类型对象
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="fullName"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TryGetElementType(System.Reflection.FieldInfo,System.Type@)">
            <summary>
            尝试获取元素类型
            </summary>
            <param name="fieldInfo"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetElementType(System.Reflection.FieldInfo)">
            <summary>
            获取元素类型
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.TryGetElementType(System.Type,System.Type@)">
            <summary>
            尝试获取元素类型
            </summary>
            <param name="type"></param>
            <param name="elementType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetElementType(System.Type)">
            <summary>
            获取元素类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.ForeachBaseType(System.Type,System.Action{System.Type},System.Type)">
            <summary>
            遍历基础类型，即遍历type->type.BaseType->....->endBaseType,包含type与endBaseType类型；
            </summary>
            <param name="type">期望遍历的类型</param>
            <param name="action">遍历基础类型的回调事件</param>
            <param name="endBaseType">如果无效或不是type的基类，则使用<see cref="T:System.Object"/>类型</param>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.GetBaseTypes(System.Type,System.Type)">
            <summary>
            获取基础类型列表，列表内顺序依次为：type->type.BaseType->....->endBaseType,即由子类到基类的顺序；包含type与endBaseType类型；
            </summary>
            <param name="type">期望基础类型列表的类型</param>
            <param name="endBaseType">如果无效或不是type的基类，则使用<see cref="T:System.Object"/>类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.FullNameToHierarchyString(System.Type,System.Boolean,System.String)">
            <summary>
            类型的全名称转为层级字符串
            </summary>
            <param name="type">类型</param>
            <param name="incudelNested">包含嵌套类：转换时全名称中表示嵌套类层级的字符'+'是否也使用层级分隔符替换</param>
            <param name="hierarchyDelimiter">层级分隔符：转换时全名称中表示命名空间层级的字符'.'替换使用的层级分隔符</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.Match(System.Type,System.String)">
            <summary>
            判断类型与类型字符串是否匹配：依次检测<see cref="P:System.Type.FullName"/>、<see cref="M:System.Type.ToString"/>、<see cref="M:XCSJ.Helper.TypeHelper.FullNameToHierarchyString(System.Type,System.Boolean,System.String)"/>与类型字符串是否相等，如相等则认为匹配；
            </summary>
            <param name="type"></param>
            <param name="typeString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.IsConst(System.Reflection.FieldInfo)">
            <summary>
            字段被const关键字修饰
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Helper.TypeHelper.IsArrayOrList(System.Type)">
            <summary>
            是数组或列表
            </summary>
            <param name="listType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.EPlayerState">
            <summary>
            播放器状态
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Init">
            <summary>
            初始化:将开始初始化
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Release">
            <summary>
            销毁:已完成销毁操作
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Free">
            <summary>
            空闲:初始化完成,无任何播放内容时播放器的状态
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Play">
            <summary>
            播放
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Resume">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Playing">
            <summary>
            播放中
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.Finished">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.LoadContent">
            <summary>
            加载内容
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.LoadedContent">
            <summary>
            已加载内容
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.UnloadContent">
            <summary>
            卸载内容
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.UnloadedContent">
            <summary>
            已卸载内容
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.BeginControlled">
            <summary>
            开始受控
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.BeganControlled">
            <summary>
            已开始受控
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.EndControlled">
            <summary>
            结束受控
            </summary>
        </member>
        <member name="F:XCSJ.Interfaces.EPlayerState.EndedContent">
            <summary>
            已结束受控
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IBaseManager">
            <summary>
            基础管理接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IBaseManagerTypeComparer">
            <summary>
            管理类的类型比较器
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IBaseManagerTypeComparer.Compare(XCSJ.Interfaces.IBaseManager,XCSJ.Interfaces.IBaseManager)">
            <summary>
            类型的比较接口函数
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.ICommand">
            <summary>
            命令接口，有做、不做(撤销)
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.ICommand.CanDo">
            <summary>
            能做
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Interfaces.ICommand.CanUndo">
            <summary>
            能撤销
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IEvent">
            <summary>
            事件接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IFramePlayer">
            <summary>
            帧播放器
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IFramePlayer.frameCount">
            <summary>
            帧数
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IFramePlayer.frame">
            <summary>
            进度的帧值，在[0,frameCount] 范围内
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.INamePath">
            <summary>
            名称路径接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.INamePath.parent">
            <summary>
            父级
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.NamePathExtension">
            <summary>
            名称路径扩展
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.NamePathExtension.GetNamePath(XCSJ.Interfaces.INamePath,System.String)">
            <summary>
            获取名称路径
            </summary>
            <param name="obj"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Interfaces.NamePathExtension.Find``1(``0,System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            通过名称路径查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="namePath"></param>
            <param name="getChildren"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Interfaces.NamePathExtension.Find``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.String)">
            <summary>
            通过名称路径在枚举器中查找
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objs"></param>
            <param name="namePath"></param>
            <param name="getChildren"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Interfaces.NamePathExtension.GetParentNamePath(System.String,System.String)">
            <summary>
            获取父级名称路径
            </summary>
            <param name="namePath"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Interfaces.NamePathExtension.TryParseNamePath(System.String,System.String@,System.String@,System.String)">
            <summary>
            尝试分析名称路径
            </summary>
            <param name="namePath"></param>
            <param name="parentNamePath"></param>
            <param name="name"></param>
            <param name="delimiter"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IObject">
            <summary>
            对象接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IObjectWithParam">
            <summary>
            带参数的对象接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IInit`1">
            <summary>
            初始化接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IInit`1.Init(`0)">
            <summary>
            初始化
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IInit">
            <summary>
            初始化接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IInit.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IInitWithParam">
            <summary>
            带参数的初始化
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IInitWithParam.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IRelease`1">
            <summary>
            销毁
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IRelease`1.Release(`0)">
            <summary>
            销毁
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IRelease">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IRelease.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IHandler">
            <summary>
            处理器接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IRun">
            <summary>
            运行接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IRun.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IRunWithParam">
            <summary>
            带参数的运行接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IRunWithParam.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IStartup">
            <summary>
            启动接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IStartup.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IStartupWithParam">
            <summary>
            带参数的启动
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IStartupWithParam.Startup(XCSJ.Algorithms.ParamList)">
            <summary>
            启动
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IStop">
            <summary>
            停止接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IStop.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IConnection">
            <summary>
            连接性接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IConnection.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IConnectionWithParam">
            <summary>
            带参数的连接性接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IConnectionWithParam.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IConnect">
            <summary>
            连接接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IConnect.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IConnectWithParam">
            <summary>
            带参数的连接接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IConnectWithParam.Connect(XCSJ.Algorithms.ParamList)">
            <summary>
            连接
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IClose">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IClose.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IClone">
            <summary>
            深拷贝
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IClone.Clone">
            <summary>
            深拷贝
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IClone`1">
            <summary>
            深拷贝
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IClone`1.Clone">
            <summary>
            深拷贝
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.ICloneFrom`1">
            <summary>
            深拷贝
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.ICloneFrom`1.CloneFrom(`0)">
            <summary>
            从来源对象拷贝
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.ITarget">
            <summary>
            目标
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITarget.target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ITarget`1">
            <summary>
            目标
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Interfaces.ITarget`1.target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IMerge">
            <summary>
            合并
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IMerge.Merge(System.Object)">
            <summary>
            将当前对象与其他对象合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IMerge`1">
            <summary>
            合并接口，将其他对象的信息合并到当前对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IMerge`1.Merge(`0)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IToFriendlyString">
            <summary>
            用于输出友好字符串的接口类，多用于界面输出，用于描述类对象的重要信息，并以相对友好(简明扼要)的字符串进行呈现（单行字符串）
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IToFriendlyString.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IRecord">
            <summary>
            记录接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IRecord.Record">
            <summary>
            记录
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IRecord`1">
            <summary>
            记录接口
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IRecord`1.Record(`0)">
            <summary>
            记录
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IRecord`2">
            <summary>
            记录接口
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IRecord`2.Record(`0,`1)">
            <summary>
            记录
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IDo">
            <summary>
            做 执行某些操作的接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IDo.Do">
            <summary>
            做
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IDone">
            <summary>
            已做接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IDone.Done">
            <summary>
            已做
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IDone`1">
            <summary>
            已做接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IDone`1.Done(`0)">
            <summary>
            已做
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IRedo">
            <summary>
            重做接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IRedo.Redo">
            <summary>
            重做
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IUndo">
            <summary>
            撤销接口：执行某些操作的逆操作接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IUndo.Undo">
            <summary>
            撤销
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IDelete">
            <summary>
            删除接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IDelete.Delete(System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="deleteObject"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IOnDelete">
            <summary>
            当删除时回调的接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOnDelete.OnDelete(System.Boolean)">
            <summary>
            当删除时回调
            </summary>
            <param name="deleteObject"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IFinished">
            <summary>
            已完成的接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IFinished.Finished">
            <summary>
            已完成的
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IName">
            <summary>
            名称接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IName.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IGuid">
            <summary>
            唯一标识接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IGuid.guid">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IUser">
            <summary>
            用户接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IExpand">
            <summary>
            展开接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IExpand.expand">
            <summary>
            展开
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IExpanded">
            <summary>
            已展开的接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IExpanded.expanded">
            <summary>
            已展开的
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IEnable">
            <summary>
            可用性接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IEnable.enable">
            <summary>
            可用
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IActive">
            <summary>
            激活性接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IActive.active">
            <summary>
            激活
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IReset`1">
            <summary>
            重置接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IReset`1.Reset(`0)">
            <summary>
            重置
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:XCSJ.Interfaces.ILifecycleLite`1">
            <summary>
            生命周期简版接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycleLite`1.OnEntry(`0)">
            <summary>
            进入
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycleLite`1.OnUpdate(`0)">
            <summary>
            更新
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycleLite`1.OnExit(`0)">
            <summary>
            退出
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:XCSJ.Interfaces.ILifecycle`1">
            <summary>
            生命周期接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycle`1.OnBeforeEntry(`0)">
            <summary>
            当进入之前
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycle`1.OnAfterEntry(`0)">
            <summary>
            当进入之后
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycle`1.OnBeforeExit(`0)">
            <summary>
            当退出之前
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ILifecycle`1.OnAfterExit(`0)">
            <summary>
            当退出之后
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:XCSJ.Interfaces.ILifecycleInfo">
            <summary>
            生命周期信息接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ILifecycleInfo.entryTime">
            <summary>
            进入时间
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ILifecycleInfo.exitTime">
            <summary>
            退出时间
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ILifecycleInfo.updateTime">
            <summary>
            更新时间
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IMarkDirty">
            <summary>
            标记脏接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IMarkDirty.MarkDirty">
            <summary>
            标记脏
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IErrorInfo">
            <summary>
            错误信息接口类
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IErrorInfo.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ErrorInfo">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ErrorInfo.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.ErrorInfo.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.ErrorInfo.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XCSJ.Interfaces.ErrorInfo.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IOnError">
            <summary>
            发生错误时的回调接口；
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOnError.OnError(XCSJ.Interfaces.IErrorInfo)">
            <summary>
            当错误时
            </summary>
            <param name="errorInfo"></param>
        </member>
        <member name="T:XCSJ.Interfaces.IOnUpdate">
            <summary>
            更新接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOnUpdate.OnUpdate">
            <summary>
            更新接口函数-由主Main进行循环调用
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IOption">
            <summary>
            选项
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOption.OnModified">
            <summary>
            当修改时
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOption.MarkDirty">
            <summary>
            标记脏
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IPercent">
            <summary>
            百分比接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IPercent.percent">
            <summary>
            进度的百分比值，在[0,1] 范围内
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IPercentClip">
            <summary>
            百分比剪辑接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IPercentClip.beginPercent">
            <summary>
            开始百分比
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IPercentClip.endPercent">
            <summary>
            结束百分比
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IPercentClip.percentLength">
            <summary>
            百分比长度
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IPercentPlayer">
            <summary>
            百分比播放器
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ISpeed">
            <summary>
            速度接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ISpeed.speed">
            <summary>
            速度
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IWorkClipPlayer">
            <summary>
            工作剪辑播放器的接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IContentPlayer">
            <summary>
            内容播放器
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IContentPlayer.loop">
            <summary>
            循环
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IPause">
            <summary>
            暂停接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IPause.Pause">
            <summary>
            暂停
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IResume">
            <summary>
            继续(播放)接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IResume.Resume">
            <summary>
            继续(播放)
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IPlay">
            <summary>
            播放接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IPlay.Play">
            <summary>
            播放
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IBasePlayer">
            <summary>
            基础播放器接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IBasePlayer.IsPlaying">
            <summary>
            是在播放中
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IPlayer">
            <summary>
            播放器接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IPlayer.playerState">
            <summary>
            播放状态
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IPlayerEvent">
            <summary>
            播放器事件接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IPlayerEvent.OnPlayerStateChanged(XCSJ.Interfaces.IPlayer,XCSJ.Interfaces.EPlayerState)">
            <summary>
            当播放器的状态发生变化时回调
            </summary>
            <param name="player">播放器对象</param>
            <param name="lastPlayerState">上次的播放状态</param>
        </member>
        <member name="T:XCSJ.Interfaces.IPlayerEvent`1">
            <summary>
            播放器事件模版接口
            </summary>
            <typeparam name="T">播放器模版</typeparam>
        </member>
        <member name="M:XCSJ.Interfaces.IPlayerEvent`1.OnPlayerStateChanged(`0,XCSJ.Interfaces.EPlayerState)">
            <summary>
            当播放器的状态发生变化时回调
            </summary>
            <param name="player">播放器对象</param>
            <param name="lastPlayerState">上次的播放状态</param>
        </member>
        <member name="T:XCSJ.Interfaces.IProgress">
            <summary>
            进度接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IProgress.progress">
            <summary>
            进度的百分比值，在[0,1] 范围内
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ISetProgress">
            <summary>
            设置进度接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.ISetProgress.SetProgress(System.Double)">
            <summary>
            设置进度
            </summary>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IGetProgress">
            <summary>
            获取进度接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IGetProgress.GetProgress">
            <summary>
            获取进度
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.IOnBeforeSerialize">
            <summary>
            序列化之前接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOnBeforeSerialize.OnBeforeSerialize(XCSJ.Interfaces.ISerializeContext)">
            <summary>
            当序列化之前回调
            </summary>
            <param name="serializeContext">序列化上下文</param>
        </member>
        <member name="T:XCSJ.Interfaces.IOnAfterDeserialize">
            <summary>
            反序列化之后接口
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.IOnAfterDeserialize.OnAfterDeserialize(XCSJ.Interfaces.ISerializeContext)">
            <summary>
            当反序列化之后回调
            </summary>
            <param name="serializeContext">序列化上下文</param>
        </member>
        <member name="T:XCSJ.Interfaces.ISerializeContext">
            <summary>
            序列化上下文接口
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IContext">
            <summary>
            上下文接口
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IContext.tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IContext.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.Context.tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.Context.context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ITime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITime.time">
            <summary>
            进度的时间值，在[0,内容时长] 范围内;
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ISetTime">
            <summary>
            设置时间
            </summary>
        </member>
        <member name="M:XCSJ.Interfaces.ISetTime.SetTime(System.Double)">
            <summary>
            设置时间
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Interfaces.ITL">
            <summary>
            时长TL : Time Length
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITL.timeLength">
            <summary>
            时长
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.IOTL">
            <summary>
            单次时长OTL : Once Time Length
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.IOTL.onceTimeLength">
            <summary>
            单次时长
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ITTL">
            <summary>
            总时长TTL : Total Time Length
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITTL.totalTimeLength">
            <summary>
            总时长
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ITimeClip">
            <summary>
            时间剪辑
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITimeClip.beginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:XCSJ.Interfaces.ITimeClip.endTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="T:XCSJ.Interfaces.ITimePlayer">
            <summary>
            时间播放器
            </summary>
        </member>
        <member name="T:XCSJ.IO.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:XCSJ.IO.Config.DefaultConfigFolderName">
            <summary>
            默认配置文件夹名
            </summary>
        </member>
        <member name="M:XCSJ.IO.Config.DefaultConfigFolder">
            <summary>
            默认配置文件夹全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.Config.EnsureFolderExist(System.String)">
            <summary>
            当前工作目录的完全限定路径 下确保指定名称的文件夹存在，并返回其路径
            </summary>
            <param name="folderName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.Config.GetCrrentAppDirectory">
            <summary>
            获取当前App目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.IO.IniFile">
            <summary>
            Ini文件
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniFile.path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniFile.exist">
            <summary>
            存在
            </summary>
        </member>
        <member name="M:XCSJ.IO.IniFile.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:XCSJ.IO.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            设置值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.IniFile.SetValue(System.String,System.String,System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.IniFile.GetValue(System.String,System.String,System.String)">
            <summary>
            获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniFile.GetValue(System.String,System.String,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniFile.IniRead(System.String,System.String,System.String,System.String)">
            <summary>
            Ini读取
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniFile.IniWrite(System.String,System.String,System.String,System.String)">
            <summary>
            Ini写入
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="path"></param>
        </member>
        <member name="T:XCSJ.IO.IniKeyValue">
            <summary>
            Ini键值
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniKeyValue.key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniKeyValue.value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XCSJ.IO.IniKeyValue.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:XCSJ.IO.IniSection">
            <summary>
            Ini节
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniSection.section">
            <summary>
            节
            </summary>
        </member>
        <member name="M:XCSJ.IO.IniSection.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:XCSJ.IO.IniSection.Add(System.String,System.String)">
            <summary>
            添加
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.IniSection.GetValue(System.String,System.String)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniSection.TryGetValue(System.String,System.String@)">
            <summary>
            尝试获取值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.IO.IniReader">
            <summary>
            Ini读取器
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniReader.path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniReader.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniReader.exist">
            <summary>
            存在
            </summary>
        </member>
        <member name="P:XCSJ.IO.IniReader.separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.IO.IniReader.sections">
            <summary>
            节字典
            </summary>
        </member>
        <member name="M:XCSJ.IO.IniReader.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
            <param name="separator"></param>
        </member>
        <member name="M:XCSJ.IO.IniReader.ReadFormFile">
            <summary>
            从文件读取
            </summary>
        </member>
        <member name="M:XCSJ.IO.IniReader.GetValue(System.String,System.String,System.String)">
            <summary>
            获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniReader.GetValue(System.String,System.String,System.Int32)">
            <summary>
            获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniReader.TryGetValue(System.String,System.String,System.String@)">
            <summary>
            尝试获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.IniReader.TryGetValue(System.String,System.String,System.Int32@)">
            <summary>
            尝试获取值
            </summary>
            <param name="section"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.IO.BaseJsonFile">
            <summary>
            基础JSON文件
            </summary>
        </member>
        <member name="F:XCSJ.IO.BaseJsonFile.DefaultFileName">
            <summary>
            默认文件名
            </summary>
        </member>
        <member name="P:XCSJ.IO.BaseJsonFile.DefaultDirectoryPath">
            <summary>
            默认目录全路径
            </summary>
        </member>
        <member name="P:XCSJ.IO.BaseJsonFile.fileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:XCSJ.IO.BaseJsonFile.directoryPath">
            <summary>
            目录路径
            </summary>
        </member>
        <member name="P:XCSJ.IO.BaseJsonFile.fileFullPath">
            <summary>
            文件全路径
            </summary>
        </member>
        <member name="P:XCSJ.IO.BaseJsonFile.hasLoad">
            <summary>
            是否已加载
            </summary>
        </member>
        <member name="M:XCSJ.IO.BaseJsonFile.OnLoad(System.String)">
            <summary>
            当加载时
            </summary>
            <param name="configString"></param>
        </member>
        <member name="M:XCSJ.IO.BaseJsonFile.Load(System.String,System.String)">
            <summary>
            加载
            </summary>
            <param name="fileName"></param>
            <param name="directoryPath"></param>
        </member>
        <member name="M:XCSJ.IO.BaseJsonFile.OnSave">
            <summary>
            当保存时
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.BaseJsonFile.Save(System.String)">
            <summary>
            保存
            </summary>
            <param name="fileFullPath"></param>
        </member>
        <member name="T:XCSJ.IO.JsonFile">
            <summary>
            JSON文件
            </summary>
        </member>
        <member name="P:XCSJ.IO.JsonFile.json">
            <summary>
            JSON数据对象
            </summary>
        </member>
        <member name="M:XCSJ.IO.JsonFile.OnLoad(System.String)">
            <summary>
            当加载时
            </summary>
            <param name="configString"></param>
        </member>
        <member name="M:XCSJ.IO.JsonFile.OnSave">
            <summary>
            当保存时
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.JsonFile.SetValue(System.String,System.String)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.JsonFile.SetValue(System.String,System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.JsonFile.SetValue``1(System.String,``0)">
            <summary>
            设置值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.IO.JsonFile.GetValue(System.String,System.String,System.Boolean)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="addIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.JsonFile.GetValue(System.String,System.Int32,System.Boolean)">
            <summary>
            获取值
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="addIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.IO.JsonFile.GetValue``1(System.String,``0,System.Boolean)">
            <summary>
            获取值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="addIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.IO.JsonFile`1">
            <summary>
            JSON文件泛型
            </summary>
            <typeparam name="TConfig"></typeparam>
        </member>
        <member name="P:XCSJ.IO.JsonFile`1.config">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="M:XCSJ.IO.JsonFile`1.OnLoad(System.String)">
            <summary>
            当加载时
            </summary>
            <param name="configString"></param>
        </member>
        <member name="M:XCSJ.IO.JsonFile`1.OnSave">
            <summary>
            当保存时
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Kernel.IDRange">
            <summary>
            ID区间
            </summary>
        </member>
        <member name="F:XCSJ.Kernel.IDRange.ReserveBegin">
            <summary>
            保留开始
            </summary>
        </member>
        <member name="F:XCSJ.Kernel.IDRange.ReserveEnd">
            <summary>
            保留结束
            </summary>
        </member>
        <member name="F:XCSJ.Kernel.IDRange.Begin">
            <summary>
            开始:0
            </summary>
        </member>
        <member name="F:XCSJ.Kernel.IDRange.End">
            <summary>
            结束:4095
            </summary>
        </member>
        <member name="F:XCSJ.Kernel.IDRange.Fragment">
            <summary>
            ID片段: 每个片段可有128个ID；[0x0000, 0xfff] = 4096 = 0x80 * 0x20, 即可有0x20 = 32个片段;
            </summary>
        </member>
        <member name="T:XCSJ.Kernel.IAsyncActionHandler">
            <summary>
            异步动作处理器接口
            </summary>
        </member>
        <member name="M:XCSJ.Kernel.IAsyncActionHandler.AsyncExecute(System.Action)">
            <summary>
            异步执行
            </summary>
            <param name="action"></param>
        </member>
        <member name="T:XCSJ.Kernel.MainManager">
            <summary>
            主管理器类，使用接口方法管理所有管理类实例对象；
            </summary>
        </member>
        <member name="P:XCSJ.Kernel.MainManager.managers">
            <summary>
            获取管理类列表
            </summary>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.AddManager(System.Type,XCSJ.Interfaces.IBaseManager)">
            <summary>
            添加一个新的管理类-静态方法;无则添加，有则修改；
            </summary>
            <param name="type"></param>
            <param name="baseManager"></param>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.GetManager``1">
            <summary>
            获取管理类-静态方法
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.GetManager(System.Type)">
            <summary>
            获取管理器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.RemoveManager(System.Type)">
            <summary>
            移除管理器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化主入口管理类
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.SortByType">
            <summary>
            对管理类列表进行排序~需要用户主动调用
            </summary>
        </member>
        <member name="M:XCSJ.Kernel.MainManager.Comparison(System.Collections.Generic.KeyValuePair{System.Type,XCSJ.Interfaces.IBaseManager},System.Collections.Generic.KeyValuePair{System.Type,XCSJ.Interfaces.IBaseManager})">
            <summary>
            比较
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Languages.ELanguageType">
            <summary>
            语言类型：仅定义常用类型语言，后续可根据需要追加新类型的语言定义，新增的语言类型必须保证数值递增；
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageType.Chinese">
            <summary>
            中文：简体中文，默认的本地化语言
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageType.English">
            <summary>
            英文：默认国际化的语言
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageType.ChineseTraditional">
            <summary>
            繁体中文：简体中文的繁体化
            </summary>
        </member>
        <member name="T:XCSJ.Languages.Language">
            <summary>
            语言：用于存储不同类型语言的文本信息；
            </summary>
        </member>
        <member name="P:XCSJ.Languages.Language.languageType">
            <summary>
            当前语言类型，在程序运行期可被修改！
            </summary>
        </member>
        <member name="F:XCSJ.Languages.Language.onLangugeTypeChanged">
            <summary>
            当语言类型已变更后回调
            </summary>
        </member>
        <member name="F:XCSJ.Languages.Language.LanguageTypeCount">
            <summary>
            语言类型数量：即语言枚举<see cref="T:XCSJ.Languages.ELanguageType"/>中定义的语言类型的数量
            </summary>
        </member>
        <member name="F:XCSJ.Languages.Language.languages">
            <summary>
            语言列表：用于存储不同类型语言的文本信息列表
            </summary>
        </member>
        <member name="P:XCSJ.Languages.Language.Item(XCSJ.Languages.ELanguageType)">
            <summary>
            根据语言类型获取文本信息
            </summary>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Languages.Language.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Languages.Language.text">
            <summary>
            文本：当前语言类型<see cref="P:XCSJ.Languages.Language.languageType"/>对应的文本信息
            </summary>
        </member>
        <member name="P:XCSJ.Languages.Language.Empty">
            <summary>
            因为本静态成员的存在;会导致构造函数先于静态构造函数执行;
            而在构造函数中会使用其他的静态成员;根据静态成员初始化的顺序性问题;
            故本静态成员必须写在其他静态成员之后;
            </summary>
        </member>
        <member name="M:XCSJ.Languages.Language.#ctor(System.String[])">
            <summary>
            构造
            </summary>
            <param name="languages">语言列表：按照<see cref="T:XCSJ.Languages.ELanguageType"/>中定义的语言类型顺序理解传入数组中的每个元素信息</param>
        </member>
        <member name="M:XCSJ.Languages.Language.#ctor(XCSJ.Languages.Language)">
            <summary>
            构造
            </summary>
            <param name="language">语言</param>
        </member>
        <member name="M:XCSJ.Languages.Language.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.Language.GetAllLanguageText(System.Char)">
            <summary>
            获取所有语言文本
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.Language.op_Implicit(XCSJ.Languages.Language)~System.String">
            <summary>
            显式转化将本类对象转化为字符串
            </summary>
            <param name="lan"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.Language.op_Implicit(System.String)~XCSJ.Languages.Language">
            <summary>
            显式转化将字符串转化本类对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Languages.LanguageAttribute">
            <summary>
            语言特性 <br />
            用于类、成员变量、枚举等在界面中显示时，对应的中/英文内容信息<br />
            本类为抽象类；
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageAttribute.language">
            <summary>
            语言信息属性器
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageAttribute.Item(System.Int32)">
            <summary>
            根据数字索引获取描述信息
            </summary>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Languages.LanguageAttribute.Item(XCSJ.Languages.ELanguageType)">
            <summary>
            根据语言类型获取描述信息
            </summary>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数，添加变量的语言描述属性
            </summary>
            <param name="cn">中文描述,必填</param>
            <param name="en">英文描述</param>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueNameWithSpace``1(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，根据FieldInfo获取信息指定语言类型的描述;<br />
            会用空格将每个因为字符单词分割；
            </summary>
            <typeparam name="T">继承于LanguageDescriptionAttribute的子特性类</typeparam>
            <param name="memberInfo"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueNameWithSpace``1(System.Type,System.String,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，根据Type以及其中共有成员的名称获取信息指定语言类型的描述<br />
            会用空格将每个因为字符单词分割；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="member"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueNameWithSpace``1(System.Type,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，获取Type信息指定语言类型的描述<br />
            会用空格将每个因为字符单词分割；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueName``1(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，根据FieldInfo获取信息指定语言类型的描述
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memberInfo"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueName``1(System.Type,System.String,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，根据Type以及其中共有成员的名称获取信息指定语言类型的描述
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="member"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ValueName``1(System.Type,XCSJ.Languages.ELanguageType)">
            <summary>
            静态方法，获取Type信息指定语言类型的描述
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.StringTransform(System.String)">
            <summary>
            字符串转换函数
            m_listName      List Name
            m_list_name     List Name
            _list_name_     List Name
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageAttribute.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Languages.LanguageFileOutputAttribute">
            <summary>
            语言文件输出特性：用于标识一个类、枚举需要输出对应的语言信息到语言文件
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageFileOutputAttribute.output">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageFileOutputAttribute.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:XCSJ.Languages.ELanguageGroup">
            <summary>
            语言组
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageGroup.Global">
            <summary>
            全局：属于全局组名，即空字符串组名
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageGroup.Type">
            <summary>
            类型：使用类型全名称作为组名
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageGroup.Member">
            <summary>
            成员：将成员转字符串作为组名
            </summary>
        </member>
        <member name="F:XCSJ.Languages.ELanguageGroup.Custom">
            <summary>
            自定义
            </summary>
        </member>
        <member name="T:XCSJ.Languages.LanguageTupleAttribute">
            <summary>
            语言元组特性：用于将语言元组的数据信息输出到语言文件中
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageTupleAttribute.i18n">
            <summary>
            国际化：默认可理解为英文，internationalization的简写；
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageTupleAttribute.l10n">
            <summary>
            本地化：默认可理解为简体中文，localization的简写；
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageTupleAttribute.languageGroup">
            <summary>
            语言组
            </summary>
        </member>
        <member name="P:XCSJ.Languages.LanguageTupleAttribute.groupName">
            <summary>
            组名
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageTupleAttribute.#ctor(System.String,System.String,XCSJ.Languages.ELanguageGroup)">
            <summary>
            构造
            </summary>
            <param name="i18n">国际化：通常为英文</param>
            <param name="l10n">本地化：通常为简体中文</param>
            <param name="languageGroup">语言组</param>
        </member>
        <member name="M:XCSJ.Languages.LanguageTupleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="i18n">国际化：通常为英文</param>
            <param name="l10n">本地化：通常为简体中文</param>
            <param name="groupName"></param>
        </member>
        <member name="T:XCSJ.Languages.LanguageHelper">
            <summary>
            语言组手
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.ToGroupName(System.Type)">
            <summary>
            转组名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.GetGroupName(XCSJ.Languages.ELanguageGroup,System.Type,System.Reflection.MemberInfo,System.String)">
            <summary>
            获取组名
            </summary>
            <param name="languageGroup"></param>
            <param name="type"></param>
            <param name="memberInfo"></param>
            <param name="customGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.GetGroupName(XCSJ.Languages.LanguageTupleAttribute,System.Type,System.Reflection.MemberInfo)">
            <summary>
            获取组名
            </summary>
            <param name="languageTupleAttribute"></param>
            <param name="type"></param>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Languages.LanguageHelper.currentLanguageFile">
            <summary>
            当前语言文件
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.String,System.String,System.String)">
            <summary>
            翻译
            </summary>
            <param name="key"></param>
            <param name="groupName"></param>
            <param name="defaultGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.String,System.Type,System.Type)">
            <summary>
            翻译
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="defaultType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.String,System.Type,System.String)">
            <summary>
            翻译
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <param name="defaultGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.String,System.Object,System.String)">
            <summary>
            翻译
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="defaultGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.Type)">
            <summary>
            翻译：基于对类型修饰的<see cref="T:XCSJ.Attributes.NameAttribute"/>进行翻译
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.Reflection.MemberInfo)">
            <summary>
            翻译：基于对成员信息修饰的<see cref="T:XCSJ.Attributes.NameAttribute"/>进行翻译
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.TrTip(System.Reflection.MemberInfo)">
            <summary>
            翻译提示：基于对成员信息修饰的<see cref="T:XCSJ.Attributes.TipAttribute"/>进行翻译
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.Tr(System.Enum)">
            <summary>
            翻译：基于对枚举值修饰的<see cref="T:XCSJ.Attributes.NameAttribute"/>进行翻译
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Languages.LanguageHelper.TrTip(System.Enum)">
            <summary>
            翻译提示：基于对枚举值修饰的<see cref="T:XCSJ.Attributes.TipAttribute"/>进行翻译
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Languages.LanguageFile">
            <summary>
            语言文件
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.author">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.software">
            <summary>
            软件
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.language">
            <summary>
            语言
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.GlobalGroupName">
            <summary>
            全局组名：为空字符串
            </summary>
        </member>
        <member name="F:XCSJ.Languages.LanguageFile.groups">
            <summary>
            组
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageFile.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Languages.LanguageFile.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="language"></param>
        </member>
        <member name="M:XCSJ.Languages.LanguageFile.Tr(System.String,System.String,System.String,System.Func{System.String})">
            <summary>
            翻译：优先从组名中查找键对应的翻译，如果找不到则从缺省组名中查找，如果仍找不到则从全局组名<see cref="F:XCSJ.Languages.LanguageFile.GlobalGroupName"/>中查找
            </summary>
            <param name="key">键</param>
            <param name="groupName">组名</param>
            <param name="defaultGroupName">缺省组名</param>
            <param name="trFunc">翻译函数：在执行从全局组名中找之前，调用本函数；如果返回非null值，则认为翻译有效；</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Languages.TrHelper">
            <summary>
            翻译组手
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.OK">
            <summary>
            确定
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.NamePath">
            <summary>
            名称路径
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.NamePath_EN">
            <summary>
            名称路径英文
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Remove">
            <summary>
            移除
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Tips">
            <summary>
            提示
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Common">
            <summary>
            常用
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.Unclassified">
            <summary>
            未分类
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.InvalidComponent">
            <summary>
            无效组件
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.InvalidComponent_EN">
            <summary>
            无效组件英文
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.ChineseScripts">
            <summary>
            中文脚本
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.ChineseScripts_EN">
            <summary>
            中文脚本英文
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.StateMachine">
            <summary>
            状态机
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.StateMachine_EN">
            <summary>
            状态机英文
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.ToolLibrary">
            <summary>
            工具库
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.ToolLibrary_EN">
            <summary>
            工具库英文
            </summary>
        </member>
        <member name="P:XCSJ.Languages.TrHelper.DeveloperSpecific">
            <summary>
            开发者专用
            </summary>
        </member>
        <member name="F:XCSJ.Languages.TrHelper.DeveloperSpecific_EN">
            <summary>
            开发者专用英文
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.ExporterFunc`1">
            <summary>
            导出函数委托定义
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="T:XCSJ.LitJson.WrapperFactory">
            <summary>
            Json包装器工厂委托定义
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.IJsonWrapper">
            <summary>
            Json包装器接口
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetJsonType">
            <summary>
            获取Json类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetJsonType(XCSJ.LitJson.JsonType)">
            <summary>
            设置Json类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsObject">
            <summary>
            是对象
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsArray">
            <summary>
            是数组
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsString">
            <summary>
            是字符串
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsInt">
            <summary>
            是整型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsLong">
            <summary>
            是长整型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsDouble">
            <summary>
            是双精度
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.IJsonWrapper.IsBoolean">
            <summary>
            是布尔
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetBoolean">
            <summary>
            获取布尔
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetInt">
            <summary>
            获取整型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetLong">
            <summary>
            获取长整型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetDouble">
            <summary>
            获取双精度
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.GetString">
            <summary>
            获取字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetBoolean(System.Boolean)">
            <summary>
            设置布尔
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetInt(System.Int32)">
            <summary>
            设置整型
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetLong(System.Int64)">
            <summary>
            设置长整型
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetDouble(System.Double)">
            <summary>
            设置双精度
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.ToJson(XCSJ.LitJson.JsonWriter)">
            <summary>
            转Json
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XCSJ.LitJson.IJsonWrapper.SetValue(System.Object)">
            <summary>
            设置值：仅可用于设置基础类型值
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:XCSJ.LitJson.ImporterFunc`2">
            <summary>
            导入函数委托定义
            </summary>
            <typeparam name="TJson"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.JsonAttribute">
            <summary>
            Json特性
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.exportIgnore">
            <summary>
            用于标记在导出JSON字符串(即对象 --> JSON字符串)时是否忽略被修饰的成员
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.importIgnore">
            <summary>
            用于标记在导入JSON字符串(即JSON字符串 --> 对象)时是否忽略被修饰的成员
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.exportString">
            <summary>
            本参数说明如下:
            1、修饰的成员 == null时，本参数无效！（LitJson默认输出为null ）
            2、对继承接口IJsonWrapper的类，本参数不生效！
            3、修饰的成员 != null时：本参数为false时会继续根据LitJson默认类型处理机制输出信息，为true时会直接将对应的成员对象转换为字符串（即执行ToString()然后输出字符串）；
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.exportName">
            <summary>
            导出时的名称，本名称需要严格遵守变量命名规则，不允许出现特殊字符；如为空(null或空字符串)则使用成员名，否则用本名称替换成员名；
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.exportRule">
            <summary>
            如果exportName与类中其他成员的导出名称重名时的冲突解决原则；
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.importName">
            <summary>
            导入时的名称，本名称需要严格遵守变量命名规则，不允许出现特殊字符；如为空(null或空字符串)则使用成员名，否则用本名称替换成员名；
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonAttribute.importRule">
            <summary>
            如果importName与类中其他成员的导出名称重名时的冲突解决原则；
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="importAndExport"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.#ctor(System.String,XCSJ.Algorithms.EAliasRule)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="rule"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ExportIgnore(System.Reflection.MemberInfo)">
            <summary>
            导出忽略
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ImportIgnore(System.Reflection.MemberInfo)">
            <summary>
            导出忽略
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ExportName(System.Reflection.MemberInfo)">
            <summary>
            导出名
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ImportName(System.Reflection.MemberInfo)">
            <summary>
            导入名
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ExportRule(System.Reflection.MemberInfo)">
            <summary>
            导出规则
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonAttribute.ImportRule(System.Reflection.MemberInfo)">
            <summary>
            导入规则
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.ImportAttribute">
            <summary>
            导入特性
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ImportAttribute.ignorePropertyMissingException">
            <summary>
            忽略属性缺失异常
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.ImportAttribute.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="ignorePropertyMissingException"></param>
        </member>
        <member name="M:XCSJ.LitJson.ImportAttribute.IgnorePropertyMissingException(XCSJ.LitJson.ImportAttribute)">
            <summary>
            忽略属性缺失异常
            </summary>
            <param name="importAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.IToJson">
            <summary>
            转Json接口
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IToJson.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.IFromJson">
            <summary>
            从Json转接口
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IFromJson.FromJson(System.String)">
            <summary>
            从Json转
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.IConvertWithJson">
            <summary>
            与Json转化接口
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.EMemberToJsonResult">
            <summary>
            成员转Json结果
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.EMemberToJsonResult.Succcess">
            <summary>
            成功，将名称与值写入Json后，不再对当前的成员信息对象做后续处理！可以成功处理时，推荐的默认值！
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.EMemberToJsonResult.Fail">
            <summary>
            失败，不再对当前的成员信息对象做后续处理！无法有效处理时，推荐的默认值！
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.EMemberToJsonResult.SucccessAndContinue">
            <summary>
            成功，将名称与值写入Json后，继续对当前的成员信息对象调用默认处理！不推荐使用！
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.EMemberToJsonResult.FailAndContinue">
            <summary>
            失败，继续对当前的成员信息对象调用默认处理！继承了接口但是没有对指定名称的属性做任何处理，并仍然期望输出到Json时，推荐的默认值！
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.IMemberToJson">
            <summary>
            成员转Json接口：通常与<see cref="T:XCSJ.LitJson.IJsonToMember"/>配合使用
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IMemberToJson.CanMemberToJson(System.Reflection.MemberInfo,System.String@,System.String@)">
            <summary>
            能否将成员转为Json
            </summary>
            <param name="memberInfo"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.IJsonToMember">
            <summary>
            Json转成员接口：通常与<see cref="T:XCSJ.LitJson.IMemberToJson"/>配合使用
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.IJsonToMember.CanJsonToMember(System.String)">
            <summary>
            能否将Json转为成员
            </summary>
            <param name="name"></param>
            <returns>如果本值返回True，将调用<see cref="M:XCSJ.LitJson.IJsonToMember.JsonToMember(System.String,System.String)"/>，并且不再做针对本名称对应成员信息对象的任何后续处理</returns>
        </member>
        <member name="M:XCSJ.LitJson.IJsonToMember.JsonToMember(System.String,System.String)">
            <summary>
            将Json转为成员
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:XCSJ.LitJson.JsonContext">
            <summary>
            Json上下文
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.ToObjectContext">
            <summary>
            转对象上下文
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ToObjectContext.objectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ToObjectContext.trySubclassFirst">
            <summary>
            优先尝试对象类型的子类
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.ToObjectContext.#ctor(System.Type,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="objectType"></param>
            <param name="trySubclassFirst"></param>
        </member>
        <member name="M:XCSJ.LitJson.ToObjectContext.Create(System.Type,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="objectType"></param>
            <param name="trySubclassFirst"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.ToObjectContext.Create(System.String,System.Type,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="context"></param>
            <param name="objectType"></param>
            <param name="trySubclassFirst"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.ToObjectContext.Create(System.String,System.String,System.Type,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="jsonString"></param>
            <param name="context"></param>
            <param name="objectType"></param>
            <param name="trySubclassFirst"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.ToJsonContext">
            <summary>
            转JSON上下文
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.JsonData">
            <summary>
            Json数据
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="boolean"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.Double)">
            <summary>
            构造
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.Int64)">
            <summary>
            构造
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.Object)">
            <summary>
            构造
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Implicit(System.Boolean)~XCSJ.LitJson.JsonData">
            <summary>
            由布尔隐式转换
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Implicit(System.Double)~XCSJ.LitJson.JsonData">
            <summary>
            由双精度隐式转换
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Implicit(System.Int32)~XCSJ.LitJson.JsonData">
            <summary>
            由整型隐式转换
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Implicit(System.Int64)~XCSJ.LitJson.JsonData">
            <summary>
            由长整型隐式转换
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Implicit(System.String)~XCSJ.LitJson.JsonData">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Explicit(XCSJ.LitJson.JsonData)~System.Boolean">
            <summary>
            隐式转换为布尔
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Explicit(XCSJ.LitJson.JsonData)~System.Double">
            <summary>
            隐式转换为双精度
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Explicit(XCSJ.LitJson.JsonData)~System.Int32">
            <summary>
            隐式转换为整型
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Explicit(XCSJ.LitJson.JsonData)~System.Int64">
            <summary>
            隐式转换为长整型
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonData.op_Explicit(XCSJ.LitJson.JsonData)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:XCSJ.LitJson.JsonWrapper`1">
            <summary>
            Json包装器：由Json字符串转为Json包装器对象时，Json字符串必须以[或{开头（即必须是数组或字典（对象）类型的），不能直接以数字（整形、浮点）、字符串、true/false、null等类型开头
            </summary>
            <typeparam name="T">Json包装器子类</typeparam>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._jsonType">
            <summary>
            Json类型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._boolValue">
            <summary>
            布尔值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._intValue">
            <summary>
            整形值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._longValue">
            <summary>
            长整型值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._doubleValue">
            <summary>
            双精度值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._arrayValue">
            <summary>
            数组值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._objectValue">
            <summary>
            对象值
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonWrapper`1._objectList">
            <summary>
            对象列表
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.arrayValue">
            <summary>
            列表（数组）值
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.objectValue">
            <summary>
            字典（对象）值
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.GetJsonType">
            <summary>
            获取Json类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.SetJsonType(XCSJ.LitJson.JsonType)">
            <summary>
            设置Json类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsBoolean">
            <summary>
            是布尔
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsInt">
            <summary>
            是整型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsLong">
            <summary>
            是长整型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsDouble">
            <summary>
            是双精度
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsArray">
            <summary>
            是数组
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsObject">
            <summary>
            是对象
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.IsString">
            <summary>
            是字符串
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.ToJson(System.Boolean)">
            <summary>
            转Json
            </summary>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.ToJson">
            <summary>
            转Json
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.ToJson(XCSJ.LitJson.JsonWriter)">
            <summary>
            转Json
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.EnsureCollection">
            <summary>
            确保是集合：要求是列表(数组)或字典
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.Count">
            <summary>
            数目
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.EnsureList">
            <summary>
            确保是列表(数组):如果已经是非数组的有效类型，会报出异常；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.MustList">
            <summary>
            必须是列表:不管之前是什么类型，结果必须是数组类型；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.OnBeforeToArray">
            <summary>
            当转为<see cref="F:XCSJ.LitJson.JsonType.Array"/>之前回调
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Add(System.Object)">
            <summary>
            添加对象:仅可在类型为数组（列表）时可用
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.EnsureDictionary">
            <summary>
            确保是字典（对象）
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.MustDictionary">
            <summary>
            必须是字典（对象）
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.OnBeforeToObject">
            <summary>
            当转为<see cref="F:XCSJ.LitJson.JsonType.Object"/>之前回调
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.Item(System.String)">
            <summary>
            键索引器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.LitJson.JsonWrapper`1.Item(System.Int32)">
            <summary>
            索引器
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.OnAfterModify(System.Int32,System.String,`0,`0)">
            <summary>
            当修改之后
            </summary>
            <param name="index">索引值</param>
            <param name="key">键</param>
            <param name="newValue">新值</param>
            <param name="oldValue">旧值</param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.ToJsonWrapper(System.Object)">
            <summary>
            转Json包装器
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Remove(System.String)">
            <summary>
            移除：当前为对象类型时，可以根据键移除对象
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Remove(System.Int32)">
            <summary>
            移除：当前为数组类型时，可以根据索引移除对象
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.RemoveAt(System.Int32)">
            <summary>
            移除：当前为列表（数组）或字典（对象）类型时，均可实现移除；
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Equals(`0)">
            <summary>
            相等
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.FromJson(System.String)">
            <summary>
            从Json字符串转为当前类型
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWrapper`1.Foreach(System.Action{`0,System.Int32,System.String,`0})">
            <summary>
            遍历:会遍历子级以及子级的子级；
            </summary>
            <param name="action">动作，参数依次为：父级对象（可能为null）、当前对象在父级对象中的索引（父级对象是Json数组时有效,如无效则参数值为-1）、当前对象在父级对象中的键值（父级对象是Json对象时有效,如无效则参数值为null）、当前对象(不可能为null)</param>
        </member>
        <member name="T:XCSJ.LitJson.JsonException">
            <summary>
            Json异常
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonException.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonException.#ctor(XCSJ.LitJson.ParserToken)">
            <summary>
            构造
            </summary>
            <param name="token"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonException.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            构造
            </summary>
            <param name="message"></param>
            <param name="inner_exception"></param>
        </member>
        <member name="T:XCSJ.LitJson.JsonMapper">
            <summary>
            Jsom映射器
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonMapper.object_metadata">
            <summary>
            对象元数据
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonMapper.type_properties">
            <summary>
            类型属性
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.AddArrayMetadata(System.Type)">
            <summary>
            处理字符串到数组（包括数组与队列）的情况！ 即ReadValue
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.AddObjectMetadata(System.Type)">
            <summary>
            处理字符串到对象的情况！即ReadValue
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.AddTypeProperties(System.Type)">
            <summary>
            处理将对象转化为数组时的情况！即WriteValue
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.DefaultConstructorFunc(System.Type)">
            <summary>
            默认构造器函数
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ReadValue(System.Type,XCSJ.LitJson.JsonReader,System.Func{System.Type,System.Object})">
            <summary>
            读值
            </summary>
            <param name="inst_type"></param>
            <param name="reader"></param>
            <param name="constructorFunc">构造器函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.WriteValue(System.Object,XCSJ.LitJson.JsonWriter,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            写值
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
            <param name="writer_is_private"></param>
            <param name="depth"></param>
            <param name="exportString">导出字符串</param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToJson(System.Object,System.Boolean)">
            <summary>
            转JSON:导出JSON字符串，功能扩展，添加新参数用于标识是否考虑新增加特性（如JsonAttribute等）；
            </summary>
            <param name="obj"></param>
            <param name="prettyPring"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToJson(System.Object,XCSJ.LitJson.JsonWriter)">
            <summary>
            转JSON:导出JSON字符串，功能扩展，添加新参数用于标识是否考虑新增加特性（如JsonAttribute等）；
            </summary>
            <param name="obj"></param>
            <param name="writer"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject(XCSJ.LitJson.JsonReader)">
            <summary>
            转对象
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject(System.IO.TextReader)">
            <summary>
            转对象
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject(System.String)">
            <summary>
            转对象
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject``1(XCSJ.LitJson.JsonReader,System.Func{System.Type,System.Object})">
            <summary>
            转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">读取器</param>
            <param name="constructorFunc">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject``1(System.IO.TextReader,System.Func{System.Type,System.Object})">
            <summary>
            转对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader">读取器</param>
            <param name="constructorFunc">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject``1(System.String,System.Func{System.Type,System.Object})">
            <summary>
            转对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="json">Json字符串</param>
            <param name="constructorFunc">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToObject(System.String,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            转对象
            </summary>
            <param name="json">Json字符串</param>
            <param name="type">对象类型</param>
            <param name="constructorFunc">构造函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToWrapper(XCSJ.LitJson.WrapperFactory,XCSJ.LitJson.JsonReader)">
            <summary>
            转封装类
            </summary>
            <param name="factory">工厂</param>
            <param name="reader">读取器</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.ToWrapper(XCSJ.LitJson.WrapperFactory,System.String)">
            <summary>
            转封装类
            </summary>
            <param name="factory"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.RegisterExporter``1(XCSJ.LitJson.ExporterFunc{``0})">
            <summary>
            注册导出函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exporter"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.RegisterExporter``1(System.Func{``0,System.String})">
            <summary>
            注册导出函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exporter"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.RegisterImporter``1(System.Func{System.String,``0})">
            <summary>
            注册导入函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="importer"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.RegisterImporter``2(XCSJ.LitJson.ImporterFunc{``0,``1})">
            <summary>
            注册导入函数
            </summary>
            <typeparam name="TJson"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="importer"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.UnregisterExporters">
            <summary>
            取消注册导出函数，将注册到的导出函数全部清除
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonMapper.UnregisterImporters">
            <summary>
            取消注册导入函数，将注册到的导入函数全部清除
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.JsonReader">
            <summary>
            Json读取器
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.AllowComments">
            <summary>
            允许评论
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.AllowSingleQuotedStrings">
            <summary>
            允许单引号字符串
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.EndOfInput">
            <summary>
            输入结束
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.EndOfJson">
            <summary>
            Json结束
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.Token">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonReader.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonReader.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="json_text"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            构造
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonReader.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonReader.Read">
            <summary>
            读取
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.LitJson.JsonToken">
            <summary>
            Json标记
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.ObjectStart">
            <summary>
            对象开始
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.ObjectEnd">
            <summary>
            对象结束
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.ArrayStart">
            <summary>
            数组开始
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.ArrayEnd">
            <summary>
            数组结束
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.Long">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.Double">
            <summary>
            双精度
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.Boolean">
            <summary>
            布尔
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonToken.Null">
            <summary>
            空
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.JsonType">
            <summary>
            Json类型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Array">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Long">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Double">
            <summary>
            双精度
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.JsonType.Boolean">
            <summary>
            布尔
            </summary>
        </member>
        <member name="T:XCSJ.LitJson.JsonWriter">
            <summary>
            Json写入器
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWriter.IndentValue">
            <summary>
            缩进值
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWriter.PrettyPrint">
            <summary>
            完美打印
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWriter.TextWriter">
            <summary>
            文本写入器
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.JsonWriter.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.#ctor(System.Text.StringBuilder)">
            <summary>
            构造
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            构造
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.IntToHex(System.Int32,System.Char[])">
            <summary>
            整型转16进制
            </summary>
            <param name="n"></param>
            <param name="hex"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.Boolean)">
            <summary>
            写入
            </summary>
            <param name="boolean"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.Decimal)">
            <summary>
            写入
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.Double)">
            <summary>
            写入
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.Int32)">
            <summary>
            写入
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.Int64)">
            <summary>
            写入
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.String)">
            <summary>
            写入
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.Write(System.UInt64)">
            <summary>
            写入
            </summary>
            <param name="number"></param>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.WriteArrayEnd">
            <summary>
            写入数组结束
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.WriteArrayStart">
            <summary>
            写入数组开始
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.WriteObjectEnd">
            <summary>
            写入对象结束
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.WriteObjectStart">
            <summary>
            写入对象开始
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.JsonWriter.WritePropertyName(System.String)">
            <summary>
            写入属性名
            </summary>
            <param name="property_name"></param>
        </member>
        <member name="T:XCSJ.LitJson.ObjectMetadata">
            <summary>
            对象元数据
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.ObjectMetadata.is_dictionary">
            <summary>
            是字典
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ObjectMetadata.IsDictionary">
            <summary>
            是字典
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.ObjectMetadata.element_type">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ObjectMetadata.ElementType">
            <summary>
            元素类型
            </summary>
        </member>
        <member name="F:XCSJ.LitJson.ObjectMetadata.properties">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ObjectMetadata.Properties">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ObjectMetadata.importAttribute">
            <summary>
            导入特性
            </summary>
        </member>
        <member name="P:XCSJ.LitJson.ObjectMetadata.objectType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.ObjectMetadata.SetObjectType(System.Type)">
            <summary>
            设置对象类型
            </summary>
            <param name="objectType"></param>
        </member>
        <member name="T:XCSJ.LitJson.PropertyMetadata">
            <summary>
            属性元数据
            </summary>
        </member>
        <member name="M:XCSJ.LitJson.PropertyMetadata.Add(System.Collections.Generic.IList{XCSJ.LitJson.PropertyMetadata},System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            在导出JSON字符串(即对象 --> JSON字符串)时，即Export时调用；
            </summary>
            <param name="list"></param>
            <param name="memberInfo"></param>
            <param name="isField"></param>
        </member>
        <member name="M:XCSJ.LitJson.PropertyMetadata.Add(System.Collections.Generic.IDictionary{System.String,XCSJ.LitJson.PropertyMetadata},System.Reflection.MemberInfo,System.Boolean,System.Type)">
            <summary>
            导入JSON字符串(即JSON字符串 --> 对象)时调用，即Import时调用；
            </summary>
            <param name="dictionary"></param>
            <param name="memberInfo"></param>
            <param name="isField"></param>
            <param name="type"></param>
        </member>
        <member name="T:XCSJ.ELogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Debug">
            <summary>
            调试信息级别；程序测试中使用输出大量测试信息;
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Info">
            <summary>
            普通信息级别；用户的普通操作信息；
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Warning">
            <summary>
            警告信息级别；发生的特定情况的错误情况，不会影响程序整体逻辑或程序崩溃；
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Error">
            <summary>
            错误信息级别；
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Exception">
            <summary>
            程序异常捕获或是程序逻辑错误的BUG，会产生导致程序崩溃或是导致程序逻辑混乱的问题等；
            </summary>
        </member>
        <member name="F:XCSJ.ELogLevel.Fatal">
            <summary>
            致命
            </summary>
        </member>
        <member name="T:XCSJ.ILogInfo">
            <summary>
            日志信息接口
            </summary>
        </member>
        <member name="P:XCSJ.ILogInfo.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:XCSJ.ILogInfo.level">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:XCSJ.ILogInfo.dateTime">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:XCSJ.ILogInfo.tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:XCSJ.ILogInfo.info">
            <summary>
            信息
            </summary>
        </member>
        <member name="T:XCSJ.Log">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:XCSJ.Log.GetIndex">
            <summary>
            获取索引：每次调用，索引值累加1；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Log.ResetIndex">
            <summary>
            重置索引为0
            </summary>
            <returns>重置为0之前的索引值</returns>
        </member>
        <member name="F:XCSJ.Log.DefaultTag">
            <summary>
            默认标签
            </summary>
        </member>
        <member name="E:XCSJ.Log.onLog">
            <summary>
            当有日志信息时回调
            </summary>
        </member>
        <member name="M:XCSJ.Log.Debug(System.Object,System.String)">
            <summary>
            调试
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.DebugFormat(System.String,System.Object[])">
            <summary>
            格式化调试
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.DebugFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化调试
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Info(System.Object,System.String)">
            <summary>
            信息
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.InfoFormat(System.String,System.Object[])">
            <summary>
            格式化信息
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.InfoFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化信息
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Warning(System.Object,System.String)">
            <summary>
            警告
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.WarningFormat(System.String,System.Object[])">
            <summary>
            格式化警告
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.WarningFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化警告
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Error(System.Object,System.String)">
            <summary>
            错误
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.ErrorFormat(System.String,System.Object[])">
            <summary>
            格式化错误
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.ErrorFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化错误
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Exception(System.Object,System.String)">
            <summary>
            异常
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.ExceptionFormat(System.String,System.Object[])">
            <summary>
            格式化异常
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.ExceptionFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化异常
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Fatal(System.Object,System.String)">
            <summary>
            致命
            </summary>
            <param name="log"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.FatalFormat(System.String,System.Object[])">
            <summary>
            格式化致命
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.FatalFormatWithTag(System.String,System.String,System.Object[])">
            <summary>
            带标签的格式化致命
            </summary>
            <param name="logTag"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:XCSJ.Log.Output(System.String,XCSJ.ELogLevel,System.String)">
            <summary>
            输出
            </summary>
            <param name="log"></param>
            <param name="logType"></param>
            <param name="logTag"></param>
        </member>
        <member name="M:XCSJ.Log.DefaultLogHandle(XCSJ.ILogInfo)">
            <summary>
            默认日志处理
            </summary>
            <param name="logInfo"></param>
        </member>
        <member name="T:XCSJ.LogSystem.LogServer">
            <summary>
            日志服务，用于将日志信息输出到磁盘文件
            </summary>
        </member>
        <member name="P:XCSJ.LogSystem.LogServer.fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:XCSJ.LogSystem.LogServer.streamWriter">
            <summary>
            流写入器
            </summary>
        </member>
        <member name="P:XCSJ.LogSystem.LogServer.fullPath">
            <summary>
            全路径
            </summary>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.GetDefaultLogFolder">
            <summary>
            默认日志文件夹
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.StartupInDefaultLogFolder">
            <summary>
            在默认日志文件夹启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.Startup(System.String)">
            <summary>
            启动
            </summary>
            <param name="fullPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.Startup(XCSJ.Algorithms.ParamList)">
            <summary>
            需要传入Log文件的全路径,即fullPath
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.LogSystem.LogServer.LogHandle(XCSJ.ILogInfo)">
            <summary>
            日志处理
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:XCSJ.Scripts.StringAnalysisResult">
            <summary>
            字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.StringAnalysisResult.originalString">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.StringAnalysisResult.originalStringTrim">
            <summary>
            原始字符串修剪:对<see cref="P:XCSJ.Scripts.StringAnalysisResult.originalString"/>移除开头结尾的空白字符后的字符串；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.StringAnalysisResult.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.StringAnalysisResult.error">
            <summary>
            错误：字符串分析结果错误的原因
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.StringAnalysisResult.errorIndex">
            <summary>
            错误索引：字符串分析结果错误时针对原始字符串修剪<see cref="P:XCSJ.Scripts.StringAnalysisResult.originalStringTrim"/>中发生错误的可能的下标索引信息
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.StringAnalysisResult.SetError(System.String,System.Int32)">
            <summary>
            设置错误
            </summary>
            <param name="error"></param>
            <param name="errorIndex"></param>
        </member>
        <member name="M:XCSJ.Scripts.StringAnalysisResult.GetErrorInfo">
            <summary>
            获取错误信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.AnalysisNode">
            <summary>
            分析节点
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ExpressionStringAnalysisResult">
            <summary>
            表达式字符串分析结果: 表达式字符串的完整格式（即格式化表达式字符串）为：{ 表达式类型字符串 : 表达式计算字符串 },也可理解为{Key:Value}的{键:值}对形式；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.hasMarker">
            <summary>
            有标识符
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressionTypeString">
            <summary>
            表达式类型字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressionTypeVarStringAnalysisResult">
            <summary>
            表达式类型变量字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.hasExpressionTypeString">
            <summary>
            有表达式类型字符串：原始字符串中有明确的表达式类型字符串，即存在以:间隔的顶级字符串；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressions">
            <summary>
            表达式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.rpnExpressions">
            <summary>
            RPN逆波兰表达式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressionCalculateString">
            <summary>
            表达式计算字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionStringAnalysisResult._expressionString">
            <summary>
            表达式字符串： {表达式类型字符串:表达式计算字符串}
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressionString">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionStringAnalysisResult._expressionStringWithoutMarker">
            <summary>
            表达式字符串无首位左右标记符： 表达式类型字符串:表达式计算字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.expressionStringWithoutMarker">
            <summary>
            表达式字符串无首位左右标记符
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.rpnExpressionCalculateStrings">
            <summary>
            RPN表达式字符串数组
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.isValid">
            <summary>
            标识是否是的表达式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.key">
            <summary>
            键：即表达式类型字符串
            </summary>        
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.value">
            <summary>
            值：即表达式计算字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionStringAnalysisResult.onlyConstantValue">
            <summary>
            只有常量值
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculate">
            <summary>
            用于模拟运算表达式的准确性
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculate(System.Func{System.String,System.String,XCSJ.Scripts.Operator,System.String},System.String@)">
            <summary>
            尝试计算
            </summary>
            <param name="calculateFunc"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculate``1(System.Func{XCSJ.Scripts.Operand,``0},System.Func{``0,``0,XCSJ.Scripts.Operator,``0},``0@)">
            <summary>
            尝试计算
            </summary>
            <typeparam name="TOperand"></typeparam>
            <param name="convertFunc"></param>
            <param name="calculateFunc"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpressionByString(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IExpressionCalculater,System.String@)">
            <summary>
            尝试计算表达式通过字符串
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionCalculater">表达式计算器</param>
            <param name="calculateResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpressionByDouble(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IExpressionCalculater,System.Double@)">
            <summary>
            尝试计算表达式通过双精度
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionCalculater">表达式计算器</param>
            <param name="calculateResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpressionByLong(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IExpressionCalculater,System.Int64@)">
            <summary>
            尝试计算表达式通过长整型
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionCalculater">表达式计算器</param>
            <param name="calculateResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.XCSJ#Scripts#IExpressionCalculater#TryCalculateExpression(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ExpressionStringAnalysisResult,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionStringAnalysisResult">表达式字符串分析结果</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算，即忽略表达式字符串分析结果中的表达式类型字符串</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算，即忽略表达式字符串分析结果中的表达式类型字符串；如果为null,则使用表达式字符串分析结果中的表达式类型字符串；如果为空字符串，则使用默认表达式类型字符串<see cref="P:XCSJ.Scripts.ExpressionHelper.DefaultExpressionTypeString"/>；</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IExpressionCalculater,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionCalculater"></param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算</param>
            <param name="calculateResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculate(XCSJ.Scripts.ExpressionMember[],System.Func{System.String,System.String,XCSJ.Scripts.Operator,System.String},System.String@)">
            <summary>
            尝试计算
            </summary>
            <param name="rpnExpressions"></param>
            <param name="calculateFunc"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryCalculate``1(XCSJ.Scripts.ExpressionMember[],System.Func{XCSJ.Scripts.Operand,``0},System.Func{``0,``0,XCSJ.Scripts.Operator,``0},``0@)">
            <summary>
            尝试计算
            </summary>
            <param name="rpnExpressions">RPN表达式数据</param>
            <param name="convertFunc">转换函数</param>
            <param name="calculateFunc">计算函数</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryParse(System.String,XCSJ.Scripts.ExpressionStringAnalysisResult@)">
            <summary>
            尝试分析
            </summary>
            <param name="expressionString"></param>
            <param name="expressionStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.TryParseNoCache(System.String,XCSJ.Scripts.ExpressionStringAnalysisResult@)">
            <summary>
            无缓存尝试分析
            </summary>
            <param name="expressionString"></param>
            <param name="expressionStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionStringAnalysisResult.ToRPN(XCSJ.Scripts.ExpressionMember[])">
            <summary>
            将表达式数组转为RPN(逆波兰式)数组
            </summary>
            <param name="expressions"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ExpressionMember">
            <summary>
            表达式成员
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionMember.originalString">
            <summary>
            原始字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionMember.isOperator">
            <summary>
            是运算符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionMember.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionMember.ToExpressionCalculateString">
            <summary>
            转表达式计算字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionMember.Priority">
            <summary>
            优先级
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionMember.op_Implicit(XCSJ.Scripts.ExpressionMember)~System.String">
            <summary>
            隐式转换为字符串
            </summary>
            <param name="expressionMember"></param>
        </member>
        <member name="T:XCSJ.Scripts.Operand">
            <summary>
            操作数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Operand.Empty">
            <summary>
            空操作数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Operand.isOperator">
            <summary>
            是运算符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Operand.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Operand.paramStringType">
            <summary>
            参数字符串类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Operand.expressionStringAnalysisResult">
            <summary>
            表达式字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Operand.varStringAnalysisResult">
            <summary>
            变量字符串分析结果
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.Operator">
            <summary>
            运算符
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Operator.isOperator">
            <summary>
            是运算符
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Operator.visable">
            <summary>
            可见的
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Operator.ToExpressionCalculateString">
            <summary>
            转表达式计算字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.OperatorHelper">
            <summary>
            运算符组手
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.OperatorHelper.operatorPriority">
            <summary>
            运算符优先级
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.OperatorHelper.LeftParentheses">
            <summary>
            左圆括号：左小括号
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.OperatorHelper.RightParentheses">
            <summary>
            右圆括号：右小括号
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.OperatorHelper.#cctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.OperatorHelper.IsOperator(System.String)">
            <summary>
            是运算符
            </summary>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.OperatorHelper.IsOperator(System.Char)">
            <summary>
            是运算符
            </summary>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.OperatorHelper.Priority(System.String)">
            <summary>
            优先级
            </summary>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.OperatorHelper.IsHigher(System.String,System.String)">
            <summary>
            比较运算符的优先级；
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EBool">
            <summary>
            脚本参数布尔类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool.Yes">
            <summary>
            是
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool.No">
            <summary>
            否
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool.Switch">
            <summary>
            切换
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool.None">
            <summary>
            无:保持原值,不做修改;即无(None)处理
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EBool2">
            <summary>
            脚本参数布尔类型2
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool2.Yes">
            <summary>
            是
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EBool2.No">
            <summary>
            否
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EGrammarType">
            <summary>
            语法类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Common">
            <summary>
            普通
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.If">
            <summary>
            如果
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.ElseIf">
            <summary>
            否则如果
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Else">
            <summary>
            否则
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.EndIf">
            <summary>
            结束
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Loop">
            <summary>
            循环开始
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.EndLoop">
            <summary>
            循环结束
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Break">
            <summary>
            循环跳出
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Continue">
            <summary>
            循环继续
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Return">
            <summary>
            逻辑返回
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Begin">
            <summary>
            开始标识符 --> 本语法规则之后的脚本字符串不会被执行
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.End">
            <summary>
            结束标识符 --> 本语法规则之前的脚本字符串不会被执行
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Note">
            <summary>
            注释，不会被执行的脚本命令
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EGrammarType.Category">
            <summary>
            分类 当前脚本标识一个脚本分类
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EParamType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.StandardString">
            <summary>
            标准字符串：符合程序中变量名、函数名的字符串；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Combo">
            <summary>
            组合
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.File">
            <summary>
            文件: 打开文件路径
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.SaveFile">
            <summary>
            保存文件: 保存文件路径
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.OpenFolder">
            <summary>
            打开文件夹
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.SaveFolder">
            <summary>
            保存文件夹
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.UserDefineFun">
            <summary>
            用户自定义函数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GlobalVariableName">
            <summary>
            全局变量名
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Variable">
            <summary>
            变量：全局变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Bool2">
            <summary>
            布尔2
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Bool">
            <summary>
            布尔
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.IntSlider">
            <summary>
            整型滑动条
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.IntPopup">
            <summary>
            整型弹出框
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Long">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Float">
            <summary>
            浮点数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.FloatSlider">
            <summary>
            浮点数滑动条
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GameObject">
            <summary>
            游戏对象
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.ComponentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GameObjectComponent">
            <summary>
            游戏对象组件
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GameObjectSciptEvent">
            <summary>
            游戏对象脚本事件
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GameObjectSciptEventFunction">
            <summary>
            游戏对象脚本事件函数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.GameObjectSciptEventVariable">
            <summary>
            游戏对象脚本事件变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.ScriptEventType">
            <summary>
            脚本事件类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Rect">
            <summary>
            矩形
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Vector2">
            <summary>
            二维向量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Vector3">
            <summary>
            三维向量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Vector4">
            <summary>
            四维向量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.MinMaxSlider">
            <summary>
            最小最大滑动条
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Bounds">
            <summary>
            包围盒
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.KeyCode">
            <summary>
            键码
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.MouseButton">
            <summary>
            鼠标按钮
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.RuntimePlatform">
            <summary>
            运行时平台
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.UnityAssetObject">
            <summary>
            Unity资产对象
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.UnityAssetObjectType">
            <summary>
            Unity资产对象类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.CoordinateType">
            <summary>
            坐标系类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.TextAnchor">
            <summary>
            文本锚点
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Dictionary">
            <summary>
            字典
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Vector2Int">
            <summary>
            整型二维向量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Vector3Int">
            <summary>
            整型三维向量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.RectInt">
            <summary>
            整型矩形
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.BoundsInt">
            <summary>
            整型包围盒
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamType.Enum">
            <summary>
            枚举:支持用户定义的各种枚举类型
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ExpressionHelper">
            <summary>
            表达式组手：表达式由操作数与运算符构成
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.Escape">
            <summary>
            转义字符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.LeftStringMarker">
            <summary>
            左字符串标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.LeftStringMarkerNo">
            <summary>
            左字符串标记符非
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.RightStringMarker">
            <summary>
            右字符串标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.RightStringMarkerNo">
            <summary>
            右字符串标记符非
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.StringType">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.IntType">
            <summary>
            整型类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.LeftIntMarker">
            <summary>
            左整数标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.RightIntMarker">
            <summary>
            右整数标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.TypeDelimiterChar">
            <summary>
            类型分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.TypeDelimiter">
            <summary>
            类型分隔符
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.FormatExpressionString(System.String,System.String,System.Boolean)">
            <summary>
            格式化表达式字符串
            </summary>
            <param name="expressionTypeString">表达式类型字符串</param>
            <param name="expressionCalculateString">表达式计算字符串</param>
            <param name="addMarker">添加标记符</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.Int64,System.Int64,XCSJ.Scripts.Operator)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.Int64,System.Int64,System.String)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.Double,System.Double,XCSJ.Scripts.Operator)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.Double,System.Double,System.String)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.String,System.String,XCSJ.Scripts.Operator)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.Calculate(System.String,System.String,System.String)">
            <summary>
            计算
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ExpressionHelper.DefaultExpressionType">
            <summary>
            默认的表达式类型字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ExpressionHelper.DefaultExpressionTypeString">
            <summary>
            默认可处理的表达式类型字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.DefaultExpressionTypeStrings">
            <summary>
            默认可处理的表达式类型数组
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.ToExpressionTypeString_Name(System.String)">
            <summary>
            转表达式字符串的名称
            </summary>
            <param name="expressionTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.ToExpressionTypeString_Alias(System.String)">
            <summary>
            转表达式字符串的别名
            </summary>
            <param name="expressionTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.ToExpressionType(System.String)">
            <summary>
            转表达式类型
            </summary>
            <param name="expressionTypeString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.ToExpressionTypeString(XCSJ.Scripts.EExpressionType)">
            <summary>
            转表达式类型字符串
            </summary>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ExpressionHelper.ToExpressionTypeString_Name(XCSJ.Scripts.EExpressionType)">
            <summary>
            转表达式字符串的名称
            </summary>
            <param name="expressionType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EExpressionType">
            <summary>
            表达式类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EExpressionType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EExpressionType.Int64">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EExpressionType.Double">
            <summary>
            双精度
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.IFunction">
            <summary>
            函数接口
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IFunction.funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IFunction.Item(System.Int32)">
            <summary>
            通过索引获取脚本字符串
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.IFunction.count">
            <summary>
            脚本字符串列表数量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IFunction.GetName">
            <summary>
            获取函数名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IFunction.GetNamePath">
            <summary>
            获取名称路径
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EDisplayMode">
            <summary>
            显示模式
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EDisplayMode.List">
            <summary>
            列表
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EDisplayMode.Text">
            <summary>
            文本模式
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.Function`1">
            <summary>
            函数
            </summary>
            <typeparam name="TScriptString"></typeparam>
        </member>
        <member name="F:XCSJ.Scripts.Function`1.ScriptStringList">
            <summary>
            脚本字符串列表
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Function`1.scriptStringList">
            <summary>
            脚本字符串列表：如果希望迭代遍历所有存储的脚本字符串对象，推荐使用<see cref="M:XCSJ.Scripts.Function`1.GetScriptStrings"/>函数完成，也可直接使用<see cref="F:XCSJ.Scripts.Function`1.ScriptStringList"/>字段进行处理；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.GetScriptStrings">
            <summary>
            获取脚本字符串列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Function`1.Item(System.Int32)">
            <summary>
            通过索引获取脚本字符串
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Function`1.count">
            <summary>
            脚本字符串列表数量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.Foreach(System.Action{XCSJ.Scripts.ScriptString})">
            <summary>
            遍历
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.ToScriptStringInternal(System.String)">
            <summary>
            转脚本字符串
            </summary>
            <param name="scriptString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.ToScriptString(System.String)">
            <summary>
            转脚本字符串
            </summary>
            <param name="scriptString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.Add(System.String)">
            <summary>
            添加
            </summary>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.Insert(System.Int32,System.String)">
            <summary>
            插入
            </summary>
            <param name="index"></param>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function`1.RemoveAt(System.Int32)">
            <summary>
            通过索引移除
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:XCSJ.Scripts.Function">
            <summary>
            函数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Function.name">
            <summary>
            脚本列表类的名称
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Function.Expand">
            <summary>
            界面是否展开，默认展开true
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Function.Enable">
            <summary>
            脚本是否生效（即存在性）；默认创建即存在true；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Function.Active">
            <summary>
            脚本是否被激活，默认为激活true；脚本生效时，本激活项才会起作用；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Function._displayMode">
            <summary>
            显示模式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Function.scriptStringList">
            <summary>
            脚本字符串列表：如果希望迭代遍历所有存储的脚本字符串对象，推荐使用<see cref="M:XCSJ.Scripts.Function.GetScriptStrings"/>函数完成；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function.GetScriptStrings">
            <summary>
            获取脚本字符串列表
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Function.Item(System.Int32)">
            <summary>
            通过索引获取脚本字符串
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.Function.count">
            <summary>
            脚本字符串列表数量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Function.funcCollectionHost">
            <summary>
            函数集合宿主
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Function.funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function.#ctor(System.Collections.Generic.IList{System.String})">
            <summary>
            构造函数
            </summary>
            <param name="scriptStrings"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.#ctor(System.Collections.Generic.IList{XCSJ.Scripts.ScriptString})">
            <summary>
            构造函数
            </summary>
            <param name="scriptStrings"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.Foreach(System.Action{XCSJ.Scripts.ScriptString})">
            <summary>
            遍历
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.ToScriptString(System.String)">
            <summary>
            转脚本字符串
            </summary>
            <param name="scriptString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.Add(System.String)">
            <summary>
            添加
            </summary>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.Insert(System.Int32,System.String)">
            <summary>
            插入
            </summary>
            <param name="index"></param>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function.RemoveAt(System.Int32)">
            <summary>
            通过索引移除
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.MarkDirty">
            <summary>
            标记脏：因脚本字符串对象是会被预编译的，在脚本字符串发生修改后须标记脏，便于对脚本字符串执行重编译！
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Function.CompareTo(System.Object)">
            <summary>
            与对象比较
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.GetName">
            <summary>
            获取函数名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.UniqueName">
            <summary>
            唯一名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.GetNamePath">
            <summary>
            获取名称路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.Clone``1">
            <summary>
            克隆
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Function.Merge(XCSJ.Scripts.Function)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.Merge(System.Object)">
            <summary>
            合并
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:XCSJ.Scripts.Function.SetFuncCollectionHost(XCSJ.Scripts.IFuncCollectionHost)">
            <summary>
            设置函数集合宿主
            </summary>
            <param name="funcCollectionHost"></param>
        </member>
        <member name="T:XCSJ.Scripts.EVarScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Invalid">
            <summary>
            无效变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Global">
            <summary>
            全局变量，如： $Var$ 、$Var[]$、 $Var/$
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Local">
            <summary>
            局部变量，如： $Var$ 、$Var[]$、 $Var/$
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Static">
            <summary>
            静态变量，如： $Var# 、$Var[]#、 $Var/#
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.App">
            <summary>
            App变量，如： $Var@ 、$Var[]@、 $Var/@
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Function">
            <summary>
            函数变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarScope.Reference">
            <summary>
            引用变量
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EVarType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarType.Invalid">
            <summary>
            无效：无效变量类型，也可表示未做变量类型分析前的任意变量类型；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarType.String">
            <summary>
            字符串：字符串型变量类型，可用于存储字符串、数字、布尔（真假）等类型；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarType.Array">
            <summary>
            数组：数组型变量类型，可以理解为列表型变量类型；以连续值形式存储数据的结构类型；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarType.Dictionary">
            <summary>
            字典：字典型变量类型，可以理解为对象型变量类型；以键与值形式存储数据的结构类型；
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EEndFlag">
            <summary>
            结束标记
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.DictionaryDot">
            <summary>
            以.结尾
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.DictionarySlash">
            <summary>
            以/结尾，主要用于兼容老版本
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.ArrayLeft">
            <summary>
            以[结尾
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.ArrayRight">
            <summary>
            以]结尾，可能是正常的数组结尾
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EEndFlag.Factorial">
            <summary>
            以!结尾，表示动态变量的递归性；
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.EVarHierarchyDelimiter">
            <summary>
            变量层级分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarHierarchyDelimiter.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarHierarchyDelimiter.Dot">
            <summary>
            点
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EVarHierarchyDelimiter.Slash">
            <summary>
            斜杠
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.HierarchyKey">
            <summary>
            层级键：数组或字典时中间层级信息
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.varStringAnalysisResult">
            <summary>
            变量字符串分析结果对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.array">
            <summary>
            是否是数组:标识当前对象是数组或列表中的一项成员元素
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.index">
            <summary>
            层级索引：有效的层级索引值范围为[1,数组长度](提供正向索引)或[-数组长度,-1](提供逆向索引，即由后向前索引，如-1表示数组中最后一个元素)，仅针对数组类型时有效；0为无效索引；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.isValidIndex">
            <summary>
            有效层级索引:仅在是数组时有效；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.keyExpressionStringAnalysisResult">
            <summary>
            针对<see cref="P:XCSJ.Scripts.HierarchyKey.key"/>尝试进行表达式字符串分析结果对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.keyVarStringAnalysisResult">
            <summary>
            针对<see cref="P:XCSJ.Scripts.HierarchyKey.key"/>尝试进行变量字符串分析结果对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.isDynamic">
            <summary>
            是动态的：即是变量或是表达式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.key">
            <summary>
            键名：层级键的名称；变量字符串或经过格式化的键名
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.formatName">
            <summary>
            格式化名称
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.maybeIsExtension">
            <summary>
            可能是扩展：即当前扩展键，是数组、不是有效索引
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.isExtension">
            <summary>
            是扩展：即当前扩展键，是数组、不是有效索引、不是变量、不是表达式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyKey.hasDelimiter">
            <summary>
            有分隔符
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.TryGetProgramIndex(System.Int32,System.Int32@)">
            <summary>
            尝试获取程序索引
            </summary>
            <param name="arrayLength"></param>
            <param name="programIndex">程序索引，以0开始的程序索引值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.#ctor(System.Int32,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex">层级索引或程序索引</param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.#ctor(XCSJ.Scripts.VarStringAnalysisResult,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="varStringAnalysisResult"></param>
            <param name="array"></param>
            <param name="hierarchyIndex"></param>
            <param name="hasDelimiter"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.#ctor(XCSJ.Scripts.VarStringAnalysisResult,System.Boolean,System.String,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="varStringAnalysisResult"></param>
            <param name="array"></param>
            <param name="key"></param>
            <param name="hasDelimiter"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyKey.Create(XCSJ.Scripts.VarStringAnalysisResult,System.Boolean,System.String,System.Boolean)">
            <summary>
            创建
            </summary>
            <param name="varStringAnalysisResult"></param>
            <param name="array"></param>
            <param name="keyString"></param>
            <param name="hasDelimiter"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VarStringAnalysisResult">
            <summary>
            变量字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.endFlag">
            <summary>
            结束标记
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.needToObject">
            <summary>
            需要转对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.needToVarType">
            <summary>
            需要转变量类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.needRecursiveDynamic">
            <summary>
            需要递归获取动态变量：即处理动态变量的动态变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.varType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VarStringAnalysisResult._varName">
            <summary>
            变量名
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.varName">
            <summary>
            变量名
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.isSystemVariable">
            <summary>
            是系统变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.isDynamic">
            <summary>
            是动态变量：即层级键列表中存在符合变量规则的层级键
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.SetDynamic">
            <summary>
            设置为动态变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.keys">
            <summary>
            层级键列表
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.extensionHierarchyKey">
            <summary>
            扩展层级键：返回的层级键列表中存在最后一个并且是扩展层级键的对象；如果返回null，则说明必定没有扩展层级键；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.extensionHierarchyKeyValid">
            <summary>
            扩展层级键有效
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.extensionHierarchyKeyMaybe">
            <summary>
            扩展层级键可能：返回的层级键列表中存在最后一个并且是可能扩展层级键的对象；如果返回null，则说明必定没有扩展层级键；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.extensionHierarchyKeyMaybeValid">
            <summary>
            扩展层级键可能有效
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.AddKey(System.Boolean,System.String,System.Boolean)">
            <summary>
            添加层级键
            </summary>
            <param name="array">数组True或字典False</param>
            <param name="keyString">键字符串，不携带分割字符串，即数组时没有[]，字典时没有{},只有其中的纯内容</param>
            <param name="hasDelimiter">是否添加分隔符，即数组时有无[]，字典时有无{}</param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.VarStringAnalysisResult._rootVarString">
            <summary>
            根变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.rootVarString">
            <summary>
            根变量字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VarStringAnalysisResult._varString">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.varString">
            <summary>
            变量字符串：以.为层级分隔符，数组前不加层级分隔符；符合常规程序的多层级变量字符串写法；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VarStringAnalysisResult._varHierarchyString">
            <summary>
            变量层级字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarStringAnalysisResult.varHierarchyString">
            <summary>
            变量层级字符串：以/为层级分隔符，并且数组前也具有层级分隔符；多用于界面显示等特殊场合；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.GetFormatVarString(System.Boolean,XCSJ.Scripts.EVarHierarchyDelimiter,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取格式化变量字符串
            </summary>
            <param name="needArrayHierarchy">需要数组层级</param>
            <param name="varHierarchyDelimiter">变量层级分隔符</param>
            <param name="appendVarScopeString">追加变量作用域字符串</param>
            <param name="appendEndFlag">追加结尾标识符</param>
            <param name="appendVarTypeFlag">追加变量类型标识符</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.TryRenameAndParse(System.String,XCSJ.Scripts.VarStringAnalysisResult@)">
            <summary>
            尝试重命名变量名并分析：仅修改变量名，保留原有层级键信息；不会修改当前分析结果对象，会生成新的变量字符串分析结果对象；
            </summary>
            <param name="newVarName"></param>
            <param name="newVarStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.TryParse(System.String,XCSJ.Scripts.VarStringAnalysisResult@)">
            <summary>
            尝试分析
            </summary>
            <param name="varString"></param>
            <param name="varStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarStringAnalysisResult.TryParseNoCache(System.String,XCSJ.Scripts.VarStringAnalysisResult@)">
            <summary>
            无缓存尝试分析
            </summary>
            <param name="varString"></param>
            <param name="varStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IScriptStringContext">
            <summary>
            脚本字符串上下文
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.IHierarchyVar">
            <summary>
            层级变量接口
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.varType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.name">
            <summary>
            名称：层级变量的名称，属于格式化名称；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.varString">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.varHierarchyString">
            <summary>
            变量层级字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.originalValue">
            <summary>
            原始值
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.parent">
            <summary>
            父级变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.isArrayElement">
            <summary>
            是数组元素：标识当前对象是数组或列表中的一项成员元素
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IHierarchyVar.isValid">
            <summary>
            是有效的
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.SetInvalid">
            <summary>
            设置无效
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetChildCount(System.Int32@)">
            <summary>
            尝试获取子级变量数目
            </summary>
            <param name="childCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TrySetChildCount(System.Int32)">
            <summary>
            尝试设置子级变量数目：仅针对列表（数组）类型时有效;末尾操作，多删除，少补空字符串；
            </summary>
            <param name="childCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryAddChild(System.String,System.Int32@)">
            <summary>
            尝试添加子级变量：会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="varValue"></param>
            <param name="programIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryAddChildren(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            尝试添加子级变量：会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="varValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetOrAddSetChild(System.Int32,System.Boolean,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加设置子级变量：有则获取、无则添加并设置值；在无则添加时，会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex"></param>
            <param name="value"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetOrAddSetChild(System.String,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加设置子级变量：有则获取、无则添加并设置值；在无则添加时，会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Object"/>类型；
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetChild(System.Int32,System.Boolean,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取子级变量
            </summary>
            <param name="index">索引</param>
            <param name="hierarchyIndexOrProgramIndex">层级索引或程序索引</param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetChild(System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取子级变量
            </summary>
            <param name="key"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetChild(System.Func{System.Int32,XCSJ.Scripts.IHierarchyVar,System.Boolean},XCSJ.Scripts.IHierarchyVar@,System.Int32@)">
            <summary>
            尝试获取子级变量：仅针对数组时有效
            </summary>
            <param name="matchFunc">匹配函数：参数依次为：程序索引、子级层级变量，返回表示是否匹配</param>
            <param name="hierarchyVar"></param>
            <param name="programIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryGetChild(System.Func{System.String,XCSJ.Scripts.IHierarchyVar,System.Boolean},XCSJ.Scripts.IHierarchyVar@,System.String@)">
            <summary>
            尝试获取子级变量：仅针对字典时有效
            </summary>
            <param name="matchFunc">匹配函数：参数依次为：键值、子级层级变量，返回表示是否匹配</param>
            <param name="hierarchyVar"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TrySetValue(System.Object,XCSJ.Scripts.EVarType)">
            <summary>
            尝试设置值：优先尝试将值转为期望类型，然后尝试设置值；如果转换后不符合期望类型，则设置值失败；
            </summary>
            <param name="value"></param>
            <param name="varType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TrySetVarType(XCSJ.Scripts.EVarType,System.Object)">
            <summary>
            尝试设置变量类型：优先转换变量类型，然后尝试设置值；不管值设置成功与否，变量类型会优先设置；
            </summary>
            <param name="varType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryRemoveChild(System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试移除子级变量
            </summary>
            <param name="key"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryRemoveChild(System.Int32,System.Boolean,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试移除子级变量
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.TryClearChildren">
            <summary>
            尝试清空子级变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.UpdateHierarchy">
            <summary>
            更新层级：用于更新层级变量的各层级信息
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.Foreach(System.Action{XCSJ.Scripts.IHierarchyVar,System.Int32,System.String,XCSJ.Scripts.IHierarchyVar})">
            <summary>
            遍历:会遍历子级以及子级的子级；
            </summary>
            <param name="action">动作，参数依次为：父级对象（可能为null）、当前对象在父级对象中的程序索引（如无效则参数值为-1）、当前对象在父级对象中的键值（如无效则参数值为null）、当前对象(不可能为null)</param>
        </member>
        <member name="M:XCSJ.Scripts.IHierarchyVar.ToJson(System.Boolean)">
            <summary>
            转JSON
            </summary>
            <param name="prettyPrint"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.HierarchyVarEvent">
            <summary>
            层级变量事件
            </summary>
        </member>
        <member name="E:XCSJ.Scripts.HierarchyVarEvent.onChanged">
            <summary>
            当变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarEvent.CallChangedEvent(XCSJ.Scripts.IHierarchyVar)">
            <summary>
            调用已变化事件
            </summary>
            <param name="hierarchyVar"></param>
        </member>
        <member name="E:XCSJ.Scripts.HierarchyVarEvent.onInvalid">
            <summary>
            当无效后回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarEvent.CallInvalidEvent(XCSJ.Scripts.IHierarchyVar)">
            <summary>
            调用已无效事件
            </summary>
            <param name="hierarchyVar"></param>
        </member>
        <member name="T:XCSJ.Scripts.HierarchyVar">
            <summary>
            层级变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.OnAfterModify(System.Int32,System.String,XCSJ.Scripts.HierarchyVar,XCSJ.Scripts.HierarchyVar)">
            <summary>
            当修改之后
            </summary>
            <param name="index">索引值</param>
            <param name="key">键</param>
            <param name="newValue">新值</param>
            <param name="oldValue">旧值</param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.OnBeforeToArray">
            <summary>
            当转为<see cref="F:XCSJ.LitJson.JsonType.Array"/>之前回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.OnBeforeToObject">
            <summary>
            当转为<see cref="F:XCSJ.LitJson.JsonType.Object"/>之前回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.SetString(System.String)">
            <summary>
            设置字符串
            </summary>
            <param name="val"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.Add(System.Object)">
            <summary>
            添加对象:会将当前对象强制切换为数组（列表）类型
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.XCSJ#Scripts#IHierarchyVar#variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.variable">
            <summary>
            所属变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.SetVariable(XCSJ.Scripts.CustomVariable)">
            <summary>
            设置变量
            </summary>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.varType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._name">
            <summary>
            名称：层级变量名
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.name">
            <summary>
            名称：层级变量名，属于格式化的名称
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.stringValue">
            <summary>
            字符串值
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.ToString">
            <summary>
            转字符串：即输出<see cref="P:XCSJ.Scripts.HierarchyVar.stringValue"/>的值
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.originalValue">
            <summary>
            原始值
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._varString">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.varString">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._varHierarchyString">
            <summary>
            变量层级字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.varHierarchyString">
            <summary>
            变量层级字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVar._hierarchyKey">
            <summary>
            层级键值
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.XCSJ#Scripts#IHierarchyVar#parent">
            <summary>
            父级变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.parent">
            <summary>
            父级变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.isArrayElement">
            <summary>
            是数组元素：标识当前对象是数组或列表中的一项成员元素
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVar.isValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.SetInvalid">
            <summary>
            设置无效
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.UpdateHierarchy">
            <summary>
            更新层级
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryAddChild(System.String,System.Int32@)">
            <summary>
            尝试添加子级变量：会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="varValue">变量值：不可为null</param>
            <param name="programIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryAddChildren(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            尝试添加子级变量：会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="varValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetOrAddSetChild(System.Int32,System.Boolean,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加设置子级变量：有则获取、无则添加并设置值；在无则添加时，会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Array"/>类型；
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex"></param>
            <param name="value"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetOrAddSetChild(System.String,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加设置子级变量：有则获取、无则添加并设置值；在无则添加时，会确保当前变量类型为<see cref="F:XCSJ.LitJson.JsonType.Object"/>类型；
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetChildCount(System.Int32@)">
            <summary>
            尝试获取子级变量数目
            </summary>
            <param name="childCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TrySetChildCount(System.Int32)">
            <summary>
            尝试设置子级变量数目：仅针对列表（数组）类型时有效;末尾操作，多删除，少补空字符串；
            </summary>
            <param name="childCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetChild(System.Int32,System.Boolean,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取子级变量
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetChild(System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取子级变量
            </summary>
            <param name="key"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetChild(System.Func{System.Int32,XCSJ.Scripts.IHierarchyVar,System.Boolean},XCSJ.Scripts.IHierarchyVar@,System.Int32@)">
            <summary>
            尝试获取子级变量：仅针对数组时有效
            </summary>
            <param name="matchFunc">匹配函数：参数依次为：程序索引、子级层级变量，返回表示是否匹配</param>
            <param name="hierarchyVar"></param>
            <param name="programIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryGetChild(System.Func{System.String,XCSJ.Scripts.IHierarchyVar,System.Boolean},XCSJ.Scripts.IHierarchyVar@,System.String@)">
            <summary>
            尝试获取子级变量：仅针对字典时有效
            </summary>
            <param name="matchFunc">匹配函数：参数依次为：键值、子级层级变量，返回表示是否匹配</param>
            <param name="hierarchyVar"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TrySetValue(System.Object,XCSJ.Scripts.EVarType)">
            <summary>
            尝试设置值：优先尝试将值转为期望类型，然后尝试设置值；如果转换后不符合期望类型，则设置值失败；
            </summary>
            <param name="value"></param>
            <param name="varType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TrySetVarType(XCSJ.Scripts.EVarType,System.Object)">
            <summary>
            尝试设置变量类型：优先转换变量类型，然后尝试设置值；不管值设置成功与否，变量类型会优先设置；
            </summary>
            <param name="varType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryRemoveChild(System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试移除子级变量:仅针对字典（对象）可实现移除；
            </summary>
            <param name="key"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryRemoveChild(System.Int32,System.Boolean,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试移除子级变量:列表（数组）或字典（对象）均可实现移除；
            </summary>
            <param name="index"></param>
            <param name="hierarchyIndexOrProgramIndex"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.TryClearChildren">
            <summary>
            尝试清空子级变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.op_Implicit(System.String)~XCSJ.Scripts.HierarchyVar">
            <summary>
            由字符串隐式转换
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.Create(XCSJ.Scripts.EVarType,System.String,System.Object,XCSJ.Scripts.IVarCollection,XCSJ.Scripts.CustomVariable)">
            <summary>
            创建层级变量
            </summary>
            <param name="varType"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="varCollection"></param>
            <param name="variable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVar.Foreach(System.Action{XCSJ.Scripts.IHierarchyVar,System.Int32,System.String,XCSJ.Scripts.IHierarchyVar})">
            <summary>
            遍历:会遍历子级以及子级的子级；
            </summary>
            <param name="action">动作，参数依次为：父级对象（可能为null）、当前对象在父级对象中的程序索引（父级对象是Json数组时有效,如无效则参数值为-1）、当前对象在父级对象中的键值（父级对象是Json对象时有效，如无效则参数值为null）、当前对象(不可能为null)</param>
        </member>
        <member name="T:XCSJ.Scripts.IVarDictionary">
            <summary>
            变量字典接口
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarDictionary.GetVarNames">
            <summary>
            获取变量名数组
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarDictionary.TryGetVariable(System.String,XCSJ.Scripts.IVariable@)">
            <summary>
            尝试获取变量(查)
            </summary>
            <param name="varName">变量名称</param>
            <param name="variable">变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IVarDictionary.TryAddVar(System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试添加变量(增)
            </summary>
            <param name="varName">变量名称</param>
            <param name="varValue">变量值</param>
            <param name="varType">变量类型</param>
            <param name="hierarchyVar">层级变量：根层级变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IVarDictionary.TryRemoveVar(System.String)">
            <summary>
            尝试移除(删)变量
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VarDictionary`2">
            <summary>
            变量字典
            </summary>
            <typeparam name="TVarDictionary"></typeparam>
            <typeparam name="TVariable"></typeparam>
        </member>
        <member name="E:XCSJ.Scripts.VarDictionary`2.onAdded">
            <summary>
            当已创建：当已添加新的变量后回调；在调用<see cref="M:XCSJ.Scripts.VarDictionary`2.TryAddVar(System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)"/>时回调；
            </summary>
        </member>
        <member name="E:XCSJ.Scripts.VarDictionary`2.onRemoved">
            <summary>
            当已删除：当已删除变量后回调；在调用<see cref="M:XCSJ.Scripts.VarDictionary`2.TryRemoveVar(System.String)"/>时回调；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarDictionary`2.varCollectionHost">
            <summary>
            变量集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.SetVarCollectionHost(XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            设置变量集合宿主
            </summary>
            <param name="varCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.CreateVariable(XCSJ.Scripts.EVarType,System.String,System.Object)">
            <summary>
            创建变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.GetVarNames">
            <summary>
            获取变量名数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.TryGetVariable(System.String,XCSJ.Scripts.IVariable@)">
            <summary>
            尝试获取变量(查)
            </summary>
            <param name="varName">变量名称</param>
            <param name="variable">变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.TryAddVar(System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试添加变量(增):如添加成功会回调<see cref="E:XCSJ.Scripts.VarDictionary`2.onAdded"/>事件
            </summary>
            <param name="varName">变量名称</param>
            <param name="varValue">变量值</param>
            <param name="varType">变量类型</param>
            <param name="hierarchyVar">层级变量：根层级变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary`2.TryRemoveVar(System.String)">
            <summary>
            尝试移除(删)变量:如移除成功会回调<see cref="E:XCSJ.Scripts.VarDictionary`2.onRemoved"/>事件
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VarDictionary">
            <summary>
            变量字典：用于运行时提升变量的处理效率;
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarDictionary.CreateVariable(XCSJ.Scripts.EVarType,System.String,System.Object)">
            <summary>
            创建变量
            </summary>
            <param name="varType"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.HierarchyVarHelper">
            <summary>
            层级变量组手
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.HierarchyDelimiterChars">
            <summary>
            层级分隔符数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionaryDotDelimiterChar">
            <summary>
            层级点分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionaryDotDelimiter">
            <summary>
            层级点分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionarySlashDelimiterChar">
            <summary>
            层级斜杠分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionarySlashDelimiter">
            <summary>
            层级斜杠分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionaryLeftDelimiterChar">
            <summary>
            字典左分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.DictionaryRightDelimiterChar">
            <summary>
            字典右分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayLeftDelimiterChar">
            <summary>
            数组左分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayRightDelimiterChar">
            <summary>
            数组右分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.FactorialChar">
            <summary>
            阶乘符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayLeftDelimiter">
            <summary>
            数组左分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayRightDelimiter">
            <summary>
            数组右分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayLeftDelimiterChars">
            <summary>
            数组左分隔符数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayRightDelimiterChars">
            <summary>
            数组右分隔符数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.ArrayDelimiterChars">
            <summary>
            数组分隔符数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.VarScopeFlagChars">
            <summary>
            变量作用域标记符数组
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarScopeString(XCSJ.Scripts.EVarScope)">
            <summary>
            变量作用域转变量作用域字符串
            </summary>
            <param name="varScope"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarScope(System.Char)">
            <summary>
            作用域标记符转变量作用域
            </summary>
            <param name="scopeFlag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToEndFlag(System.Char)">
            <summary>
            结束标记符转结束标记
            </summary>
            <param name="endFlag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarHierarchyDelimiter(System.Char)">
            <summary>
            转变量层级分隔符
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarHierarchyDelimiterString(XCSJ.Scripts.EVarHierarchyDelimiter)">
            <summary>
            转变量层级分隔符字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarString(System.String,System.String)">
            <summary>
            转变量字符串：对传入的变量字符串做分析并格式化返回标准字符串；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToVarType(XCSJ.LitJson.JsonType)">
            <summary>
            Json类型转变量类型
            </summary>
            <param name="jsonType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ToJsonType(XCSJ.Scripts.EVarType)">
            <summary>
            Json类型转变量类型
            </summary>
            <param name="varType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.GetParents(XCSJ.Scripts.IHierarchyVar)">
            <summary>
            获取父级列表：由根级到当前级的顺序
            </summary>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.GetRootVar(XCSJ.Scripts.IHierarchyVar)">
            <summary>
            获取根变量
            </summary>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.GetRootVar``1(``0)">
            <summary>
            获取根变量
            </summary>
            <typeparam name="T"></typeparam>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.GetFormatVarString(XCSJ.Scripts.IHierarchyVar,System.Boolean,XCSJ.Scripts.EVarHierarchyDelimiter)">
            <summary>
            获取格式化变量字符串
            </summary>
            <param name="hierarchyVar"></param>
            <param name="needArrayHierarchy">需要数组层级</param>
            <param name="varHierarchyDelimiter">变量层级分隔符</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.GetDepth(XCSJ.Scripts.IHierarchyVar)">
            <summary>
            获取深度
            </summary>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetVarValue(XCSJ.Scripts.IVarDictionary,System.String,System.Object,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试设置变量值(改)
            </summary>
            <param name="varDictionary"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetVar(XCSJ.Scripts.IVarDictionary,System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取变量(查)
            </summary>
            <param name="varDictionary"></param>
            <param name="varName">变量名称</param>
            <param name="hierarchyVar">层级变量：根层级变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetVarValue(XCSJ.Scripts.IVarDictionary,System.String,System.Object@)">
            <summary>
            尝试获取变量值(查)
            </summary>
            <param name="varDictionary"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetOrAddSetVarValue(XCSJ.Scripts.IVarDictionary,System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试设置或添加设置变量值：有则设置，无则添加并设置
            </summary>
            <param name="varDictionary"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetOrAddVar(XCSJ.Scripts.IVarDictionary,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加变量：有则获取，无则添加
            </summary>
            <param name="varDictionary"></param>
            <param name="varName"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidExtensionHierarchyKeyNoCache(System.String)">
            <summary>
            不使用缓存判断是否是有效的扩展层级键：0 字符串属于特殊的可扩展层级键；
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidExtensionHierarchyKey(System.String)">
            <summary>
            判断是否是有效的扩展层级键：0 字符串属于特殊的可扩展层级键；
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.HierarchyVarHelper.validExtensionHierarchyKeyCache">
            <summary>
            有效的层级扩展键缓存
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.FormatExtensionHierarchyKey(System.String)">
            <summary>
            格式化扩展层级键：如果不是有效的扩展层级键，返回空字符串；
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.RemoveExtensionHierarchyKey(System.String,System.Boolean)">
            <summary>
            移除扩展层级键：如果不是有效的变量字符串或没有扩展层级键，不会对传入字符串做任何处理并直接返回；
            </summary>
            <param name="varString"></param>
            <param name="removeLastHierarchyChar">移除末尾层级符</param>
            <returns>返回变量层级字符串</returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.RemoveExtensionHierarchyKeyNoCache(System.String,System.Boolean)">
            <summary>
            无缓存移除扩展层级键：如果不是有效的变量字符串或没有扩展层级键，不会对传入字符串做任何处理并直接返回；
            </summary>
            <param name="varString"></param>
            <param name="removeLastHierarchyChar">移除末尾层级符</param>
            <returns>返回变量层级字符串</returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.AddOrUpdateExtensionHierarchyKey(System.String,System.String)">
            <summary>
            添加或更新扩展层级键：如果不是有效的变量字符串，不会对传入字符串做任何处理并直接返回；
            </summary>
            <param name="varString"></param>
            <param name="extensionHierarchyKey"></param>
            <returns>返回变量层级字符串</returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.AddOrUpdateExtensionHierarchyKeyNoCache(System.String,System.String)">
            <summary>
            无缓存添加或更新扩展层级键：如果不是有效的变量字符串，不会对传入字符串做任何处理并直接返回；
            </summary>
            <param name="varString"></param>
            <param name="extensionHierarchyKey"></param>
            <returns>返回变量层级字符串</returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidHierarchyIndex(System.Int32)">
            <summary>
            有效层级索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidHierarchyIndex(System.Int32,System.Int32)">
            <summary>
            有效层级索引
            </summary>
            <param name="index"></param>
            <param name="itemCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidProgramIndex(System.Int32)">
            <summary>
            有效程序索引
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ValidProgramIndex(System.Int32,System.Int32)">
            <summary>
            有效程序索引
            </summary>
            <param name="index"></param>
            <param name="itemCount"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.ProgramIndexToHierarchyIndex(System.Int32)">
            <summary>
            程序索引转层级索引
            </summary>
            <param name="programIndex">程序索引：期望为大于等于0的值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.HierarchyIndexToProgramIndex(System.Int32)">
            <summary>
            层级索引转程序索引
            </summary>
            <param name="hierarchyIndex">层级索引：期望为大于0的值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetProgramIndex(System.Int32,System.Int32,System.Int32@)">
            <summary>
            尝试获取程序索引
            </summary>
            <param name="hierarchyIndex"></param>
            <param name="itemCount"></param>
            <param name="programIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVar(XCSJ.Scripts.IVarContext,System.String,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量上下文中获取变量
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVar(XCSJ.Scripts.IVarContext,System.String,XCSJ.Scripts.VarStringAnalysisResult@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量上下文中获取变量
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVar(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量上下文中获取变量
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVar(XCSJ.Scripts.IVarContext,XCSJ.Scripts.IVarCollection,XCSJ.Scripts.VarStringAnalysisResult,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量集合中获取变量
            </summary>
            <param name="varContext"></param>
            <param name="varCollection"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVar(XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,XCSJ.Scripts.VarStringAnalysisResult,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从根变量集获取变量
            </summary>
            <param name="varContext"></param>
            <param name="rootVar"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyKeyDynamicValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.HierarchyKey,System.Object@)">
            <summary>
            获取层级键动态值：能调用说明不是变量就是表达式
            </summary>
            <param name="varContext"></param>
            <param name="hierarchyKey"></param>
            <param name="dynamicValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetVarDynamicValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object@)">
            <summary>
            获取变量动态值
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="dynamicValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object@)">
            <summary>
            尝试从变量上下文中获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量上下文中获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object@)">
            <summary>
            尝试从变量上下文中获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试从变量上下文中获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,XCSJ.Scripts.HierarchyKey,System.Object@)">
            <summary>
            尝试从变量上下文中获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGetHierarchyVarValueByExtension(XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object@)">
            <summary>
            尝试获取变量值通过扩展
            </summary>
            <param name="varContext"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVarHelper.getVarValueFuncs">
            <summary>
            获取变量值函数字典
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGet_GetHierarchyVarValueFunc(System.String,System.Func{XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object}@)">
            <summary>
            尝试获取 获取变量值函数 对象
            </summary>
            <param name="extensionHierarchyKey"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.RegisterGetHierarchyVarValueFunc(System.String,System.Func{XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object})">
            <summary>
            注册 获取变量值函数
            </summary>
            <param name="extensionHierarchyKey"></param>
            <param name="func"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.UnregisterGetHierarchyVarValueFunc(System.String)">
            <summary>
            取消注册 获取变量值函数
            </summary>
            <param name="extensionHierarchyKey"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object,XCSJ.Scripts.VarStringAnalysisResult@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中设置变量值-变量有(变量存在)则设置、无(变量不存在)则不处理
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object)">
            <summary>
            尝试在变量上下文中设置变量值-变量有(变量存在)则设置、无(变量不存在)则不处理
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object)">
            <summary>
            尝试在变量上下文中设置变量值-变量有(变量存在)则设置、无(变量不存在)则不处理
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中设置变量值-变量有(变量存在)则设置、无(变量不存在)则不处理
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,XCSJ.Scripts.IHierarchyVar,XCSJ.Scripts.HierarchyKey,System.Object)">
            <summary>
            尝试在变量上下文中设置变量值
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValue(XCSJ.Scripts.IHierarchyVar,System.Object,XCSJ.Scripts.VarStringAnalysisResult)">
            <summary>
            尝试设置变量值
            </summary>
            <param name="hierarchyVar"></param>
            <param name="varValue"></param>
            <param name="varStringAnalysisResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetHierarchyVarValueByExtension(XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object)">
            <summary>
            尝试设置变量值通过扩展
            </summary>
            <param name="varContext"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.HierarchyVarHelper.setVarValueFuncs">
            <summary>
            设置变量值函数字典
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryGet_SetHierarchyVarValueFunc(System.String,System.Func{XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object,System.Boolean}@)">
            <summary>
            尝试获取 设置变量值函数 对象
            </summary>
            <param name="extensionHierarchyKey"></param>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.RegisterSetHierarchyVarValueFunc(System.String,System.Func{XCSJ.Scripts.IVarContext,XCSJ.Scripts.IHierarchyVar,System.String,System.Object,System.Boolean})">
            <summary>
            注册 设置变量值函数
            </summary>
            <param name="extensionHierarchyKey"></param>
            <param name="func"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.UnregisterSetHierarchyVarValueFunc(System.String)">
            <summary>
            取消注册 设置变量值函数
            </summary>
            <param name="extensionHierarchyKey"></param>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetOrAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object)">
            <summary>
            尝试在变量上下文中设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetOrAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object,XCSJ.Scripts.VarStringAnalysisResult@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetOrAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object)">
            <summary>
            尝试在变量上下文中设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TrySetOrAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object)">
            <summary>
            尝试在变量上下文中添加设置变量值-变量有(变量存在)则不处理、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object,XCSJ.Scripts.VarStringAnalysisResult@,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中添加设置变量值-变量有(变量存在)则不处理、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varString"></param>
            <param name="varValue"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object)">
            <summary>
            尝试在变量上下文中添加设置变量值-变量有(变量存在)则不处理、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.HierarchyVarHelper.TryAddSetHierarchyVarValue(XCSJ.Scripts.IVarContext,XCSJ.Scripts.VarStringAnalysisResult,System.Object,XCSJ.Scripts.IHierarchyVar@,XCSJ.Scripts.HierarchyKey@)">
            <summary>
            尝试在变量上下文中添加设置变量值-变量有(变量存在)则不处理、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varStringAnalysisResult"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <param name="extensionHierarchyKey"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.StaticVarHelper">
            <summary>
            静态变量组手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.StaticVarHelper.ToStaticVarString(System.String)">
            <summary>
            转静态变量字符串
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.StaticVarHelper.TrySetOrAddSetVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object)">
            <summary>
            尝试设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.StaticVarHelper.TryGetVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object@)">
            <summary>
            尝试获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.StaticVarHelper.TryRemoveVar(XCSJ.Scripts.IVarContext,System.String)">
            <summary>
            尝试移除
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.AppVarHelper">
            <summary>
            App变量组手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.AppVarHelper.ToAppVarString(System.String)">
            <summary>
            转App变量字符串
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.AppVarHelper.TrySetOrAddSetVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object)">
            <summary>
            尝试设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.AppVarHelper.TryGetVarValue(XCSJ.Scripts.IVarContext,System.String,System.Object@)">
            <summary>
            尝试获取变量值
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.AppVarHelper.TryRemoveVar(XCSJ.Scripts.IVarContext,System.String)">
            <summary>
            尝试移除
            </summary>
            <param name="varContext"></param>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IFuncCollectionContext">
            <summary>
            函数集合上下文
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IFuncCollectionContext.funcCollectionHost">
            <summary>
            函数集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IFuncCollectionContext.SetFuncCollectionHost(XCSJ.Scripts.IFuncCollectionHost)">
            <summary>
            设置函数集合宿主
            </summary>
            <param name="funcCollectionHost"></param>
        </member>
        <member name="T:XCSJ.Scripts.IFuncCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IFuncCollection.GetFunctionNames">
            <summary>
            获取函数名称数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IFuncCollection.GetFunction(System.String)">
            <summary>
            获取函数
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IFuncCollection`1">
            <summary>
            函数集合
            </summary>
            <typeparam name="TFunction"></typeparam>
        </member>
        <member name="T:XCSJ.Scripts.IFuncCollectionHost`1">
            <summary>
            函数集合宿主
            </summary>
            <typeparam name="TFunction"></typeparam>
        </member>
        <member name="T:XCSJ.Scripts.IFuncCollectionHost">
            <summary>
            函数集合宿主
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IFuncCollectionHost.funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IFuncCollectionHost.ExecuteFunction(XCSJ.Scripts.Function,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="function"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.IFuncCollectionHost.ExecuteFunction(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="functionName"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.FuncCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.FuncCollection.funcCollectionHost">
            <summary>
            函数集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection.SetFuncCollectionHost(XCSJ.Scripts.IFuncCollectionHost)">
            <summary>
            设置函数集合宿主
            </summary>
            <param name="funcCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection.GetFunction(System.String)">
            <summary>
            获取函数
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection.GetFunctionNames">
            <summary>
            获取函数名称数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.FuncCollection`1">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.FuncCollection`1._functionName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.FuncCollection`1._functions">
            <summary>
            函数列表:用于持久化存储中文脚本函数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.MarkDirty">
            <summary>
            标记脏：将<see cref="F:XCSJ.Scripts.FuncCollection`1._functions"/>中所有函数对象标记为脏
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.SetFuncCollectionHost(XCSJ.Scripts.IFuncCollectionHost)">
            <summary>
            设置函数集合宿主
            </summary>
            <param name="funcCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.GetFunctionNames">
            <summary>
            获取函数名称数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.GetFunction(System.String)">
            <summary>
            获取函数
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.FuncCollection`1._funcDictionary">
            <summary>
            函数字典
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.FuncCollection`1.funcDictionary">
            <summary>
            函数字典
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.LegacyUpgrade(System.Collections.Generic.List{`0})">
            <summary>
            旧版升级：执行完成后会将传入参数的列表清空；
            </summary>
            <param name="functionList"></param>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.ListToDictionary(System.Boolean,System.Boolean)">
            <summary>
            列表到字典：将<see cref="F:XCSJ.Scripts.FuncCollection`1._functions"/>数据添加到<see cref="P:XCSJ.Scripts.FuncCollection`1.funcDictionary"/>；无则添加、有则覆盖或不处理；
            </summary>
            <param name="clearDictionaryFirst">优先清空字典：是否在数据转移前，优先将字典数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：字典中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.ListToDictionary">
            <summary>
            列表到字典：不清空字典、无则添加、有则覆盖
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.DictionaryToList(System.Boolean,System.Boolean)">
            <summary>
            字典到列表：将<see cref="P:XCSJ.Scripts.FuncCollection`1.funcDictionary"/>数据添加到<see cref="F:XCSJ.Scripts.FuncCollection`1._functions"/>；如列表数据清空时，则直接将字典数据全部添加到列表；如列表数据不清空时，无则添加、有则覆盖或不处理；
            </summary>
            <param name="clearListFirst">优先清空列表：是否在数据转移前，优先将列表数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：列表中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.Scripts.FuncCollection`1.DictionaryToList">
            <summary>
            字典到列表：将<see cref="P:XCSJ.Scripts.FuncCollection`1.funcDictionary"/>数据添加到<see cref="F:XCSJ.Scripts.FuncCollection`1._functions"/>；默认调用<see cref="M:XCSJ.Scripts.FuncCollection`1.DictionaryToList(System.Boolean,System.Boolean)"/>函数，优先清空列表（为True）且如存在则覆盖（为True）；
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.FuncDictionary`2">
            <summary>
            函数字典
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TFunction"></typeparam>
        </member>
        <member name="P:XCSJ.Scripts.FuncDictionary`2.funcCollectionHost">
            <summary>
            函数集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.FuncDictionary`2.SetFuncCollectionHost(XCSJ.Scripts.IFuncCollectionHost)">
            <summary>
            设置函数集合宿主
            </summary>
            <param name="funcCollectionHost"></param>
        </member>
        <member name="T:XCSJ.Scripts.FuncDictionary`1">
            <summary>
            函数字典
            </summary>
            <typeparam name="TFunction"></typeparam>
        </member>
        <member name="T:XCSJ.Scripts.IVarContext">
            <summary>
            变量上下文
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVarContext.scriptDriver">
            <summary>
            脚本驱动：变量上下文所在的脚本驱动对象
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarContext.TryGetVarCollection(XCSJ.Scripts.EVarScope,XCSJ.Scripts.IVarCollection@)">
            <summary>
            尝试获取变量集合
            </summary>
            <param name="varScope"></param>
            <param name="varCollection"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IVarCollectionContext">
            <summary>
            变量集合上下文
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVarCollectionContext.varCollectionHost">
            <summary>
            变量宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollectionContext.SetVarCollectionHost(XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            设置变量集合宿主设置变量集合宿主
            </summary>
            <param name="varCollectionHost"></param>
        </member>
        <member name="T:XCSJ.Scripts.IVarCollection">
            <summary>
            变量集合宿主
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVarCollection.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVarCollection.varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollection.RefreshVarDictionary">
            <summary>
            刷新变量字典
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.IVarCollectionHost">
            <summary>
            变量集合宿主
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVarCollectionHost.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollectionHost.GetHostContext">
            <summary>
            获取宿主上下文
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VarCollectionHelper">
            <summary>
            变量结合组手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.GetVarNames(XCSJ.Scripts.IVarCollection)">
            <summary>
            获取变量名称数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.GetVariable(XCSJ.Scripts.IVarCollection,System.String)">
            <summary>
            获取变量
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TryAddVar(XCSJ.Scripts.IVarCollection,System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试添加变量(增)
            </summary>
            <param name="varCollection"></param>
            <param name="varName">变量名称</param>
            <param name="varValue">变量值</param>
            <param name="varType">变量类型</param>
            <param name="hierarchyVar">层级变量：根层级变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TryRemoveVar(XCSJ.Scripts.IVarCollection,System.String)">
            <summary>
            尝试移除(删)变量
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TrySetVarValue(XCSJ.Scripts.IVarCollection,System.String,System.Object,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试设置变量值(改)
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TryGetVar(XCSJ.Scripts.IVarCollection,System.String,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取变量(查)
            </summary>
            <param name="varCollection"></param>
            <param name="varName">变量名称</param>
            <param name="hierarchyVar">层级变量：根层级变量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TryGetVarValue(XCSJ.Scripts.IVarCollection,System.String,System.Object@)">
            <summary>
            尝试获取变量值(查)
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TrySetOrAddSetVarValue(XCSJ.Scripts.IVarCollection,System.String,System.Object,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试设置或添加设置变量值：有则设置，无则添加并设置
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TrySetOrAddSetVarValue(XCSJ.Scripts.IVarCollection,System.String,System.Object,XCSJ.Scripts.EVarType)">
            <summary>
            尝试设置或添加设置变量值：有则设置，无则添加并设置
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <param name="varValue"></param>
            <param name="varType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VarCollectionHelper.TryGetOrAddVar(XCSJ.Scripts.IVarCollection,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IHierarchyVar@)">
            <summary>
            尝试获取或添加变量：有则获取，无则添加
            </summary>
            <param name="varCollection"></param>
            <param name="varName"></param>
            <param name="varType"></param>
            <param name="hierarchyVar"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VarCollection`2">
            <summary>
            变量集合
            </summary>
            <typeparam name="TVariable"></typeparam>
            <typeparam name="TVarDictionary"></typeparam>
        </member>
        <member name="F:XCSJ.Scripts.VarCollection`2._varName">
            <summary>
            变量名
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VarCollection`2._variables">
            <summary>
            变量列表:用于持久化存储中文脚本变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.MarkDirty">
            <summary>
            标记脏：将<see cref="F:XCSJ.Scripts.VarCollection`2._variables"/>中所有变量对象标记为脏
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.SetVarCollectionHost(XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            设置变量集合宿主
            </summary>
            <param name="varCollectionHost"></param>
        </member>
        <member name="P:XCSJ.Scripts.VarCollection`2.varCollectionHost">
            <summary>
            变量集合宿主
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarCollection`2.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VarCollection`2.varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.RefreshVarDictionary">
            <summary>
            刷新变量字典：默认调用<see cref="M:XCSJ.Scripts.VarCollection`2.ListToDictionary(System.Boolean,System.Boolean)"/>,参数均为True （即清空字典且覆盖）；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.ListToDictionary(System.Boolean,System.Boolean)">
            <summary>
            列表到字典：将<see cref="F:XCSJ.Scripts.VarCollection`2._variables"/>数据添加到<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>；无则添加、有则覆盖或不处理；
            </summary>
            <param name="clearDictionaryFirst">优先清空字典：是否在数据转移前，优先将字典数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：字典中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.ListToDictionary">
            <summary>
            列表到字典:将<see cref="F:XCSJ.Scripts.VarCollection`2._variables"/>数据添加到<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>；默认调用<see cref="M:XCSJ.Scripts.VarCollection`2.ListToDictionary(System.Boolean,System.Boolean)"/>函数，优先清空字典（为True）且如存在则覆盖（为True）；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.DictionaryToList(System.Boolean,System.Boolean)">
            <summary>
            字典到列表：将<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>数据添加到<see cref="F:XCSJ.Scripts.VarCollection`2._variables"/>；如列表数据清空时，则直接将字典数据全部添加到列表；如列表数据不清空时，无则添加、有则覆盖或不处理；
            </summary>
            <param name="clearListFirst">优先清空列表：是否在数据转移前，优先将列表数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：列表中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.DictionaryToList">
            <summary>
            字典到列表：将<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>数据添加到<see cref="F:XCSJ.Scripts.VarCollection`2._variables"/>；默认调用<see cref="M:XCSJ.Scripts.VarCollection`2.DictionaryToList(System.Boolean,System.Boolean)"/>函数，优先清空列表（为True）且如存在则覆盖（为True）；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnAdded(`0)">
            <summary>
            当<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>中已增加新的变量后：内部默认调用<see cref="M:XCSJ.Scripts.VarCollection`2.DictionaryToList"/>，将字典数据到列表；
            </summary>
            <param name="variable"></param>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnRemoved(`0)">
            <summary>
            当<see cref="P:XCSJ.Scripts.VarCollection`2.varDictionary"/>中已删除变量后：内部默认调用<see cref="M:XCSJ.Scripts.VarCollection`2.DictionaryToList"/>，将字典数据到列表；
            </summary>
            <param name="variable"></param>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnInit">
            <summary>
            当初始化
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnRelease">
            <summary>
            当释放时
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnEnable">
            <summary>
            当启用
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VarCollection`2.OnDisable">
            <summary>
            当禁用
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.VarCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.FunctionVarCollection">
            <summary>
            函数变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.FunctionVarCollection.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.FunctionVarCollection._varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.FunctionVarCollection.varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.IScriptDriver">
            <summary>
            脚本驱动器接口：用于驱动脚本机器<see cref="T:XCSJ.Scripts.Machine"/>工作的接口对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IScriptDriver.varContext">
            <summary>
            变量上下文
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IScriptDriver.SetLocalVarCollection(XCSJ.Scripts.IVarCollection)">
            <summary>
            设置本地变量集合
            </summary>
            <param name="localVarCollection">本地变量集合</param>
        </member>
        <member name="M:XCSJ.Scripts.IScriptDriver.TryGetScript(System.String,XCSJ.Scripts.Script@)">
            <summary>
            尝试获取脚本
            </summary>
            <param name="scriptName"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IVarCollectionStack">
            <summary>
            变量集合堆栈
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollectionStack.Push(XCSJ.Scripts.IVarCollection)">
            <summary>
            将变量集合对象入栈
            </summary>
            <param name="varCollection"></param>
            <returns>成功入栈返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollectionStack.Pop(XCSJ.Scripts.EVarScope)">
            <summary>
            将指定变量作用域的栈顶变量集合对象出栈并返回
            </summary>
            <param name="varScope">变量作用域</param>
            <returns>成功出栈返回栈顶变量集合对象，否则返回null</returns>
        </member>
        <member name="M:XCSJ.Scripts.IVarCollectionStack.Peek(XCSJ.Scripts.EVarScope)">
            <summary>
            获取指定变量作用域的栈顶变量集合对象
            </summary>
            <param name="varScope">变量作用域</param>
            <returns>成功获取返回栈顶变量集合对象，否则返回null</returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptDriverHelper">
            <summary>
            脚本驱动器组手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptDriverHelper.GetScript(XCSJ.Scripts.IScriptDriver,System.String)">
            <summary>
            获取脚本
            </summary>
            <param name="scriptDriver"></param>
            <param name="scriptName">脚本名称</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptDriverHelper.TryGetLocalVarCollection(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IVarCollection@)">
            <summary>
            尝试获取本地变量集合
            </summary>
            <param name="scriptDriver"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptDriverHelper.GetLocalVarCollection(XCSJ.Scripts.IScriptDriver)">
            <summary>
            获取本地变量集合
            </summary>
            <param name="scriptDriver"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.Machine">
            <summary>
            脚本机器：用于脚本字符串集合的语法语义分析、编译、执行、处理等工作；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Machine.scriptDriver">
            <summary>
            脚本驱动器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Machine.lastReturnValue">
            <summary>
            上句脚本的返回值
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Machine.#ctor(XCSJ.Scripts.IScriptDriver)">
            <summary>
            构造
            </summary>
            <param name="scriptDriver"></param>
        </member>
        <member name="M:XCSJ.Scripts.Machine.ExecuteScript(System.String,XCSJ.Scripts.IVarCollection)">
            <summary>
            执行单句脚本,直接对字符串进行解析并调度执行，而不会进行语法环境的分析；
            </summary>
            <param name="scriptString"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.ExecuteScripts(XCSJ.Scripts.Function,XCSJ.Scripts.IVarCollection)">
            <summary>
            执行脚本
            </summary>
            <param name="function"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.ExecuteScripts(System.String,XCSJ.Scripts.IVarCollection,System.String)">
            <summary>
            执行脚本
            </summary>
            <param name="scriptStrings">脚本字符串列表</param>
            <param name="localVarCollection">本地变量集合</param>
            <param name="separator">间隔符：通过本间隔符将脚本字符串列表整串拆分</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.ExecuteScripts(System.Collections.Generic.IList{System.String},XCSJ.Scripts.IVarCollection)">
            <summary>
            执行脚本
            </summary>
            <param name="scriptStrings"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.ExecuteScripts(System.Collections.Generic.IList{XCSJ.Scripts.ScriptString},XCSJ.Scripts.IVarCollection)">
            <summary>
            执行脚本
            </summary>
            <param name="scriptStrings"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine._ExecuteScripts(XCSJ.Scripts.IFunction,XCSJ.Scripts.IVarCollection)">
            <summary>
            执行脚本
            </summary>
            <param name="function"></param>
            <param name="localVarCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.SingleStep(XCSJ.Scripts.RTStack,XCSJ.Scripts.ScriptString,XCSJ.Scripts.IFunction)">
            <summary>
            单步执行 -- 会对脚本字符串所在的运行时环境进行语法分析
            </summary>
            <param name="rtStack"></param>
            <param name="scriptString"></param>
            <param name="function"></param>
            <returns>返回True时，会将堆栈的执行行号进行 Next （即 自加1操作）</returns>
        </member>
        <member name="M:XCSJ.Scripts.Machine.Execute(XCSJ.Scripts.ScriptString,XCSJ.Scripts.RTState,XCSJ.Scripts.RTStack)">
            <summary>
            执行脚本字符串 --- 必须已经通过 基础预编译
            </summary>
            <param name="scriptString"></param>
            <param name="state"></param>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IExpressionCalculater">
            <summary>
            表达式计算器接口
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IExpressionCalculater.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ExpressionStringAnalysisResult,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionStringAnalysisResult">表达式字符串分析结果</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算，即忽略表达式字符串分析结果中的表达式类型字符串</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParam">
            <summary>
            脚本参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.param">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramRT">
            <summary>
            参数运行时
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.scriptString">
            <summary>
            脚本字符串：依附的脚本字符串对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.index">
            <summary>
            所在脚本字符串中的程序索引值，范围[0, 脚本参数数目]；如无效时，值为-1；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramTypeInt">
            <summary>
            参数类型整型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramTypeEnum">
            <summary>
            参数类型枚举
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.OnInit">
            <summary>
            当初始化
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.CanCacheParamObject">
            <summary>
            能缓存参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.TrySetParamData">
            <summary>
            尝试设置参数数据：根据脚本参数信息设置参数数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.TryGetCachedParamObject(System.Object@)">
            <summary>
            尝试获取已缓存的参数对象
            </summary>
            <param name="cachedParamObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.ParamObjectToCachableObject(System.Object)">
            <summary>
            参数对象转可缓存的对象
            </summary>
            <param name="paramObject">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.CachableObjectToParamObject(XCSJ.Scripts.IParamData)">
            <summary>
            可缓存的对象转参数对象
            </summary>
            <param name="paramData">参数数据</param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramString">
            <summary>
            原始脚本语句中的参数字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramStringType">
            <summary>
            参数字符串类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.SetParamString(System.String)">
            <summary>
            设置参数字符串
            </summary>
            <param name="paramString"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.OnParamStringChanged(System.String)">
            <summary>
            当参数字符串变更后
            </summary>
            <param name="paramString"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.GetParamObject(XCSJ.Scripts.RTStack)">
            <summary>
            获取参数对象
            </summary>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.paramObject">
            <summary>
            缓存的参数对象
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.ValueToParamObject(XCSJ.Scripts.RTStack)">
            <summary>
            值到参数对象
            </summary>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptParam.variableRT">
            <summary>
            运行时变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.varStringAnalysisResult">
            <summary>
            变量字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.varString">
            <summary>
            参数变量字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.VariableToParamObject(XCSJ.Scripts.RTStack)">
            <summary>
            变量到参数对象
            </summary>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptParam.expressionTypeVariableRT">
            <summary>
            运行时变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.expressionStringAnalysisResult">
            <summary>
            表达式字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.expressionString">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.expressionTypeString">
            <summary>
            表达式类型字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam.expressionCalculateString">
            <summary>
            表达式计算字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.GetExpressionTypeStrings">
            <summary>
            获取表达式类型字符串数组：可处理的表达式类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.DefaultExpressionTypeString">
            <summary>
            默认表达式类型字符串：默认使用<see cref="P:XCSJ.Scripts.ExpressionHelper.DefaultExpressionTypeString"/>对应类型做计算；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.ExpressionToParamObject(XCSJ.Scripts.RTStack)">
            <summary>
            表达式到参数对象
            </summary>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算，即忽略表达式字符串分析结果中的表达式类型字符串；如果为null,则使用表达式字符串分析结果中的表达式类型字符串；如果为空字符串，则使用当前脚本参数的默认表达式类型字符串；</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.TryCalculateExpression(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ExpressionStringAnalysisResult,System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionStringAnalysisResult">表达式字符串分析结果</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算，即忽略表达式字符串分析结果中的表达式类型字符串；如果为null,则使用表达式字符串分析结果中的表达式类型字符串；如果为空字符串，则使用当前脚本参数的默认表达式类型字符串；</param>
            <param name="calculateResult">计算结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.OnTryCalculateExpression(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ExpressionStringAnalysisResult,System.String,System.Object@)">
            <summary>
            当尝试计算表达式
            </summary>
            <param name="scriptDriver">脚本驱动</param>
            <param name="expressionStringAnalysisResult">表达式字符串分析结果</param>
            <param name="expressionTypeString">表达式类型字符串：将表达式字符串分析结果按照此类型计算</param>
            <param name="calculateResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.StringToParamObject(System.String)">
            <summary>
            字符串转参数对象：将参数字符串转化为脚本参数类型对应的对象（即称为参数对象）
            </summary>
            <param name="paramString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.CheckParamObject(System.String,System.Object)">
            <summary>
            检查参数对象：为预编译机制提供的校验接口；检查参数字符串与参数对象是否一致；如果返回Flase，则再次调用<see cref="M:XCSJ.Scripts.ScriptParam.StringToParamObject(System.String)"/>；如果返回True，则使用缓存的参数对象；默认返回True；
            </summary>
            <param name="paramString">参数字符串</param>
            <param name="paramObject">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam.UnknowObjectToParamObject(System.Object)">
            <summary>
            未知对象转参数对象
            </summary>
            <param name="unknowObject"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.BaseScriptParamDrawer">
            <summary>
            基础脚本参数绘制器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramTypeInt">
            <summary>
            参数类型整型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramTypeEnum">
            <summary>
            参数类型枚举
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.param">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.scriptString">
            <summary>
            脚本字符串：依附的脚本字符串对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.index">
            <summary>
            所在脚本字符串中的程序索引值，范围[0, 脚本参数数目]；如无效时，值为-1；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.Set(XCSJ.Scripts.ScriptString,System.Int32)">
            <summary>
            设置
            </summary>
            <param name="scriptString"></param>
            <param name="index"></param>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.OnInit">
            <summary>
            当初始化
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.scriptParam">
            <summary>
            脚本参数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.OnBeforeOfScriptParamOnInit(XCSJ.Scripts.ScriptParam)">
            <summary>
            当在脚本参数当初始化之前回调：对<see cref="P:XCSJ.Scripts.BaseScriptParamDrawer.scriptParam"/>初始化之前调用
            </summary>
            <param name="scriptParam"></param>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.DefaultParamObject">
            <summary>
            默认参数对象：默认返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.StringToParamObject(System.String)">
            <summary>
            字符串转参数对象：默认调用<see cref="M:XCSJ.Scripts.ScriptParam.StringToParamObject(System.String)"/>
            </summary>
            <param name="paramString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串：默认调用<see cref="M:XCSJ.Scripts.ScriptParam.ParamObjectToString(System.Object)"/>
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramStringType">
            <summary>
            参数字符串类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.GetParamString">
            <summary>
            获取参数字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.paramObject">
            <summary>
            参数对象
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.GetValueString">
            <summary>
            获取值字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.validVarString">
            <summary>
            有效的变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.varStringAnalysisResult">
            <summary>
            变量字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.varString">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.GetVarString">
            <summary>
            获取变量字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.validExpressionString">
            <summary>
            有效的表达式字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.expressionStringAnalysisResult">
            <summary>
            表达式字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.expressionString">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.expressionCalculateString">
            <summary>
            表达式计算字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.BaseScriptParamDrawer.expressionTypeString">
            <summary>
            表达式类型字符串
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.GetExpressionTypeStrings">
            <summary>
            获取可处理的表达式类型字符串数组:
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.BaseScriptParamDrawer.GetExpressionString">
            <summary>
            获取表达式字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EParamStringType">
            <summary>
            参数字符串类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamStringType.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamStringType.Variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EParamStringType.Expression">
            <summary>
            表达式
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.DefaultScriptParam">
            <summary>
            默认脚本参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.DefaultScriptParam.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.DefaultScriptParam.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.DefaultScriptParam.StringToParamObject(System.String)">
            <summary>
            字符串转参数对象：将参数字符串转化为脚本参数类型对应的对象（即称为参数对象）
            </summary>
            <param name="paramString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParam`1">
            <summary>
            脚本参数
            </summary>
            <typeparam name="TParamType">参数类型</typeparam>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParam`1.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam`1.DefaultParamObject">
            <summary>
            默认参数对象：默认返回对应类型的缺省值；如果是类类型是，返回null
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam`1.ObjectToParamObject(System.Object)">
            <summary>
            对象转参数对象：1、对象无效，返回默认参数对象<see cref="M:XCSJ.Scripts.ScriptParam`1.DefaultParamObject"/>；1、如果传入对象有效且是<see cref="!:TParamType"/>类型，则直接转换为参数类型对象后返回；2、如果传入对象可通过<see cref="T:XCSJ.Algorithms.Converter"/>成功转换，则返回成功转换的参数对象；3、如果传入对象到否则返回<see cref="M:XCSJ.Scripts.ScriptParam`1.DefaultParamObject"/>的值
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParam`1.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EnumScriptParam`1">
            <summary>
            枚举型脚本参数
            </summary>
            <typeparam name="TEnum"></typeparam>
        </member>
        <member name="P:XCSJ.Scripts.EnumScriptParam`1.enumStringType">
            <summary>
            枚举字符串类型：默认返回<see cref="F:XCSJ.Helper.EEnumStringType.Default"/>
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.EnumScriptParam`1.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.EnumScriptParam`1.StringToParamObject(System.String)">
            <summary>
            字符串转类型对象
            </summary>
            <param name="paramString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.StringScriptParam">
            <summary>
            字符串型脚本参数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.StringScriptParam.DefaultParamObject">
            <summary>
            默认对象：默认范围空字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.StringScriptParam.ParamObjectToString(System.Object)">
            <summary>
            参数对象转字符串
            </summary>
            <param name="paramObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.StringScriptParam.StringToParamObject(System.String)">
            <summary>
            字符串转参数对象
            </summary>
            <param name="paramString"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParamTypeAttribute">
            <summary>
            脚本参数类型特性
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamTypeAttribute.paramTypeInt">
            <summary>
            整型参数类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamTypeAttribute.paramType">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamTypeAttribute.#ctor(System.Int32)">
            <summary>
            构造
            </summary>
            <param name="paramType"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamTypeAttribute.#ctor(XCSJ.Scripts.EParamType)">
            <summary>
            构造
            </summary>
            <param name="paramType"></param>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParamHelper">
            <summary>
            脚本参数组手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.#cctor">
            <summary>
            静态构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.DefaultData(XCSJ.Scripts.EParamType)">
            <summary>
            默认脚本参数绘制器
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.GetScriptParamType(XCSJ.Scripts.EParamType)">
            <summary>
            获取脚本参数类型
            </summary>
            <param name="paramType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.NewScriptParam(XCSJ.Scripts.Param,System.Action{XCSJ.Scripts.ScriptParam})">
            <summary>
            新建脚本参数
            </summary>
            <param name="param"></param>
            <param name="beforeOnInit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.NewBaseScriptParamDrawer(System.Type,XCSJ.Scripts.Param,System.Action{XCSJ.Scripts.BaseScriptParamDrawer})">
            <summary>
            新建脚本参数绘制器
            </summary>
            <param name="scriptParamDrawerType"></param>
            <param name="param"></param>
            <param name="beforeOnInit"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamHelper.ToScriptParamString(System.Object)">
            <summary>
            转脚本参数字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ParamRT">
            <summary>
            运行时参数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ParamRT.paramString">
            <summary>
            原始脚本语句中的参数字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ParamRT.scriptParam">
            <summary>
            脚本参数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ParamRT.scriptString">
            <summary>
            依附的脚本字符串运行时
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ParamRT.index">
            <summary>
            所在脚本字符串中的程序索引值，范围[0, 脚本参数数目]；如无效时，值为-1；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ParamRT.#ctor(System.String,XCSJ.Scripts.Param,XCSJ.Scripts.ScriptString,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="paramString"></param>
            <param name="param"></param>
            <param name="scriptString"></param>
            <param name="index"></param>
        </member>
        <member name="T:XCSJ.Scripts.RetValueRT">
            <summary>
            返回值运行时
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.RetValueRT.TrySetVarValue(XCSJ.Algorithms.ReturnValue,XCSJ.Scripts.RTStack)">
            <summary>
            尝试设置变量值：无则创建，有则修改
            </summary>
            <param name="returnValue"></param>
            <param name="rtStack"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.RTStack">
            <summary>
            运行时堆栈
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.scriptDriver">
            <summary>
            脚本驱动器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.line">
            <summary>
            待执行的脚本语句的索引<br />
            默认每执行完一行脚本字符串后会执行<see cref="M:XCSJ.Scripts.RTStack.Next(System.Int32)"/>(即本值加1)操作；<br />
            对于循环条件成立或循环逻辑中断（第一次循环就碰到循环逻辑中断），会发生回溯（即 本值 会变小，但保证值大于等于0 ）；<br />
            对于循环逻辑中断或逻辑返回等，可能会发生直接后移的操作(即 执行<see cref="M:XCSJ.Scripts.RTStack.Next(System.Int32)"/>(即本值会累加大于等于1的值) 操作 或 直接设定新值的后偏移操作)；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.scriptString">
            <summary>
            当前正在执行的脚本字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.hasNext">
            <summary>
            是否有下一句脚本字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.functionReturnValue">
            <summary>
            函数返回值：未明确指明返回值时，函数默认返回<see cref="F:XCSJ.Algorithms.ReturnValue.Yes"/>
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.functionVarCollection">
            <summary>
            函数变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTStack.function">
            <summary>
            函数：执行堆栈对应的函数载体对象
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.RTStack.#ctor(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IFunction)">
            <summary>
            构造
            </summary>
            <param name="scriptDriver"></param>
            <param name="function"></param>
        </member>
        <member name="M:XCSJ.Scripts.RTStack.Exception(System.Exception,XCSJ.Scripts.IFunction,XCSJ.Scripts.IVarCollection)">
            <summary>
            执行
            </summary>
            <param name="ex"></param>
            <param name="function"></param>
            <param name="localVarCollection"></param>
        </member>
        <member name="M:XCSJ.Scripts.RTStack.Finally">
            <summary>
            执行最后的销毁工作：将堆栈清空
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.RTStack.Next(System.Int32)">
            <summary>
            下一句：继续执行后续脚本字符串
            </summary>
            <param name="step"></param>
        </member>
        <member name="T:XCSJ.Scripts.Script">
            <summary>
            脚本类
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.DefaultCategory">
            <summary>
            默认目录
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.owner">
            <summary>
            归属者:当前脚本的归属者
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.ownerType">
            <summary>
            归属者类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.categoryScript">
            <summary>
            目录脚本：所属的目录分组；如果当前对象就是目录分组时，本字段成员为null
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Script.isCategory">
            <summary>
            是目录：是否是个目录分组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.grammarType">
            <summary>
            语法类型：当前脚本的语法类型
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.id">
            <summary>
            脚本id：全局唯一
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.name">
            <summary>
            脚本名称：全局唯一
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.desc">
            <summary>
            脚本描述
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.retDesc">
            <summary>
            脚本返回值描述
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Script.paramDictionary">
            <summary>
            参数字典：key值用户自定义的数字编号,同时根据次数字编号排序，value为ScriptParam类型的实例对象；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Script.#ctor(XCSJ.Scripts.EGrammarType,System.Int32,XCSJ.Languages.Language,XCSJ.Languages.Language,XCSJ.Languages.Language)">
            <summary>
            构造函数：添加脚本的基础信息；
            </summary>
            <param name="grammarType"></param>
            <param name="id"></param>
            <param name="name"></param>
            <param name="desc"></param>
            <param name="retDesc"></param>
        </member>
        <member name="M:XCSJ.Scripts.Script.ExecuteScript(XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfEnum``1(XCSJ.Scripts.IScriptExecuter,System.Int32,System.Int32)">
            <summary>
            获取枚举型的脚本列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scriptExecuter"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfEnum``1(XCSJ.Scripts.IScriptExecuter)">
            <summary>
            获取枚举型的脚本列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scriptExecuter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfEnum(System.Type,System.Type)">
            <summary>
            获取枚举型的脚本列表
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="ownerType">归属者类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfStaticMethod``1">
            <summary>
            获取指定类中的静态方法型的脚本列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfStaticMethod(System.Type[])">
            <summary>
            获取类列表中的静态方法型的脚本列表
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfStaticMethodFast``1">
            <summary>
            快速获取指定类中的静态方法型的脚本列表：仅在Windows平台可用；
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfStaticMethodFast(System.Type[])">
            <summary>
            快速获取类列表中的静态方法型的脚本列表：仅在Windows平台可用；
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptsOfClass(System.Func{System.Type,XCSJ.Scripts.IScriptOfClass},System.Type[])">
            <summary>
            获取类型的脚本列表
            </summary>
            <param name="createInstanceFunc"></param>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Script.GetScriptOfClass``1">
            <summary>
            获取类型对应的脚本
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptNameAttribute">
            <summary>
            脚本名称属性：也可理解为脚本命令；名称不可出现以下对应的中英文字符: 逗号(,)冒号(:)分号(;)等号(=)
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptNameAttribute.grammarType">
            <summary>
            标识脚本的语法类型;只读；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptNameAttribute.#ctor(System.String,System.String,XCSJ.Scripts.EGrammarType)">
            <summary>
            构造函数，添加脚本名称
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
            <param name="grammarType"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptNameAttribute.#ctor(System.String,XCSJ.Scripts.EGrammarType)">
            <summary>
            构造
            </summary>
            <param name="cn"></param>
            <param name="grammarType"></param>
        </member>
        <member name="T:XCSJ.Scripts.ScriptDescriptionAttribute">
            <summary>
            脚本描述属性类，脚本功能说明；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptDescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数，添加脚本的描述信息
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
        </member>
        <member name="T:XCSJ.Scripts.ScriptReturnAttribute">
            <summary>
            脚本返回值属性类，脚本的返回值说明；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptReturnAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数，添加脚本的描述信息
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParamsAttribute">
            <summary>
            脚本参数属性类，可以同时有本属性，根据传入的index进行排序；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamsAttribute.scriptParam">
            <summary>
            脚本参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamsAttribute.defaultObject">
            <summary>
            默认对象
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamsAttribute.customValueDrawer">
            <summary>
            自定义值绘制器
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,XCSJ.Scripts.EParamType,System.String,System.String,System.Type,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="en"></param>
            <param name="limitType"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,XCSJ.Scripts.EParamType,System.String,System.Type)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitType"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,XCSJ.Scripts.EParamType,System.String,System.String[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,XCSJ.Scripts.EParamType,System.String,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,XCSJ.Scripts.EParamType,System.String)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Int32,System.String,System.String,System.Type,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="en"></param>
            <param name="limitType"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Int32,System.String,System.Type)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitType"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Int32,System.String,System.String[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Enum,System.String,System.String,System.Type,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="en"></param>
            <param name="limitType"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Enum,System.String,System.Type)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitType"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Enum,System.String,System.String[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Enum,System.String,System.Object[])">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.#ctor(System.Int32,System.Enum,System.String)">
            <summary>
            构造
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="cn"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamsAttribute.CompareTo(System.Object)">
            <summary>
            比较函数
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptHelper">
            <summary>
            脚本助手
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterCharCN">
            <summary>
            中文脚本参数分隔符:传入参数时断句使用，中文字符 逗号，
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterChar">
            <summary>
            英文脚本参数分隔符:传入参数时断句使用，英文字符 逗号,
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterCN">
            <summary>
            中文脚本参数分隔符:传入参数时断句使用，中文字符串 逗号,
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiter">
            <summary>
            英文脚本参数分隔符:传入参数时断句使用，英文字符串 逗号,
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterReplace">
            <summary>
            脚本参数分隔符替换符:脚本的传入参数中使用脚本分隔符时，使用本字符串进行替换；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ComboTitleDelimiterCharCN">
            <summary>
            中文组合框标题分隔符:中文字符 冒号：
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ComboTitleDelimiterChar">
            <summary>
            英文组合框标题分隔符 ，英文字符 冒号:
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ComboDelimiterCharCN">
            <summary>
            中文组合框内容分隔符:中文字符 分号；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ComboDelimiterChar">
            <summary>
            英文组合框内容分隔符:英文字符 分号;
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ClassMemberDelimiter">
            <summary>
            类成员分隔符:通用用于标识类与成员(或者说 标题与 具体内容)时使用；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ClassMemberDelimiterChar">
            <summary>
            类成员分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.MemberDelimiter">
            <summary>
            成员分隔符:通常用于标识某个对象的多个成员（具体内容有多项时）对象时使用；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.MemberDelimiterChar">
            <summary>
            成员分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.HierarchicalDelimiter">
            <summary>
            层级分隔符;通常用于表示所属关系时使用
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.HierarchicalDelimiterChar">
            <summary>
            层级分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ValueDelimiter">
            <summary>
            值分隔符:一个脚本参数对象如果是有多个值类型构成或是有对象的限定条件，那么内部的值之间会使用本分隔符;
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ValueDelimiterChar">
            <summary>
            值分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.AutoAlignChar">
            <summary>
            自动对齐符：自动对齐格式使用的字符，英文 空格符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.EqualChar">
            <summary>
            等号字符：脚本字符串中使用的等号字符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.EqualChars">
            <summary>
            等号字符数组
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.Equal">
            <summary>
            等号：脚本字符串中使用的等号字符串
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.WrapLine">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.WrapLineChar">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.WrapLineReplace">
            <summary>
            换行符替换符：脚本的传入参数中使用换行符时，使用本字符串进行替换；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.VarFlagChar">
            <summary>
            变量标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.VarFlag">
            <summary>
            变量标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ReturnValueFlag">
            <summary>
            返回值标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ReturnValueFlagChar">
            <summary>
            返回值标记符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.CurrentScriptEventGameObject">
            <summary>
            当前脚本事件游戏对象：获取当前执行脚本所依附的游戏对象
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ScriptEventParam">
            <summary>
            脚本事件参数：用于存储脚本事件执行时,所需要参数~每次事件调用都会修改；该参数的有效性，注意查看脚本事件说明！！
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.ThisObject">
            <summary>
            当前对象：获取当前执行脚本所依附的对象，即存储函数（脚本事件）的直接对象；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.FunctionObject">
            <summary>
            函数对象：获取当前的函数（脚本事件）对象,FUNC为Function的简写;
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.SystemVariableNames">
            <summary>
            系统变量名称集：脚本系统内置的特殊系统变量
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.DefaultEnumSuffix">
            <summary>
            默认枚举后缀
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.DefaultEnumSeparator">
            <summary>
            默认枚举分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.LoopMaxCount">
            <summary>
            循环最大次数：脚本循环的单次最大循环次数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.IsDefaultCustomFunction(System.String)">
            <summary>
            是默认自定义函数
            </summary>
            <param name="functionName"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Scripts.ScriptHelper.SpecialCharacterArray">
            <summary>
            特殊字符:除下划线_外标准104键盘可直接输入的符号(包括空格)！
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptHelper.SpecialCharacterStringArray">
            <summary>
            特殊字符字符串数组
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.GetIndent(XCSJ.Scripts.EGrammarType,System.Int32@)">
            <summary>
            根据语法规则获取缩进量
            </summary>
            <param name="grammarType">语法类型</param>
            <param name="indent">上次的缩进值；函数完成后修改为下次的缩进值</param>
            <returns>返回本次的缩进值;可能为负值；</returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.GetScript(System.String,XCSJ.Scripts.IScriptDriver)">
            <summary>
            获取脚本字符串对应的脚本名命令对象
            </summary>
            <param name="scriptString"></param>
            <param name="scriptDriver"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.GetNameDefault(System.Type)">
            <summary>
            获取默认名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.GetNameDefault(System.Reflection.MemberInfo)">
            <summary>
            获取默认名称
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper._formatMap">
            <summary>
            存储字符串替换信息；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptHelper.invalidScriptNameChars">
            <summary>
            无效脚本名称字符
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper._symbolFormatMap">
            <summary>
            标点符号替换信息；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptHelper.SymbolFormatMap">
            <summary>
            字符串替换信息 属性器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptHelper.FormatMap">
            <summary>
            标点符号字符串替换信息 属性器
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.#cctor">
            <summary>
            构造函数，保护型
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.SpecialCharacterToString">
            <summary>
            将特殊字符输出为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.scriptParamIntLeft">
            <summary>
            脚本参数整型左
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.scriptParamIntRight">
            <summary>
            脚本参数整型右
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.scriptParamFloatLeft">
            <summary>
            脚本参数浮点数左
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.scriptParamFloatRight">
            <summary>
            脚本参数浮点数右
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.CRLF">
            <summary>
            CRLF
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptHelper.CRLFArray">
            <summary>
            CRLF数组
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.Format(System.String)">
            <summary>
            格式化脚本的方法，即使用value替换的对应的key；将中问的冒号,逗号，分号，等号等转化为英文的；
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.GetFormatInfo(System.String)">
            <summary>
            获取格式化信息，并以分隔符回传字符串；
            </summary>
            <param name="sp"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.ComboFormat(System.String,System.String@,System.String[]@)">
            <summary>
            格式Combo字符串
            </summary>
            <param name="comboString"></param>
            <param name="comboName"></param>
            <param name="keyValues"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.SymbolFormat(System.String)">
            <summary>
            格式化脚本的方法，即使用value替换的对应的key;如将<see cref="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiter"/>替换为<see cref="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterReplace"/>
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.UnSymbolFormat(System.String)">
            <summary>
            反向格式化脚本，即使用key替换的对应的value;如将<see cref="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiterReplace"/>替换为<see cref="F:XCSJ.Scripts.ScriptHelper.ScriptParamDelimiter"/>
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.CheckScriptName(XCSJ.Scripts.Script)">
            <summary>
            检查脚本名称
            </summary>
            <param name="script"></param>
            <returns>如果脚本名称符合要求会返回true；script为空或脚本名称不符合要求返回false；</returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptHelper.CheckScriptName(System.String)">
            <summary>
            检查脚本名称
            </summary>
            <param name="scriptName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptCategoryAttribute">
            <summary>
            脚本目录特性
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptCategoryAttribute.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="cn"></param>
            <param name="en"></param>
        </member>
        <member name="T:XCSJ.Scripts.IExecuteScript">
            <summary>
            执行脚本接口
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IExecuteScript.ExecuteScript(XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IScriptOfClass">
            <summary>
            类脚本接口
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IScriptOfClass.needSetValueToFields">
            <summary>
            需要设置值到字段
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.IScriptExecuter">
            <summary>
            脚本执行器
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IScriptExecuter.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="id">脚本编号</param>
            <param name="param">脚本参数列表</param>
            <returns>**返回值对象不可为null**</returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptOfEnum.scriptExecuter">
            <summary>
            脚本执行器
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfEnumFactory.GetScripts``1(XCSJ.Scripts.IScriptExecuter,System.Int32,System.Int32)">
            <summary>
            获取脚本列表：直接根据枚举以及枚举的连续值生成脚本列表；取值范围为[min,max)的左闭右开区间内
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="scriptExecuter"></param>
            <param name="min">包含</param>
            <param name="max">不包含</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfEnumFactory.GetScripts``1(XCSJ.Scripts.IScriptExecuter)">
            <summary>
            获取脚本列表：直接根据枚举类型生成脚本列表；取值范围为枚举内部的所有值，且值至少要有<see cref="T:XCSJ.Scripts.ScriptNameAttribute"/>特性修饰；
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="scriptExecuter"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfEnumFactory.GetScripts(System.Type,System.Type)">
            <summary>
            获取脚本列表：直接根据枚举类型生成脚本列表；取值范围为枚举内部的所有值，且值至少要有<see cref="T:XCSJ.Scripts.ScriptNameAttribute"/>特性修饰；
            </summary>
            <param name="enumType"></param>
            <param name="ownerType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfStaticMethodFactory.TypeIsValid(System.Type)">
            <summary>
            限定为 非泛型公有静态类 
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfStaticMethodFactory.GetScriptsByReflect">
            <summary>
            反射查找所有 非泛型公有静态类 中静态公有的函数;
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfStaticMethodFactory.GetScripts``1">
            <summary>
            反射查找指定 泛型实体类 中静态公有的函数；只要是类即可；
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptOfStaticMethodFactory.GetScripts(System.Type[])">
            <summary>
            反射查找指定 类 中静态公有的函数；推荐使用，执行效率比模版的高；只要是类即可
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptOfStaticMethodFast">
            <summary>
            使用反射发出方式优化 静态函数 的调用执行逻辑 ；IOS平台不可用,原因是 System.Reflection.Emit 被禁用
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.Param">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.paramType">
            <summary>
            脚本参数的类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.limitType">
            <summary>
            参数最终的限定类型;仅为期望限定的类型；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.limitArray">
            <summary>
            脚本参数限定数组，根据脚本参数类型不同，传入的具体参数类型也不相同
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.defaultObject">
            <summary>
            默认对象：在界面编辑时添加的默认参数信息
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.customValueDrawer">
            <summary>
            自定义值绘制器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.name">
            <summary>
            参数名，参数的描述-或是候选值
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Param.index">
            <summary>
            内部排序的顺序不可重复
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Param.#ctor(System.Int32,XCSJ.Scripts.EParamType,XCSJ.Languages.Language,System.Type,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="index"></param>
            <param name="paramType"></param>
            <param name="name"></param>
            <param name="limitType"></param>
            <param name="limitArray"></param>
        </member>
        <member name="M:XCSJ.Scripts.Param.ToString">
            <summary>
            重载
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Param.GetLimitArray``1">
            <summary>
            将 limitArrary 尝试转换为期望的模版类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.ScriptParamList">
            <summary>
            脚本参数列表类
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamList.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamList.state">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamList.stack">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptParamList.localVarCollectionHost">
            <summary>
            本地变量集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptParamList.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.RTState">
            <summary>
            运行时状态类
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.active">
            <summary>
            默认不激活
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.line">
            <summary>
            当前的执行行的索引
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.endLine">
            <summary>
            执行的结束行数的索引-循环时用于跳出
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.count">
            <summary>
            已经执行的次数-循环时使用；用于防止死循环；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.grammarType">
            <summary>
            本行脚本的语法解析类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.returnValue">
            <summary>
            本脚本执行结果的返回值
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.function">
            <summary>
            用于存储语法规则为Begin与End之间的脚本字符串；仅当语法规则为 <see cref="F:XCSJ.Scripts.EGrammarType.Begin"/>或<see cref="F:XCSJ.Scripts.EGrammarType.End"/> 时本对象有效可用；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.RTState.canExecute">
            <summary>
            能否执行：当前脚本语句是否处在可执行环境中；即激活切返回值有效；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.RTState.#ctor(XCSJ.Scripts.EGrammarType,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="grammarType">本行脚本的语法解析类型</param>
            <param name="currentLineNumber">当前的执行行的索引</param>
        </member>
        <member name="T:XCSJ.Scripts.ScriptString">
            <summary>
            脚本字符串基类
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptString.function">
            <summary>
            脚本字符串所在的函数
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptString.scriptString">
            <summary>
            脚本字符串;底层会被存储的对象；
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptString.rt">
            <summary>
            脚本字符串运行时：针对脚本字符串<see cref="F:XCSJ.Scripts.ScriptString.scriptString"/>的编译信息存储的对象
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.#ctor(XCSJ.Scripts.ScriptString)">
            <summary>
            构造
            </summary>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.SetScriptString(System.String)">
            <summary>
            推荐使用本方法设定 scriptString 的值！
            </summary>
            <param name="scriptString"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TrySetFunction(XCSJ.Scripts.IFunction)">
            <summary>
            设置所属函数：如果已经设置则无法再设置；
            </summary>
            <param name="function"></param>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.MarkDirty">
            <summary>
            标记脏：因脚本字符串对象是会被预编译的，在脚本字符串发生修改后须标记脏，便于对脚本字符串执行重编译！
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.op_Implicit(XCSJ.Scripts.ScriptString)~System.String">
            <summary>
            显式转化将本类对象转化为字符串
            </summary>
            <param name="ss"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.op_Implicit(System.String)~XCSJ.Scripts.ScriptString">
            <summary>
            显式转化将字符串转化本类对象
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.ToString">
            <summary>
            覆盖父类方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TryGetParamData(XCSJ.Scripts.ScriptParam,XCSJ.Scripts.IParamData@)">
            <summary>
            尝试获取参数数据
            </summary>
            <param name="scriptParam">脚本参数</param>
            <param name="paramData">参数数据</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TrySetParamObject(XCSJ.Scripts.ScriptParam,System.Object)">
            <summary>
            尝试设置参数对象
            </summary>
            <param name="scriptParam">脚本参数</param>
            <param name="paramObject">参数对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.CanExecute(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IFunction)">
            <summary>
            能否执行
            </summary>
            <param name="scriptDriver"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TryParse(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.IFunction)">
            <summary>
            尝试编译当前脚本字符串对象 -- 基础预编译
            </summary>
            <param name="scriptDriver"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TryParse(XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ScriptStringRT@)">
            <summary>
            尝试分析
            </summary>
            <param name="scriptDriver"></param>
            <param name="scriptStringRT"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TryParse(System.String,System.String@)">
            <summary>
            尝试分析，获取脚本字符串对应的脚本命令
            </summary>
            <param name="scriptString">脚本字符串</param>
            <param name="cmd">脚本命令</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptString.TryParse(System.String,XCSJ.Scripts.IScriptDriver,XCSJ.Scripts.ScriptStringRT@)">
            <summary>
            尝试分析
            </summary>
            <param name="scriptString"></param>
            <param name="scriptDriver"></param>
            <param name="scriptStringRT"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IParamData">
            <summary>
            参数数据
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IParamData.paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IParamData.paramObject">
            <summary>
            参数对象
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ScriptStringAnalysisResult">
            <summary>
            脚本字符串分析结果：脚本字符串的完整格式为：[返回值=]命令[[,参数1][,...][,参数N]]
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.scriptStringMode">
            <summary>
            脚本字符串模式
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.isValid">
            <summary>
            有效的
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.returnValueVarStringAnalysisResults">
            <summary>
            返回值变量字符串分析结果数组
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.varStringAnalysisResult">
            <summary>
            变量字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.expressionStringAnalysisResult">
            <summary>
            表达式字符串
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.cmd">
            <summary>
            命令
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.hasValidCmd">
            <summary>
            有有效命令
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringAnalysisResult.paramArray">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptStringAnalysisResult.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptStringAnalysisResult.TryGetCmd(System.String,System.String@)">
            <summary>
            尝试获取命令
            </summary>
            <param name="scriptString">脚本字符串</param>
            <param name="cmd">脚本命令</param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Scripts.ScriptStringAnalysisResult.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.ScriptStringAnalysisResult.TryParse(System.String,XCSJ.Scripts.ScriptStringAnalysisResult@)">
            <summary>
            尝试分析
            </summary>
            <param name="scriptString">脚本字符串</param>
            <param name="scriptStringAnalysisResult">脚本字符串分析结果</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.ScriptStringAnalysisResult.TryParseNoCache(System.String,XCSJ.Scripts.ScriptStringAnalysisResult@)">
            <summary>
            无缓存尝试分析
            </summary>
            <param name="scriptString">脚本字符串</param>
            <param name="scriptStringAnalysisResult">脚本字符串分析结果</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.EScriptStringMode">
            <summary>
            脚本字符串模式
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.Standard">
            <summary>
            标准：带有效命令的脚本字符串；带返回值变量字符串；支持连续赋值操作；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.StandardWithoutReturnValue">
            <summary>
            无返回值标准：带有效命令的脚本字符串；不带返回值变量字符串；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.AssignmentEmpty">
            <summary>
            赋值空：无脚本命令；将空值赋值给返回值变量字符串对应的变量；支持连续赋值操作；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.AssignmentVarString">
            <summary>
            赋值变量字符串：无脚本命令；将变量字符串的值赋值给返回值变量字符串对应的变量；支持连续赋值操作；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.AssignmentExpressionString">
            <summary>
            赋值表达式字符串：无脚本命令；将表达式字符串计算结果的值赋值给返回值变量字符串对应的变量；支持连续赋值操作；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.VarString">
            <summary>
            变量字符串：无脚本命令；仅有一句有效的变量字符串；默认等价于直接日志输出变量字符串对应变量值；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.EScriptStringMode.ExpressionString">
            <summary>
            表达式字符串：无脚本命令；仅有一句有效的表达式字符串；默认等价于直接日志输出表达式字符串计算结果；
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ScriptStringRT">
            <summary>
            脚本字符串的运行时类
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringRT.scriptStringAnalysisResult">
            <summary>
            脚本字符串分析结果
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptStringRT.scriptExecuter">
            <summary>
            脚本执行器
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringRT.valid">
            <summary>
            有效的
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringRT.compiled">
            <summary>
            已编译
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringRT.script">
            <summary>
            脚本
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.ScriptStringRT.paramRT">
            <summary>
            脚本参数
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.ScriptStringRT.scriptString">
            <summary>
            脚本字符串：脚本字符串的运行时所依附的脚本字符串对象
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ScriptExecuter">
            <summary>
            脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.StandardWithoutReturnValue_ScriptExecuter">
            <summary>
            无返回值标准脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.Standard_ScriptExecuter">
            <summary>
            标准脚本执行器
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Standard_ScriptExecuter.retValueRTs">
            <summary>
            返回值变量运行时对象
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.AssignmentEmpty_ScriptExecuter">
            <summary>
            赋值空脚本执行器
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.AssignmentEmpty_ScriptExecuter.retValueRTs">
            <summary>
            返回值变量运行时对象
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.AssignmentVarString_ScriptExecuter">
            <summary>
            赋值变量字符串脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.AssignmentExpressionString_ScriptExecuter">
            <summary>
            赋值表达式字符串脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.VarString_ScriptExecuter">
            <summary>
            变量字符串脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.ExpressionString_ScriptExecuter">
            <summary>
            表达式字符串脚本执行器
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.VariableHelper">
            <summary>
            变量助手
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VariableHelper.IsVariable(System.String)">
            <summary>
            是变量：变量字符串是否是有效的
            </summary>
            <param name="varString">变量字符串</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VariableHelper.GetVarName(System.String)">
            <summary>
            获取变量名：通过<see cref="T:XCSJ.Scripts.VarStringAnalysisResult"/>对变量字符串进行分析,返回有效的变量名称
            </summary>
            <param name="varString"></param>
            <returns>存在规定的特殊字符，返回string.Empty；否则返回去掉头部变量标记符后的字符串；</returns>
        </member>
        <member name="M:XCSJ.Scripts.VariableHelper.Format(System.String)">
            <summary>
            格式化获取变量名，即去掉全部的变量标记符、特殊字符后剩余的字符串；强制不添加名称前后的变量标记符;
            </summary>
            <param name="name">变量名</param>
            <returns>返回处理后的有效变量名</returns>
        </member>
        <member name="M:XCSJ.Scripts.VariableHelper.FormatNoCache(System.String)">
            <summary>
            无缓存格式化获取变量名，即去掉全部的变量标记符、特殊字符后剩余的字符串；强制不添加名称前后的变量标记符;
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.VariableHelper.IsSystemVariable(System.String)">
            <summary>
            是系统变量：即<see cref="F:XCSJ.Scripts.ScriptHelper.SystemVariableNames"/>中预定义名称的变量；
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.IVariable">
            <summary>
            变量接口
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVariable.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.IVariable.hierarchyVar">
            <summary>
            层级变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVariable.OnHierarchyVarChanged">
            <summary>
            当层级变量变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.IVariable.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="value">新变量值</param>
            <returns>变量值:如成功设置返回新变量值，否则返回null;</returns>
        </member>
        <member name="M:XCSJ.Scripts.IVariable.GetValue">
            <summary>
            获取值
            </summary>
            <returns>变量值</returns>
        </member>
        <member name="T:XCSJ.Scripts.Variable">
            <summary>
            变量
            </summary>
        </member>
        <member name="E:XCSJ.Scripts.Variable.onValueChanged">
            <summary>
            变量值发生修改时的回调事件
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.Variable.name">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Variable.XCSJ#Interfaces#IName#name">
            <summary>
            变量名称
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Variable.varCollectionHost">
            <summary>
            变量集合宿主
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Variable.SetVarCollectionHost(XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            设置变量集合宿主
            </summary>
            <param name="varCollectionHost"></param>
        </member>
        <member name="P:XCSJ.Scripts.Variable.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Variable.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Variable.GetHierarchyVar">
            <summary>
            获取层级变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable.MarkDirty">
            <summary>
            标记为脏:会调用<see cref="M:XCSJ.Scripts.Variable.CallValueChanged"/>函数触发事件；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Variable.CallValueChanged">
            <summary>
            调用变量修改事件：即触发<see cref="E:XCSJ.Scripts.Variable.onValueChanged"/>事件
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Variable.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="value">新变量值</param>
            <returns>变量值:如成功设置返回新变量值，否则返回null;</returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable.GetValue``1">
            <summary>
            获取值对象
            </summary>
            <typeparam name="T">期望转换的类型</typeparam>
            <returns>转换后的值对象</returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable.OnHierarchyVarChanged">
            <summary>
            当层级变量变化后回调:会调用<see cref="M:XCSJ.Scripts.Variable.CallValueChanged"/>函数触发事件；
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.Variable`2">
            <summary>
            变量
            </summary>
            <typeparam name="TVariable"></typeparam>
            <typeparam name="THierarchyVar"></typeparam>
        </member>
        <member name="F:XCSJ.Scripts.Variable`2._hierarchyVar">
            <summary>
            层级变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.Variable`2.hierarchyVar">
            <summary>
            层级变量：如果<see cref="F:XCSJ.Scripts.Variable`2._hierarchyVar"/>有效则直接返回，否则缓存<see cref="M:XCSJ.Scripts.Variable`2.ToHierarchyVar"/>的值到<see cref="F:XCSJ.Scripts.Variable`2._hierarchyVar"/>并返回；
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.Variable`2.ToHierarchyVar">
            <summary>
            转层级变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable`2.GetHierarchyVar">
            <summary>
            获取层级变量:默认返回<see cref="P:XCSJ.Scripts.Variable`2.hierarchyVar"/>的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.Variable`2.MarkDirty">
            <summary>
            标记为脏
            </summary>
        </member>
        <member name="T:XCSJ.Scripts.CustomVariable">
            <summary>
            自定义变量:用于序列化存储变量名称、值、类型等信息的类型；
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.CustomVariable.value">
            <summary>
            变量值：不推荐直接修改本值，推荐使用<see cref="M:XCSJ.Scripts.CustomVariable.SetValue(System.String)"/>替代
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.CustomVariable._varType">
            <summary>
            变量类型
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.CustomVariable.isSystemVariable">
            <summary>
            是系统变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.OnHierarchyVarChanged">
            <summary>
            当层级变量变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.#ctor(XCSJ.Scripts.HierarchyVar,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            构造
            </summary>
            <param name="hierarchyVar"></param>
            <param name="varCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.#ctor(System.String,System.String,XCSJ.Scripts.EVarType,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="varType"></param>
            <param name="varCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.#ctor(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="varCollectionHost"></param>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.ToString">
            <summary>
            转为字符串
            </summary>
            <returns>字符串</returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.SetValueIfNeed(System.String)">
            <summary>
            需要时设置值，即新值与原值不同时设置值
            </summary>
            <param name="value">新变量值</param>
            <returns>变量值</returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.SetValue(System.String)">
            <summary>
            设置变量值
            </summary>
            <param name="value">新变量值</param>
            <returns>变量值</returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.op_Implicit(XCSJ.Scripts.CustomVariable)~System.Boolean">
            <summary>
            重载bool运算符
            </summary>
            <param name="variable">变量对象</param>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.Create(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            创建变量
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="varCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.ToHierarchyVar">
            <summary>
            转层级变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.SetValue(System.Object)">
            <summary>
            设置值
            </summary>
            <param name="value">新变量值</param>
            <returns>变量值:如成功设置返回新变量值，否则返回null;</returns>
        </member>
        <member name="M:XCSJ.Scripts.CustomVariable.GetValue">
            <summary>
            获取值
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Scripts.VariableRT">
            <summary>
            变量运行时
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VariableRT.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VariableRT._varStringAnalysisResult">
            <summary>
            变量字符串分析结果
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VariableRT.varStringAnalysisResult">
            <summary>
            变量字符串分析结果:无法将字符串分析为变量格式是，本对象为null
            </summary>
        </member>
        <member name="F:XCSJ.Scripts.VariableRT._hierarchyVar">
            <summary>
            层级变量
            </summary>
        </member>
        <member name="P:XCSJ.Scripts.VariableRT.hierarchyVar">
            <summary>
            层级变量
            </summary>
        </member>
        <member name="M:XCSJ.Scripts.VariableRT.Init(System.String)">
            <summary>
            初始化
            </summary>
            <param name="variableString"></param>
        </member>
        <member name="M:XCSJ.Scripts.VariableRT.Init(XCSJ.Scripts.VarStringAnalysisResult)">
            <summary>
            初始化
            </summary>
            <param name="varStringAnalysisResult"></param>
        </member>
        <member name="T:XCSJ.Message.BaseID`1">
            <summary>
            基础ID模版类，虚类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Message.BaseID`1.ID">
            <summary>
            存储的ID信息
            </summary>
        </member>
        <member name="M:XCSJ.Message.BaseID`1.#ctor">
            <summary>
            构造函数，用T类型的default赋值
            </summary>
        </member>
        <member name="M:XCSJ.Message.BaseID`1.#ctor(`0)">
            <summary>
            构造函数，用传入的参数赋值
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.BaseID`1.ToString">
            <summary>
            重载方法，调用模版T的ToString()输出方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.IMsg">
            <summary>
            消息回调的接口类
            </summary>
        </member>
        <member name="M:XCSJ.Message.IMsg.OnMsg(XCSJ.Message.Msg)">
            <summary>
            消息回调的接口函数
            </summary>
            <param name="msg">本对象仅在本接口函数的执行期有效，接口函数执行完成后本对象被强制加入回收链表，并会在后续执行初始化！切勿跨范围引用！</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.Msg">
            <summary>
            消息类**特别说明：本类有效期仅使用在IMsg接口函数的有效期内**
            </summary>
        </member>
        <member name="M:XCSJ.Message.Msg.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.Msg.#ctor(XCSJ.Message.MsgID)">
            <summary>
            构造函数，使用消息ID进行初始化
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.Msg.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表初始化
            </summary>
            <param name="param"></param>
        </member>
        <member name="P:XCSJ.Message.Msg.ID">
            <summary>
            消息ID 访问接口;只读；只能在初始化或构造函数中修改；
            </summary>
        </member>
        <member name="F:XCSJ.Message.Msg.m_ID">
            <summary>
            消息ID的实际存储，默认为EMsgID.Unkonw
            </summary>
        </member>
        <member name="P:XCSJ.Message.Msg.Params">
            <summary>
            消息参数列表 访问接口；
            可对消息参数内部的参数数据进行增加/删除/修改/访问；但不能对消息参数列表本身进行修改；
            </summary>
        </member>
        <member name="F:XCSJ.Message.Msg.m_Params">
            <summary>
            消息参数列表的实际存储
            </summary>
        </member>
        <member name="F:XCSJ.Message.Msg.Tag">
            <summary>
            消息额外绑定体
            </summary>
        </member>
        <member name="M:XCSJ.Message.Msg.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            </summary>
            <param name="param">需要有ID,Params的信息；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.Release">
            <summary>
            销毁;将本消息添加回消息工厂中;
            </summary>
        </member>
        <member name="M:XCSJ.Message.Msg.ToString">
            <summary>
            输出对象信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.EnumID``1">
            <summary>
            对ID进行枚举转换提供简化函数，内部调用 MsgID 类的同名方法完成
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.Value``1">
            <summary>
            值
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.Value``1(System.String)">
            <summary>
            值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.Value``1(System.Int32)">
            <summary>
            值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.Msg.Value``1(System.Enum)">
            <summary>
            值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.MsgFactory">
            <summary>
            消息Msg类的工厂类
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgFactory.Create(XCSJ.Message.MsgID)">
            <summary>
            静态方法，创建消息包；
            </summary>
            <param name="msgID">消息ID类，可以是其子类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgFactory.Create(System.Enum)">
            <summary>
            创建
            </summary>
            <param name="msgID"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgFactory.CreateOne(XCSJ.Algorithms.ParamList)">
            <summary>
            覆盖父类的方法，将父类方法否决，使用CreateMsg替换；
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.EMsgID">
            <summary>
            枚举的基础消息ID，为平台内部调用使用；<br />
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID._Begin">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID.None">
            <summary>
            所有消息的默认ID
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID.MinMsgID">
            <summary>
            预留ID,当前消息枚举内最小的消息ID
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID.TaskRunCallback">
            <summary>
            任务每执行一次后回调；<br />
            如果任务设定为仅执行一次，那也只回调一次本消息；<br />
            消息包参数：<br />
            Task    ：   回调的任务类对象；类型：BaseTask<br />
            Param   ：   任务执行时的传入参数；类型：object
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID.AddTaskException">
            <summary>
            添加多线程任务异常，仅发生异常时回调；<br />
            Exception   ：   存储异常的类对象；类型：Exception<br />
            </summary>
        </member>
        <member name="F:XCSJ.Message.EMsgID._End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:XCSJ.Message.MsgID">
            <summary>
            消息ID类~目前使用int做记录<br />
            同时作为消息ID基类存在
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgID.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="id">消息ID，数字类型</param>
        </member>
        <member name="M:XCSJ.Message.MsgID.#ctor(XCSJ.Message.EMsgID)">
            <summary>
            构造函数
            </summary>
            <param name="id">消息ID，枚举类型做数字转换后存储</param>
        </member>
        <member name="M:XCSJ.Message.MsgID.#ctor(System.Enum)">
            <summary>
            构造
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(System.Enum)~XCSJ.Message.MsgID">
            <summary>
            由枚举隐式转化
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(System.Int32)~XCSJ.Message.MsgID">
            <summary>
            由整型隐式转化
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(XCSJ.Message.EMsgID)~XCSJ.Message.MsgID">
            <summary>
            由<see cref="T:XCSJ.Message.EMsgID"/>隐式转化
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(XCSJ.Message.MsgID)~System.Enum">
            <summary>
            隐式转化为枚举；不可用
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(XCSJ.Message.MsgID)~System.Int32">
            <summary>
            隐式转化为整型
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.op_Implicit(XCSJ.Message.MsgID)~XCSJ.Message.EMsgID">
            <summary>
            隐式转化为<see cref="T:XCSJ.Message.EMsgID"/>
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.Message.MsgID.GetID``1">
            <summary>
            获取ID
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgID.EnumID``1">
            <summary>
            枚举ID
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgID.ToString">
            <summary>
            转化为可能的枚举字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgID.ToString``1">
            <summary>
            转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.MsgIDComparer">
            <summary>
            消息ID比较器类，做Dictionary的key值时，需要本比较器；
            如果不使用本比较器，则需要重载MsgID类中的Equals与GetHashCode函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgIDComparer.Equals(XCSJ.Message.MsgID,XCSJ.Message.MsgID)">
            <summary>
            比较器中的 相等 比较函数
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgIDComparer.GetHashCode(XCSJ.Message.MsgID)">
            <summary>
            比较器中的 hash 函数，用于计算hash值；
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.MsgManager">
            <summary>
            同步类型的消息管理类；<br />
            将添加的消息同步广播到对应的委托函数；<br />
            同步回调消息，即主线程中回调消息；<br />
            本类中的所有方法，只能在主线程中调用，否则将产生不确定因素；
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.m_MsgList">
            <summary>
            消息队列
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.m_TmpMsgList">
            <summary>
            临时消息队列
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.m_MsgCallbackFun">
            <summary>
            消息事件委托链表
            </summary>
        </member>
        <member name="P:XCSJ.Message.MsgManager.Item(XCSJ.Message.MsgID)">
            <summary>
            执行指定MsgID的事件委托链函数，依次调用执行；<br />
            同步调用;执行完成过后将消息包执行销毁操作
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgManager.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化同步消息管理
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgManager.Release">
            <summary>
            销毁同步消息管理
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.Startup(XCSJ.Algorithms.ParamList)">
            <summary>
            启动同步消息管理
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgManager.Stop">
            <summary>
            停止同步消息管理
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.OnMsg(XCSJ.Message.Msg)">
            <summary>
            消息回调
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgManager.OnUpdate">
            <summary>
            更新函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(XCSJ.Message.Msg,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msg"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="value1"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.String,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.String,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.SendMsg(System.Enum,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            发送消息
            </summary>
            <param name="msgID"></param>
            <param name="key1"></param>
            <param name="value1"></param>
            <param name="key2"></param>
            <param name="value2"></param>
            <param name="key3"></param>
            <param name="value3"></param>
            <param name="key4"></param>
            <param name="value4"></param>
            <param name="key5"></param>
            <param name="value5"></param>
            <param name="real"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddListener(XCSJ.Message.MsgID,XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            等同于 AddFun 函数
            </summary>
            <param name="msgID"></param>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddListener(XCSJ.Message.MsgID,XCSJ.Message.IMsg)">
            <summary>
            等同于 AddFun 函数
            </summary>
            <param name="msgID"></param>
            <param name="msgObj"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddListenerBatch``1(XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            批量添加监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddListenerBatch``1(XCSJ.Message.IMsg)">
            <summary>
            批量添加监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msgObj"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveListener(XCSJ.Message.MsgID,XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            等同于 RemoveFun 函数 
            </summary>
            <param name="msgID"></param>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveListener(XCSJ.Message.MsgID,XCSJ.Message.IMsg)">
            <summary>
            等同于 RemoveFun 函数 
            </summary>
            <param name="msgID"></param>
            <param name="msgObj"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveListenerBatch``1(XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            批量移除监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveListenerBatch``1(XCSJ.Message.IMsg)">
            <summary>
            批量移除监听
            </summary>
            <typeparam name="T"></typeparam>
            <param name="msgObj"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.ContainsListener(XCSJ.Message.MsgID,XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            等同于 ContainsFun 函数
            </summary>
            <param name="msgID"></param>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Message.MsgManager.ContainsListener(XCSJ.Message.MsgID,XCSJ.Message.IMsg)">
            <summary>
            等同于 ContainsFun 函数
            </summary>
            <param name="msgID"></param>
            <param name="msgObj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Message.MsgManager.MsgLoopTask">
            <summary>
            消息循环任务
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.MsgLoopTask.m_MsgManager">
            <summary>
            存储消息管理类实例对象的引用
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.MsgLoopTask.#ctor(XCSJ.Message.MsgManager)">
            <summary>
            构造函数，使用消息管理类实例对象进行填充；
            </summary>
            <param name="msgManager"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.MsgLoopTask.Run(System.Object)">
            <summary>
            消息循环-执行函数
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Message.MsgManager.AddFunTask">
            <summary>
            添加消息绑定委托的任务；<br />
            用户可能在回调函数中添加消息绑定，但是回调函数本身就在使用着委托链，添加操作会导致访问的委托链被修改，导致崩溃；
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.AddFunTask.m_MsgManager">
            <summary>
            存储消息管理类实例对象的引用
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.AddFunTask.m_MsgID">
            <summary>
            当前处理的消息ID
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.AddFunTask.m_Fun">
            <summary>
            待处理的委托函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddFunTask.#ctor(XCSJ.Message.MsgManager,XCSJ.Message.MsgID,XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            构造函数
            </summary>
            <param name="msgManager"></param>
            <param name="msgID"></param>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.AddFunTask.Run(System.Object)">
            <summary>
            使用多线程方式加入委托
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Message.MsgManager.RemoveFunTask">
            <summary>
            移除消息绑定委托的任务；<br />
            用户可能在回调函数中移出消息绑定，但是回调函数本身就在使用着委托链，移除操作会导致访问的委托链被修改，导致崩溃；
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.RemoveFunTask.m_MsgManager">
            <summary>
             存储消息管理类实例对象的引用
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.RemoveFunTask.m_MsgID">
            <summary>
            消息ID
            </summary>
        </member>
        <member name="F:XCSJ.Message.MsgManager.RemoveFunTask.m_Fun">
            <summary>
            待处理的委托函数
            </summary>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveFunTask.#ctor(XCSJ.Message.MsgManager,XCSJ.Message.MsgID,XCSJ.Collections.DelegateFun{XCSJ.Message.Msg})">
            <summary>
            构造函数
            </summary>
            <param name="msgManager"></param>
            <param name="msgID"></param>
            <param name="fun"></param>
        </member>
        <member name="M:XCSJ.Message.MsgManager.RemoveFunTask.Run(System.Object)">
            <summary>
            使用多线程方式移出任务委托
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Net.Address">
            <summary>
            地址类
            </summary>
        </member>
        <member name="F:XCSJ.Net.Address.address">
            <summary>
            地址
            </summary>
        </member>
        <member name="F:XCSJ.Net.Address.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="M:XCSJ.Net.Address.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Address.#ctor(XCSJ.Net.Address)">
            <summary>
            构造
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:XCSJ.Net.Address.#ctor(System.String,System.Int32)">
            <summary>
            够着
            </summary>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:XCSJ.Net.Address.op_Implicit(XCSJ.Net.Address)~System.String">
            <summary>
            隐式转字符串
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:XCSJ.Net.Address.op_Implicit(System.String)~XCSJ.Net.Address">
            <summary>
            隐式转地址
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:XCSJ.Net.Address.Create(System.String,System.Int32)">
            <summary>
            构建
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Address.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Address.ConvertFrom(System.String)">
            <summary>
            从字符串转化
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Address.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Address.ToString(System.String,System.Int32)">
            <summary>
            转字符串
            </summary>
            <param name="address"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.IAddress">
            <summary>
            地址接口
            </summary>
        </member>
        <member name="P:XCSJ.Net.IAddress.address">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.IAddress.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="T:XCSJ.Net.EClientState">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.WillConnect">
            <summary>
            将要连接
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Connecting">
            <summary>
            连接中
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Connected">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.ConnectFail">
            <summary>
            连接失败
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.WillClose">
            <summary>
            将要关闭;切换至本状态时,有可能是在多线程情况下触发的；对应事件捕获后的处理请特别注意这点！
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Closing">
            <summary>
            关闭中
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.Closed">
            <summary>
            已关闭
            </summary>
        </member>
        <member name="F:XCSJ.Net.EClientState.NetError">
            <summary>
            网络错误；捕获到状态为<see cref="F:XCSJ.Net.EClientState.WillClose"/>之后会切换为本状态，之后执行关闭操作；
            </summary>
        </member>
        <member name="T:XCSJ.Net.IClient">
            <summary>
            客户端接口
            </summary>
        </member>
        <member name="P:XCSJ.Net.IClient.clientState">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="P:XCSJ.Net.IClient.netQAMode">
            <summary>
            网络问答模式
            </summary>
        </member>
        <member name="M:XCSJ.Net.IClient.Connect(XCSJ.Net.IAddress)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.IClient.Write(System.String)">
            <summary>
            写入
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.IClient.Read(System.String@)">
            <summary>
            读取
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.ISendNetPackage">
            <summary>
            发送网络包
            </summary>
        </member>
        <member name="M:XCSJ.Net.ISendNetPackage.Send(XCSJ.Net.NetPackage)">
            <summary>
            发送
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.IAsyncClient">
            <summary>
            异步客户端
            </summary>
        </member>
        <member name="M:XCSJ.Net.IAsyncClient.ConnectAsync(XCSJ.Net.IAddress,System.String,System.Action{XCSJ.Net.IAsyncClient})">
            <summary>
            异步连接
            </summary>
            <param name="serverAddress"></param>
            <param name="path"></param>
            <param name="onConnect"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Net.IAsyncClient.validAsyncMode">
            <summary>
            有效异步模式：如果值为True,标识数据的发送、接收是支持异步的，即已经有效实现收发的异步机制；
            </summary>
        </member>
        <member name="E:XCSJ.Net.IAsyncClient.onAsyncReceived">
            <summary>
            当异步接收到：当以异步方式接收到数据包时回调
            </summary>
        </member>
        <member name="T:XCSJ.Net.INetPackage">
            <summary>
            网络包同步
            </summary>
        </member>
        <member name="M:XCSJ.Net.INetPackage.Write(XCSJ.Net.NetPackage)">
            <summary>
            写入
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.INetPackage.Read``1(``0@)">
            <summary>
            读取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.IClientNetPackage">
            <summary>
            客户端网络包
            </summary>
        </member>
        <member name="M:XCSJ.Net.IClientNetPackage.TryRequestAndResponse``1(XCSJ.Net.QuestionNetPackage,``0@)">
            <summary>
            尝试请求并等待响应
            </summary>
            <typeparam name="T"></typeparam>
            <param name="question"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.IClientNetPackage.HeartHeat">
            <summary>
            心跳
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.IBaseClient">
            <summary>
            基础客户端接口
            </summary>
        </member>
        <member name="P:XCSJ.Net.IBaseClient.remoteAddress">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.IBaseClient.localAddress">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="T:XCSJ.Net.BaseClient">
            <summary>
            基础客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.encryptFunc">
            <summary>
            加密委托函数；
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.decryptFunc">
            <summary>
            解密委托函数；
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.remoteAddress">
            <summary>
            远程地址，可能是远程服务器的IP端口、URL等信息
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.localAddress">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.clientState">
            <summary>
            客户端状态
            </summary>
        </member>
        <member name="F:XCSJ.Net.BaseClient._netQAMode">
            <summary>
            网络问答模式:默认为<see cref="F:XCSJ.Net.ENetQAMode.MQMA"/>
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.netQAMode">
            <summary>
            网络问答模式
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseClient.ToFriendlyString">
            <summary>
            转友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Connect(XCSJ.Net.IAddress)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseClient.IsConnected">
            <summary>
            是否已连接:默认判断是否已连接的方法是<see cref="P:XCSJ.Net.BaseClient.clientState"/>的值为<see cref="F:XCSJ.Net.EClientState.Connected"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Write(System.String)">
            <summary>
            写入数据，写入的数据发往远程服务
            </summary>
            <param name="data"></param>
            <returns>成功写入数据的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Read(System.String@)">
            <summary>
            读取数据，读取的数据来自远程服务
            </summary>
            <param name="data"></param>
            <returns>成功读取数据的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.SetEncryptFunc(System.Func{System.String,System.String})">
            <summary>
            设置加密函数
            </summary>
            <param name="encryptFunc"></param>
        </member>
        <member name="M:XCSJ.Net.BaseClient.SetDecryptFunc(System.Func{System.String,System.String})">
            <summary>
            设置解密函数
            </summary>
            <param name="decryptFunc"></param>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.WriteWithEncrypt(System.String)">
            <summary>
             将数据加密后执行写入
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.ReadWithDecrypt(System.String@)">
            <summary>
            从网络流阻塞等待读取数据，并执行解密操作
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Write(XCSJ.Net.NetPackage)">
            <summary>
            会调用加密函数
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.Read``1(``0@)">
            <summary>
            会执行解密函数
            </summary>
            <typeparam name="T"></typeparam>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.TryRequestAndResponse``1(XCSJ.Net.QuestionNetPackage,``0@)">
            <summary>
            尝试请求并等待响应
            </summary>
            <typeparam name="T"></typeparam>
            <param name="question"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Net.BaseClient.heartHeadQ">
            <summary>
            心跳问题
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseClient.heartHeadA">
            <summary>
            心跳答案
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseClient.HandleHeartHeatA(XCSJ.Net.HeartHeatA)">
            <summary>
            处理心跳答案
            </summary>
            <param name="heartHeatA"></param>
        </member>
        <member name="M:XCSJ.Net.BaseClient.HeartHeat">
            <summary>
            心跳：同步模式的心跳响应机制，会阻塞等待心跳结果；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseClient.HeartHeat(XCSJ.Net.BaseClient)">
            <summary>
            发送心跳数据包，并同步等待返回; 如果传入的基础客户端无效或未连接会报出异常
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.ClientInfo">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="F:XCSJ.Net.ClientInfo.client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:XCSJ.Net.ClientInfo._createTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.startTime">
            <summary>
            启动时间
            </summary>
        </member>
        <member name="F:XCSJ.Net.ClientInfo._lastTime">
            <summary>
            最后时间
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.lastTime">
            <summary>
            最后时间
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.receivePackageCount">
            <summary>
            接收的数据包数目
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.receiveBytes">
            <summary>
            接收字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.sendPackageCount">
            <summary>
            发送数据包数目
            </summary>
        </member>
        <member name="P:XCSJ.Net.ClientInfo.sendBytes">
            <summary>
            发送字节数
            </summary>
        </member>
        <member name="M:XCSJ.Net.ClientInfo.UpdateReceiveInfo(System.Int64,System.Boolean)">
            <summary>
            更新接收信息
            </summary>
            <param name="readBytes">读取字节数</param>
            <param name="total">如果是总读取字节数为True;如果是累加读取字节数为False;</param>
        </member>
        <member name="M:XCSJ.Net.ClientInfo.UpdateSendInfo(System.Int64,System.Boolean)">
            <summary>
            更新发送信息
            </summary>
            <param name="writeBytes">写入字节数</param>
            <param name="total">如果是总读取字节数为True;如果是累加读取字节数为False;</param>
        </member>
        <member name="T:XCSJ.Net.ClientInfo`1">
            <summary>
            客户端信息泛型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Net.ClientInfo`1.realClient">
            <summary>
            真实客户端
            </summary>
        </member>
        <member name="T:XCSJ.Net.IServer">
            <summary>
            服务接口
            </summary>
        </member>
        <member name="M:XCSJ.Net.IServer.Restart">
            <summary>
            重启
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.BaseServer">
            <summary>
            基础服务
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServer.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseServer.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServer.Restart">
            <summary>
            重启
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseServer.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.NetServerConfig">
            <summary>
            网络服务器配置
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.autoStartServer">
            <summary>
            自动启动服务
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.maxLogShowCount">
            <summary>
            最大日志显示数
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.outputLog">
            <summary>
            输出日志
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.port">
            <summary>
            端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.readTimeout">
            <summary>
            读取超时时间
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfig.writeTimeout">
            <summary>
            写入超时时间
            </summary>
        </member>
        <member name="T:XCSJ.Net.NetServerConfigWithDeviceAuthentication">
            <summary>
            带设备认证的网络服务器配置
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfigWithDeviceAuthentication.deviceAuthenticationIP">
            <summary>
            设备认证IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfigWithDeviceAuthentication.deviceAuthenticationPort">
            <summary>
            设备认证端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfigWithDeviceAuthentication.deviceSerialNumber">
            <summary>
            设备序列号
            </summary>
        </member>
        <member name="P:XCSJ.Net.NetServerConfigWithDeviceAuthentication.deviceActivateCode">
            <summary>
            设备激活码
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.HttpHelper">
            <summary>
            Http组手类
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultPort">
            <summary>
            默认端口
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultSafetyPort">
            <summary>
            默认安全端口
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultFormFieldName">
            <summary>
            默认表单字段名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultContentType">
            <summary>
            默认内容类型
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.ProtocolName">
            <summary>
            协议名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.SafetyProtocolName">
            <summary>
            安全协议名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.requestQueue">
            <summary>
            所有的请求队列，不包括正在执行中的
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.processingList">
            <summary>
            正在处理中的~
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultConcurrencyCount">
            <summary>
            默认并发数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpHelper.maxConcurrencyCount">
            <summary>
            最大并发数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpHelper.currentConcurrencyCount">
            <summary>
            当前并发数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpHelper.pendingRequestCount">
            <summary>
            待定请求数
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultFulshBytes">
            <summary>
            默认刷入磁盘字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpHelper.fulshBytes">
            <summary>
            刷入字节数
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.DefaultReadWriteTimeout">
            <summary>
            默认读取写入超时时间
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper._readWriteTimeout">
            <summary>
            异步读写时的超时时间，超过该时间无数据接收或处理，会强制断开连接
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpHelper.readWriteTimeout">
            <summary>
            读写超时的时间，单位毫秒
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.useThreadForStartRequest">
            <summary>
            使用线程用于启动请求
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.StartRequestAsync">
            <summary>
            启动异步请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.RequestAsync``1(``0,System.Action{``0},System.Action{``0})">
            <summary>
            异步请求数据信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <param name="onAfterEndGetResponse"></param>
            <param name="onBeforeBeginGetResponse"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.RequestTextAsync(System.String,System.Action{XCSJ.Net.Http.TextAsync},System.Action{XCSJ.Net.Http.TextAsync},XCSJ.Algorithms.ParamList,System.Boolean)">
            <summary>
            异步请求文本
            </summary>
            <param name="url"></param>
            <param name="onCompleted"></param>
            <param name="onError"></param>
            <param name="tag"></param>
            <param name="useRquestQueue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.DownloadFileAsync(System.String,System.String,System.Action{XCSJ.Net.Http.DownloadFile},System.Action{XCSJ.Net.Http.DownloadFile},System.Action{XCSJ.Net.Http.DownloadFile},XCSJ.Algorithms.ParamList,System.Boolean)">
            <summary>
            异步下载文件
            </summary>
            <param name="url"></param>
            <param name="filePath"></param>
            <param name="onRreceiveData"></param>
            <param name="onDownloadCompleted"></param>
            <param name="onError"></param>
            <param name="tag"></param>
            <param name="useRquestQueue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.BreakpointDownloadFileAsync(System.String,System.String,System.Action{XCSJ.Net.Http.BreakpointDownloadFile},System.Action{XCSJ.Net.Http.BreakpointDownloadFile},System.Action{XCSJ.Net.Http.BreakpointDownloadFile},XCSJ.Algorithms.ParamList,System.Boolean)">
            <summary>
            异步断点下载文件
            </summary>
            <param name="url"></param>
            <param name="filePath"></param>
            <param name="onRreceiveData"></param>
            <param name="onDownloadCompleted"></param>
            <param name="onError"></param>
            <param name="tag"></param>
            <param name="useRquestQueue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.StartRequest``1(``0@,System.Action{``0},System.Action{``0},System.Action{``0})">
            <summary>
            启动请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <param name="initCallback"></param>
            <param name="onAfterGetResponse"></param>
            <param name="onBeforeGetResponse"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.RequestText(System.String,XCSJ.Net.Http.Text@)">
            <summary>
            请求文本
            </summary>
            <param name="url"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.RequestText(System.String,System.String,XCSJ.Net.Http.Text@)">
            <summary>
            不支持中文！！未做中文转义！！！
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.QuotationMark">
            <summary>
            引号标记
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.quotationMark">
            <summary>
            引号标记
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.NonBreakSpace">
            <summary>
            无间断空格
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.nonBreakSpace">
            <summary>
            无间断空格
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.Ampersand">
            <summary>
            与符号
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.ampersand">
            <summary>
            与符号
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.LessThanSign">
            <summary>
            小于符号
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.lessThanSign">
            <summary>
            小于符号
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.GreaterThanSign">
            <summary>
            大于符号
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpHelper.greaterThanSign">
            <summary>
            大于符号
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.FromHtmlString(System.String)">
            <summary>
            从Html字符串转化
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpHelper.ToHtmlString(System.String)">
            <summary>
            转化为Html字符串
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Http.BreakpointDownloadFile">
            <summary>
            断点下载文件
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.BreakpointDownloadFile.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.BreakpointDownloadFile.redownloadWhenNotSupport">
            <summary>
            不支持断点时重新下载？
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.BreakpointDownloadFile.redownloadWhenFileConflict">
            <summary>
            重新下载当冲突时
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.BreakpointDownloadFile.fragmentMerge">
            <summary>
            碎片合并
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.BreakpointDownloadFile.configFilePath">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.BreakpointDownloadFile.isNewCreateFile">
            <summary>
            是否是新创建文件
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.BreakpointDownloadFile.postion">
            <summary>
            在文件中的位置
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.BreakpointDownloadFile.progress">
            <summary>
            百分比进度
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.BreakpointDownloadFile.isDownloadOver">
            <summary>
            是否下载完成
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.BreakpointDownloadFile.OnReceiveData">
            <summary>
            当接收数据时
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.BreakpointDownloadFile.CreateFile">
            <summary>
            创建文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.BreakpointDownloadFile.CloseFile">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.BreakpointDownloadFile.OnBeginHandle">
            <summary>
            当开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Http.DownloadFile">
            <summary>
            下载文件
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.DownloadFile.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.DownloadFile.OnBeginHandle">
            <summary>
            当开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Http.FileResponse">
            <summary>
            文件响应
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.filePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.tmpFilePath">
            <summary>
            临时文件路径
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.FileResponse.buffers">
            <summary>
            从网络流中读取时使用的缓冲区
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.fileStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.fileSize">
            <summary>
            文件长度
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.downloadBytes">
            <summary>
            下载的字节数,本次启动后下载的字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.newReadBytes">
            <summary>
            新读取的字节数；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.progress">
            <summary>
            百分比进度
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.isDownloadOver">
            <summary>
            是否下载完成
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.FileResponse.receiveDataCallback">
            <summary>
            收到数据回调
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.OnReceiveData">
            <summary>
            当收到数据
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.EndHandle(System.Boolean)">
            <summary>
            结束处理
            </summary>
            <param name="successComplete"></param>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.CreateFile">
            <summary>
            创建文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.CloseFile">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.BeginRead(XCSJ.Net.Http.FileResponse)">
            <summary>
            开始读取
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:XCSJ.Net.Http.FileResponse.EndRead(System.IAsyncResult)">
            <summary>
            结束读取
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:XCSJ.Net.Http.EHttpVerb">
            <summary>
            Http动词
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.GET">
            <summary>
            GET
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.POST">
            <summary>
            POST
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.HEAD">
            <summary>
            HEAD
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.PUT">
            <summary>
            PUT
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.CREATE">
            <summary>
            CREATE
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.DELETE">
            <summary>
            DELETE
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.CONNECT">
            <summary>
            CONNECT
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.EHttpVerb.OPTIONS">
            <summary>
            OPTIONS
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.KnownHeaderNames">
            <summary>
            已知的头部名称
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.CacheControl">
            <summary>
            缓存控制
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Connection">
            <summary>
            连接性
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.KeepAlive">
            <summary>
            持久连接
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Pragma">
            <summary>
            编译指示
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ProxyConnection">
            <summary>
            代理连接
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Trailer">
            <summary>
            拖车
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.TransferEncoding">
            <summary>
            转移编码
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Upgrade">
            <summary>
            升级
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Via">
            <summary>
            认证凭据
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentDisposition">
            <summary>
            内容布局
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentEncoding">
            <summary>
            内容编码
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentLanguage">
            <summary>
            内容语言
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentLocation">
            <summary>
            内容本地化
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentRange">
            <summary>
            内容区间
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Expires">
            <summary>
            到期
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.LastModified">
            <summary>
            最后修改日期
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Age">
            <summary>
            年龄
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Location">
            <summary>
            本地化
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ProxyAuthenticate">
            <summary>
            代理真实性
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.RetryAfter">
            <summary>
            随后重新尝试
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Server">
            <summary>
            服务器
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SetCookie">
            <summary>
            设置Cookie
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SetCookie2">
            <summary>
            设置Cookie2
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Vary">
            <summary>
            差异
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.WWWAuthenticate">
            <summary>
            WWW认证
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Accept">
            <summary>
            接受
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.AcceptCharset">
            <summary>
            接受字符集
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.AcceptEncoding">
            <summary>
            接受编码
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.AcceptLanguage">
            <summary>
            接受语言
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Authorization">
            <summary>
            认证
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Cookie">
            <summary>
            Cookie
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Cookie2">
            <summary>
            Cookie2
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Expect">
            <summary>
            期望
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.From">
            <summary>
            来源
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.IfMatch">
            <summary>
            如果匹配
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.IfModifiedSince">
            <summary>
            如果自从修改
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.IfNoneMatch">
            <summary>
            如果不匹配
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.IfRange">
            <summary>
            如果区间
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.IfUnmodifiedSince">
            <summary>
            如果自从未修改
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.MaxForwards">
            <summary>
            最大朝向
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ProxyAuthorization">
            <summary>
            代理认证
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Referer">
            <summary>
            推荐人
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Range">
            <summary>
            区间
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.UserAgent">
            <summary>
            用户代理
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ContentMD5">
            <summary>
            内容MD5
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.ETag">
            <summary>
            标签
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.TE">
            <summary>
            TE
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Allow">
            <summary>
            允许
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.AcceptRanges">
            <summary>
            接受区间
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.P3P">
            <summary>
            P3P
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.XPoweredBy">
            <summary>
            X-Powered-By
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.XAspNetVersion">
            <summary>
            ASP.NET版本
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SecWebSocketKey">
            <summary>
            安全WebSocket键
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SecWebSocketExtensions">
            <summary>
            安全WebSocket扩展
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SecWebSocketAccept">
            <summary>
            安全WebSocket接受
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.Origin">
            <summary>
            原始
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SecWebSocketProtocol">
            <summary>
            安全WebSocket协议
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.KnownHeaderNames.SecWebSocketVersion">
            <summary>
            安全WebSocket版本
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.HttpClient">
            <summary>
            HTTP客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.requestUriString">
            <summary>
            请求Uri字符串
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.request">
            <summary>
            请求
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.response">
            <summary>
            响应
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.remoteIP">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.remotePort">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.remoteAddress">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.HttpClient.localAddress">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.HttpClient.postOrGet">
            <summary>
            Post或Get
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="requestUriString"></param>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.Connect(XCSJ.Net.IAddress)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.IsConnected">
            <summary>
            是否已连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.Write(System.String)">
            <summary>
            写入
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.Read(System.String@)">
            <summary>
            读取
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.HttpClient.TryRequestAndResponse``1(XCSJ.Net.QuestionNetPackage,``0@)">
            <summary>
            尝试请求并响应
            </summary>
            <typeparam name="T"></typeparam>
            <param name="question"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Http.Response">
            <summary>
            响应
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.Response.url">
            <summary>
            URL
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.Response.request">
            <summary>
            请求
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.Response.response">
            <summary>
            响应
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.Response.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.ResponseAsync">
            <summary>
            异步响应
            </summary>
        </member>
        <member name="F:XCSJ.Net.Http.ResponseAsync.tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.ResponseAsync.errorCallback">
            <summary>
            发生错误时的回调
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.ResponseAsync.completeCallback">
            <summary>
            正常任务执行完成的回调
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.ResponseAsync.Error(System.String)">
            <summary>
            错误
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:XCSJ.Net.Http.ResponseAsync.OnBeginHandle">
            <summary>
            当开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Http.ResponseAsync.EndHandle(System.Boolean)">
            <summary>
            结束处理
            </summary>
            <param name="successComplete"></param>
        </member>
        <member name="M:XCSJ.Net.Http.ResponseAsync.Abort">
            <summary>
            终止
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.Text.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="T:XCSJ.Net.Http.TextAsync">
            <summary>
            文本异步
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.TextAsync.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="P:XCSJ.Net.Http.TextAsync.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="M:XCSJ.Net.Http.TextAsync.OnBeginHandle">
            <summary>
            当开始处理
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.NetHelper">
            <summary>
            网络辅助类
            </summary>
        </member>
        <member name="F:XCSJ.Net.NetHelper.LocalIP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="F:XCSJ.Net.NetHelper.DefaultTimeoutOfClient">
            <summary>
            客户端收发数据的 默认超时时间，单位为ms（毫秒），默认3秒
            </summary>
        </member>
        <member name="F:XCSJ.Net.NetHelper.DefaultTimeoutOfServer">
            <summary>
            服务器收发数据的 默认超时时间，单位为ms（毫秒），默认300秒
            </summary>
        </member>
        <member name="M:XCSJ.Net.NetHelper.StringHandle(System.String,System.Func{System.String,System.String})">
            <summary>
            字符串处理
            </summary>
            <param name="data"></param>
            <param name="stringHandle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.GetHostName">
            <summary>
            获取主机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.GetHostIP">
            <summary>
            获取主机IP
            </summary>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToIP(System.String)">
            <summary>
            将URL或IP转化为IP
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.IsValidPort(System.Int32)">
            <summary>
            是有效端口,范围区间(0,65535]，0端口认为是无效端口
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToWSPort(System.Int32)">
            <summary>
            转WebSocket端口：采用端口号+1方法设置WS端口
            </summary>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.NeedWaitCallbackAnswer(XCSJ.Net.ENetQAMode)">
            <summary>
            需要等待回调答案
            </summary>
            <param name="netQAMode"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.IsOneQuestionOneAnswer(XCSJ.Net.ENetQAMode)">
            <summary>
            是否是一问一答模式
            </summary>
            <param name="netQAMode"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.IsMultiQuestionMultiAnswer(XCSJ.Net.ENetQAMode)">
            <summary>
            是否是多问多答模式
            </summary>
            <param name="netQAMode"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToString(System.Byte[])">
            <summary>
            字节流转字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            字节流转字符串
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToBytes(System.String)">
            <summary>
            字符串转字节流
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToInt(System.Byte[],System.Int32)">
            <summary>
            字节流转整数
            </summary>
            <param name="data"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.ToBytes(System.Int32)">
            <summary>
            整数转字节流
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.TryTo4N(System.String,System.Byte[]@)">
            <summary>
            尝试将字符串封装为4 + N模式的字节流
            </summary>
            <param name="data">为空字符串或null时，不处理</param>
            <param name="_4NBytes">4+N字节流，即4字节的长度+N字节的数据的完整字节流</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.TryTo4N(System.Byte[],System.Byte[]@)">
            <summary>
            尝试将字节流封装为4 + N模式的字节流
            </summary>
            <param name="dataBytes">为空数组或null时，不处理</param>
            <param name="_4NBytes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.TryFrom4N(System.Byte[],System.Byte[]@)">
            <summary>
            尝试将4 + N模式的字节流封装拆分获取N字节流
            </summary>
            <param name="_4NBytes">必须严格符合的4+N模式字节流</param>
            <param name="dataBytes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetHelper.TryFrom4N(System.Byte[],System.String@)">
            <summary>
            尝试将4 + N模式的字节流封装拆分获取N字节流对应的字符串
            </summary>
            <param name="_4NBytes"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.ENetQAMode">
            <summary>
            网络问答模式:即针对客户端实体有效的概念；M主线程，T多线程，T1多线程1，T2多线程2，Q问题（请求），A答案（响应）；
            一问一答:一个问题有且对应一个答案，即一个问题没有对应的一个答案之前，不会处理下一个问题;客户端的问题发送与答案接收在一个线程中,服务器的问题接收、问题处理、答案发送在一个线程中,保证问题与答案的成对性;
            多问多答:可以同时提出多个问题（X个问题，问题处理的顺序理论上是提出问题的顺序），获取的答案也是多个（Y个答案，答案的顺序不与问题顺序一一对应，答案的数量Y与问题数量X也可能不一致）,不保证问题与答案的成对性;
            </summary>
        </member>
        <member name="F:XCSJ.Net.ENetQAMode.MQMA">
            <summary>
            主问主答:在主线程中一问一答模式（一问一答）；即在主线程中每写入（发送）一个问题，必须对应在主线程中读取（接收）一个答案；会阻塞等待答案直接返回；
            </summary>
        </member>
        <member name="F:XCSJ.Net.ENetQAMode.MQTA">
            <summary>
            主问线答:在主线程中一问，多线程中多答模式（多问多答）；即在主线程中每写入（发送）一个问题，可在多线程中读取（接收）零个、一个或多个答案；写入问题时阻塞，答案需要等待回调返回；
            </summary>
        </member>
        <member name="F:XCSJ.Net.ENetQAMode.TQMA">
            <summary>
            线问主答:在多线程中一问，主线程中多答模式（多问多答）；即在多线程中每写入（发送）一个问题，可在多线程中读取（接收）零个、一个或多个答案；在主线程中使用轮询机制等待读取答案，对应答案需要等待回调返回；
            </summary>
        </member>
        <member name="F:XCSJ.Net.ENetQAMode.TQTA">
            <summary>
            线问线答:在多线程中一问一答模式（一问一答）；即在多线程中每写入（发送）一个问题，必须对应在多线程中读取（接收）一个答案，问答在同一个多线程内完成；答案需要等待回调返回；
            </summary>
        </member>
        <member name="F:XCSJ.Net.ENetQAMode.T1QT2A">
            <summary>
            线1问线2答:在多线程1中一问，多线程2中多答模式（多问多答）；即在多线程1中每写入（发送）一个问题，可在多线程2中读取（接收）零个、一个或多个答案；答案需要等待回调返回；
            </summary>
        </member>
        <member name="T:XCSJ.Net.NetPackage">
            <summary>
            网络数据包类
            </summary>
        </member>
        <member name="M:XCSJ.Net.NetPackage.GetFromJsonString">
            <summary>
            获取生成当前对象实例的JSON字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetPackage.IsFromJsonString">
            <summary>
            当前对象实例是否由JSON字符串生成
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetPackage.ToString">
            <summary>
            转为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetPackage.FromJson``1(System.String,System.Boolean)">
            <summary>
            将JSON字符串转化为特定类型的对象
            </summary>
            <typeparam name="T">限定的<see cref="T:XCSJ.Net.NetPackage"/>型基类类型</typeparam>
            <param name="jsonString">JSON字符串</param>
            <param name="trySubclassFirst">是否优先尝试模版类型T的子类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.NetPackage.FromJson(System.String,System.Boolean)">
            <summary>
            将JSON字符串转化为特定类型的对象
            </summary>
            <param name="jsonString">JSON字符串</param>
            <param name="includeSubclassOfT">包含子类类型</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.QuestionNetPackage">
            <summary>
            问题网络数据包类;即请求；
            </summary>
        </member>
        <member name="F:XCSJ.Net.QuestionNetPackage.question">
            <summary>
            问题
            </summary>
        </member>
        <member name="T:XCSJ.Net.AnswerNetPackage">
            <summary>
            答案网络数据包类;即响应；
            </summary>
        </member>
        <member name="F:XCSJ.Net.AnswerNetPackage.answer">
            <summary>
            答案
            </summary>
        </member>
        <member name="M:XCSJ.Net.AnswerNetPackage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Net.AnswerNetPackage.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:XCSJ.Net.AnswerNetPackage.#ctor(XCSJ.Net.QuestionNetPackage)">
            <summary>
            构造函数
            </summary>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.Net.AnswerNetPackage.Set(XCSJ.Net.QuestionNetPackage)">
            <summary>
            设置问题
            </summary>
            <param name="question"></param>
        </member>
        <member name="T:XCSJ.Net.HeartHeatQ">
            <summary>
            心跳问题
            </summary>
        </member>
        <member name="F:XCSJ.Net.HeartHeatQ.count">
            <summary>
            次数
            </summary>
        </member>
        <member name="F:XCSJ.Net.HeartHeatQ.questionTime">
            <summary>
            问题时间
            </summary>
        </member>
        <member name="M:XCSJ.Net.HeartHeatQ.Set(XCSJ.Net.HeartHeatA)">
            <summary>
            设置
            </summary>
            <param name="a"></param>
        </member>
        <member name="T:XCSJ.Net.HeartHeatA">
            <summary>
            心跳答案
            </summary>
        </member>
        <member name="F:XCSJ.Net.HeartHeatA.count">
            <summary>
            次数
            </summary>
        </member>
        <member name="F:XCSJ.Net.HeartHeatA.questionTime">
            <summary>
            问题时间
            </summary>
        </member>
        <member name="F:XCSJ.Net.HeartHeatA.answerTime">
            <summary>
            答案时间
            </summary>
        </member>
        <member name="M:XCSJ.Net.HeartHeatA.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Net.HeartHeatA.#ctor(XCSJ.Net.HeartHeatQ)">
            <summary>
            构造函数
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:XCSJ.Net.HeartHeatA.Set(XCSJ.Net.HeartHeatQ)">
            <summary>
            设置
            </summary>
            <param name="q"></param>
        </member>
        <member name="T:XCSJ.Net.BaseServerManager`3">
            <summary>
            服务管理器，用于服务器上启动网络服务的管理类
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TServer"></typeparam>
            <typeparam name="TClientInfo"></typeparam>
        </member>
        <member name="F:XCSJ.Net.BaseServerManager`3._server">
            <summary>
            服务器对象
            </summary>
        </member>
        <member name="P:XCSJ.Net.BaseServerManager`3.server">
            <summary>
            服务器对象
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.NewServer">
            <summary>
            新建服务器对象
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.Net.BaseServerManager`3.handles">
            <summary>
            处理列表
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Register``1(System.Func{``0,`0,`2,XCSJ.Net.AnswerNetPackage})">
            <summary>
            注册
            </summary>
            <typeparam name="TQuestion"></typeparam>
            <param name="handleFunc"></param>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseServerManager`3.Restart">
            <summary>
            重启
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.BaseTcpServerManager`4">
            <summary>
            Tcp服务管理器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TTcpServer"></typeparam>
            <typeparam name="TTcpClient"></typeparam>
            <typeparam name="TClientInfo"></typeparam>
        </member>
        <member name="P:XCSJ.Net.BaseTcpServerManager`4.listenPort">
            <summary>
            监听端口
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.NewServer">
            <summary>
            新建服务器对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.Startup(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="listenPort"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.OnHandleClient(XCSJ.Net.Tcp.XTcpClient)">
            <summary>
            收到一个有效客户端后的处理
            </summary>
            <param name="tcpClient"></param>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.RegisterNetPackgeHandle">
            <summary>
            注册网络包处理
            </summary>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.OnNewClient(`3,`2)">
            <summary>
            当有新客户端时回调
            </summary>
            <param name="clientInfo"></param>
            <param name="tcpClient"></param>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.OnWillCloseClient(`3,`2)">
            <summary>
            当将要关闭客户端时回调
            </summary>
            <param name="clientInfo"></param>
            <param name="tcpClient"></param>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.OnBeforeQuestionHandle(`3,`2,XCSJ.Net.QuestionNetPackage)">
            <summary>
            当问题处理之前回调
            </summary>
            <param name="clientInfo"></param>
            <param name="tcpClient"></param>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.Net.BaseTcpServerManager`4.OnAfterQuestionHandle(`3,`2,XCSJ.Net.QuestionNetPackage,XCSJ.Net.AnswerNetPackage)">
            <summary>
            当问题处理之后回调
            </summary>
            <param name="clientInfo"></param>
            <param name="tcpClient"></param>
            <param name="question"></param>
            <param name="answer"></param>
        </member>
        <member name="T:XCSJ.Net.Tcp.FirstQ">
            <summary>
            RSA 加密 请求
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstQ.random">
            <summary>
            随机
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.FirstA">
            <summary>
            使用 FirstQ.random DES 加密 响应
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstA.randomSignature">
            <summary>
            随机签名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstA.tmpRSAPublicKey">
            <summary>
            临时RSA公钥
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstA.tmpRSAPublicKeySignature">
            <summary>
            临时RSA公钥签名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstA.tmpDESKey">
            <summary>
            临时DES密钥
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.FirstA.tmpDESKeySignature">
            <summary>
            临时DES密钥签名
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.SecondQ">
            <summary>
            使用 FirstA.tmpDESKey DES 加密 请求
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.SecondQ.desKey">
            <summary>
            使用 FirstA.newRSAPublicKey 加密
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.SecondQ.version">
            <summary>
            版本
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.SecondQ.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.SecondA">
            <summary>
            使用 SecondQ.desKey DES 加密 响应
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.SecondA.desKeySignature">
            <summary>
            DES密钥签名
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.SecondA.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.ThirdQ">
            <summary>
            使用 SecondQ.desKey DES 加密 请求
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.ThirdQ.clientHandShakeOK">
            <summary>
            客户端握手完成
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.ThirdQ.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.ThirdA">
            <summary>
            使用 SecondQ.desKey DES 加密 响应
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.ThirdA.serverHandleShakeOK">
            <summary>
            服务器握手完成
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.ThirdA.otherinfo">
            <summary>
            其他信息
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.TcpHelper">
            <summary>
             4 + N 网络数据封装与拆分
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.TcpHelper.LocalIP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.TcpHelper.readTimeout">
            <summary>
            读取超时
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.TcpHelper.writeTimeout">
            <summary>
            写入超时
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.TcpHelper.waitReadSleepTime">
            <summary>
            等待读取时，如果无数据那么程序休眠的时间，单位为毫秒;默认值为1毫秒
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.SetTimeout(System.Int32)">
            <summary>
            设置超时
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Connect(System.String,System.Int32,System.Net.Sockets.TcpClient@)">
            <summary>
            连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Close(System.Net.Sockets.TcpClient)">
            <summary>
            关闭
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.IsOnline(System.Net.Sockets.TcpClient)">
            <summary>
            是否在线：通过<see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)"/>客户端是否有效
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Read(System.Net.Sockets.TcpClient,System.String@,System.Boolean)">
            <summary>
            以 4 + N 读取数据；发生错误会抛出异常
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <param name="waitUntilReadTimeout">为True时，表示阻塞读取数据，直到读取到数据或时读取超时；为False时，如果网络流没有数据，则直接返回；</param>
            <returns>返回成功读取的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Read(System.Net.Sockets.TcpClient,System.String@,System.Int32,System.Boolean)">
            <summary>
            以 4 + N 读取数据；发生错误会抛出异常
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <param name="readTimeout"></param>
            <param name="waitUntilReadTimeout">为True时，表示阻塞读取数据，直到读取到数据或时读取超时；为False时，如果网络流没有数据，则直接返回；</param>
            <returns>返回成功读取的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Read(System.Net.Sockets.NetworkStream,System.String@,System.Int32,System.Boolean)">
            <summary>
            以 4 + N 读取数据；发生错误会抛出异常
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <param name="readTimeout"></param>
            <param name="waitUntilReadTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Read(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            从网络流中读取4字节数据并转化为int
            </summary>
            <param name="stream"></param>
            <param name="readTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.GetOptimizeTimeout(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取优化的超时时间
            </summary>
            <param name="timeout">超时时间：单位：毫秒</param>
            <param name="total">总量：字节数总量</param>
            <param name="speed">速度：每秒可处理的字节数量</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Read(System.Net.Sockets.NetworkStream,System.Int32,System.Int32)">
            <summary>
            从网络流中阻塞读取期望字节长度的数据；阻塞直到读取到数据或时读取超时；
            </summary>
            <param name="stream"></param>
            <param name="readLength"></param>
            <param name="readTimeout">如果值为-1，则无限等待</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Write(System.Net.Sockets.TcpClient,System.String)">
            <summary>
            以 4 + N 写入数据；发生错误会抛出异常
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <returns>返回成功写入的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Write(System.Net.Sockets.TcpClient,System.String,System.Int32)">
            <summary>
            以 4 + N 写入数据；发生错误会抛出异常
            </summary>
            <param name="client"></param>
            <param name="data"></param>
            <param name="writeTimeout"></param>
            <returns>返回成功写入的字节数</returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Write(System.Net.Sockets.NetworkStream,System.String)">
            <summary>
            以 4 + N 写入数据；发生错误会抛出异常
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Write(System.Net.Sockets.NetworkStream,System.Int32)">
            <summary>
            向网络流中写入4字节的int数据
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.Write(System.Net.Sockets.NetworkStream,System.Byte[])">
            <summary>
            向网络流中写入数据；
            </summary>
            <param name="stream"></param>
            <param name="data"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.RequestOnce(System.String,System.Int32,System.String,System.Boolean,System.String@)">
            <summary>
            普通TCP连接后,请求一次数据，并等待一次响应(如果需要)后直接断开
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="requestData"></param>
            <param name="needResponse"></param>
            <param name="responseData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.RequestOnceS``1(System.String,System.Int32,System.String,XCSJ.Net.QuestionNetPackage,System.Boolean,``0@)">
            <summary>
            安全TCP连接后,并经过3次握手完成后，开始请求一次数据，并等待一次响应(如果需要)后直接断开；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="rsaPublicKey"></param>
            <param name="question"></param>
            <param name="needAnswer"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.TcpHelper.StartTcpListener(System.Int32,System.Func{System.Net.Sockets.TcpListener,System.Int32,System.Boolean},System.Boolean)">
            <summary>
            启动Tcp监听
            </summary>
            <param name="port"></param>
            <param name="onStartedTcpListener"></param>
            <param name="autoAdjustPort"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpClientEntityThread">
            <summary>
            线程化Tcp客户端实体
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3">
            <summary>
            线程化Tcp客户端实体
            </summary>
            <typeparam name="TClient">客户端</typeparam>
            <typeparam name="TQ">问题</typeparam>
            <typeparam name="TA">答案</typeparam>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.timeoutMillisecondsWhenNoQuestion">
            <summary>
            无问题时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.timeoutMillisecondsWhenNoAnswer">
            <summary>
            无答案时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.onReceived">
            <summary>
            当已收到数据时回调;多线程状态下回调本事件；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.questions">
            <summary>
            问题列表
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.answers">
            <summary>
            答案列表
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.cacheAnswers">
            <summary>
            缓存答案:标识是否将获取的答案加入<see cref="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.answers"/>中；
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            构造
            </summary>
            <param name="tcpClient"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.Send(`1)">
            <summary>
            发送:加入待发送缓存区，等待后续线程处理；
            </summary>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.OnReceivedAnswer(`2)">
            <summary>
            当收到答案时
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.CallReceivedAnswer(`2)">
            <summary>
            调用收到答案
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.OnConnect">
            <summary>
            当连接时
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.OnClose">
            <summary>
            当关闭时
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.WriteQuestion(System.Object)">
            <summary>
            写入问题
            </summary>
            <param name="state">即<see cref="!:TClient"/>客户端类型的对象</param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.ReadAnswer(System.Object)">
            <summary>
            读取答案
            </summary>
            <param name="state">即<see cref="!:TClient"/>客户端类型的对象</param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.HandleQA(System.Object)">
            <summary>
            处理问题与答案
            </summary>
            <param name="state">即<see cref="!:TClient"/>客户端类型的对象</param>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.validAsyncMode">
            <summary>
            有效异步模式
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.ConnectAsync(XCSJ.Net.IAddress,System.String,System.Action{XCSJ.Net.IAsyncClient})">
            <summary>
            异步连接
            </summary>
            <param name="serverAddress"></param>
            <param name="path"></param>
            <param name="onConnect"></param>
            <returns></returns>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.onAsyncReceived">
            <summary>
            当异步接收到
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientEntityThread`3.XCSJ#Net#ISendNetPackage#Send(XCSJ.Net.NetPackage)">
            <summary>
            发送
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.IClientEntityThread`2">
            <summary>
            线程化客户端实体:用于客户端；
            </summary>
            <typeparam name="TQ"></typeparam>
            <typeparam name="TA"></typeparam>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.IClientEntityThread`2.Send(`0)">
            <summary>
            发送问题：客户端到服务器
            </summary>
            <param name="question"></param>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread">
            <summary>
            线程化Tcp客户端虚体：用于服务器记录客户端连接对象信息的虚体对象
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`2">
            <summary>
            线程化Tcp客户端虚体：用于服务器记录客户端连接对象信息的虚体对象
            </summary>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TServer"></typeparam>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4">
            <summary>
            线程化Tcp客户端虚体：用于服务器记录客户端连接对象信息的虚体对象
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.Write(System.String)">
            <summary>
            写入：保证写入的线程安全
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.guid">
            <summary>
            在线连接的唯一描述;本值由服务器端产生;
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.server">
            <summary>
            服务器对象
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.timeoutMillisecondsWhenNoQuestion">
            <summary>
            无问题时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.timeoutMillisecondsWhenNoAnswer">
            <summary>
            无答案时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.onReceived">
            <summary>
            当收到消息时回调；多线程状态回调
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.questions">
            <summary>
            接收到的客户端问题
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.cacheQuestions">
            <summary>
            缓存问题:标识是否将获取的问题加入<see cref="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.questions"/>中；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.answers">
            <summary>
            将要回发客户端的答案列表
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.XCSJ#Net#ISendNetPackage#Send(XCSJ.Net.NetPackage)">
            <summary>
            发送
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.Send(`3)">
            <summary>
            发送答案:将答案加入答案列表<see cref="P:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.answers"/>
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.OnReceivedQuestion(`2)">
            <summary>
            当收到问题时
            </summary>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.CallReceivedQuestion(`2)">
            <summary>
            调用收到问题
            </summary>
            <param name="question"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.Handle(`1)">
            <summary>
            处理
            </summary>
            <param name="sever"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.ReadQuestionAndWriteAnswer(`0)">
            <summary>
            读取答案并写入答案：单线程处理客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.StartWriteAnswerThreadAndReadQuestion(`0)">
            <summary>
            开始写入答案线程并读取答案：双线程处理客户端
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.ReadQuestion(`0)">
            <summary>
            读取问题
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.StartWriteAnswerThread(`0)">
            <summary>
            开始写入答案线程
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpClientVirtualThread`4.WriteAnswer(System.Object)">
            <summary>
            写入答案
            </summary>
            <param name="state"></param>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.IClientThread`2">
            <summary>
            线程化客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.IClientThread`2.timeoutMillisecondsWhenNoQuestion">
            <summary>
            无问题时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.IClientThread`2.timeoutMillisecondsWhenNoAnswer">
            <summary>
            无答案时信号量超时时间;单位：毫秒；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.IClientThread`2.questions">
            <summary>
            待处理的问题列表
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.IClientThread`2.answers">
            <summary>
            待处理的答案列表
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.IClientVirtualThread`3">
            <summary>
            线程化客户端虚体:用于服务器端；
            </summary>
            <typeparam name="TServer"></typeparam>
            <typeparam name="TQ"></typeparam>
            <typeparam name="TA"></typeparam>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.IClientVirtualThread`3.Send(`2)">
            <summary>
            发送答案：服务器到客户端
            </summary>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.IClientVirtualThread`3.Handle(`0)">
            <summary>
            处理
            </summary>
            <param name="sever"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpServerThread">
            <summary>
            线程化Tcp服务
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpServerThread`2">
            <summary>
            线程化Tcp服务
            </summary>
            <typeparam name="TServer"></typeparam>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.TcpServerThread`4">
            <summary>
            线程化Tcp服务
            </summary>
            <typeparam name="TServer"></typeparam>
            <typeparam name="TClient"></typeparam>
            <typeparam name="TQ"></typeparam>
            <typeparam name="TA"></typeparam>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpServerThread`4.onClientConnected">
            <summary>
            当有客户端连入后回调；多线程状态回调
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpServerThread`4.onClientClosed">
            <summary>
            当有客户端关闭后回调；多线程状态回调
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.Threading.TcpServerThread`4.clientMaxCount">
            <summary>
            客户端最大数目
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.Threading.TcpServerThread`4.onChanged">
            <summary>
            服务器变更事件
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.OnStarted">
            <summary>
            已启动后回调
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.OnStopped">
            <summary>
            已关闭后回调
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.Startup">
            <summary>
            启动服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.Broadcast(`3)">
            <summary>
            广播
            </summary>
            <param name="answer"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.OnHandleClient(`1)">
            <summary>
            处理客户端：多线程下回调
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.Threading.TcpServerThread`4.GetClient(System.String)">
            <summary>
            获取客户端
            </summary>
            <param name="clientGuid"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.Threading.EServerChangedEvent">
            <summary>
            服务器变更事件
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.Threading.EServerChangedEvent.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.Threading.EServerChangedEvent.Started">
            <summary>
            已启动
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.Threading.EServerChangedEvent.Stopped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.ITcpClient">
            <summary>
            Tcp客户端借口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.ITcpClient.remoteIP">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.ITcpClient.remotePort">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.ITcpClient.writeBytes">
            <summary>
            写入字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.ITcpClient.readBytes">
            <summary>
            读取字节数
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpClient">
            <summary>
            XTcp客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.client">
            <summary>
            关联的Tcp客户端对象
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.handlingNetQAMode">
            <summary>
            正在处理中的网络问答模式
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.remoteIP">
            <summary>
            远程IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.remotePort">
            <summary>
            远程端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.remoteAddress">
            <summary>
            远程地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.isConnectToRemote">
            <summary>
            是否连接到远程
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.localIP">
            <summary>
            本地IP
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.localPort">
            <summary>
            本地端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.localAddress">
            <summary>
            本地地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.isConnected">
            <summary>
            是否已连接：仅检测<see cref="P:System.Net.Sockets.TcpClient.Connected"/>标记量标识是否连接
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.isLoopback">
            <summary>
            是否环回地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.serverAddress">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.writeTimeout">
            <summary>
            写入超时时间，单位毫秒；默认值为<see cref="F:XCSJ.Net.NetHelper.DefaultTimeoutOfClient"/>
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.readTimeout">
            <summary>
            读取超时时间，单位毫秒；默认值为<see cref="F:XCSJ.Net.NetHelper.DefaultTimeoutOfClient"/>
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.waitUntilReadTimeout">
            <summary>
            为True时，表示阻塞读取数据，直到读取到数据或时读取超时；为False时，如果网络流没有数据，则直接返回；
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.writeBytes">
            <summary>
            写入的字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.readBytes">
            <summary>
            读取的字节数
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.noDelay">
            <summary>
            标识是否无延时
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
        </member>
        <member name="E:XCSJ.Net.Tcp.XTcpClient.onConnect">
            <summary>
            连接回调：调用连接或异步连接后的返回值有效时，不管连接成功与否均会回调本事件；如果已经处于连接状态，不会回调本事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.XTcpClient.onClose">
            <summary>
            关闭回调：调用关闭后的回调事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="E:XCSJ.Net.Tcp.XTcpClient.onError">
            <summary>
            当错误：在数据的收发（读写）过程中捕获到异常时回调；
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnConnect">
            <summary>
            当连接时回调：调用连接或异步连接后的返回值有效时，不管连接成功与否均会回调本事件；如果已经处于连接状态，不会回调本事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnConnectInternal">
            <summary>
            当连接时回调：调用连接或异步连接后的返回值有效时，不管连接成功与否均会回调本事件；如果已经处于连接状态，不会回调本事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnClose">
            <summary>
            当关闭时回调：调用关闭后的回调事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnCloseInternal">
            <summary>
            当关闭时回调：调用关闭后的回调事件；可能在多线程状态下回调：
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnErrorInternal(System.Object)">
            <summary>
            当错误时回调
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.OnError(System.Object)">
            <summary>
            当错误
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.ConnectInternal(XCSJ.Net.Address)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Connect(System.String,System.Int32)">
            <summary>
            连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Connect(XCSJ.Net.IAddress)">
            <summary>
            连接
            </summary>
            <param name="serverAddress"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClient.inConnectAsync">
            <summary>
            是否正在异步连接中
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.ConnectAsyncInternal(XCSJ.Net.Address,System.Action{XCSJ.Net.Tcp.XTcpClient})">
            <summary>
            异步连接
            </summary>
            <param name="serverAddress"></param>
            <param name="connectCallback"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.ConnectAsync(System.String,System.Int32,System.Action{XCSJ.Net.Tcp.XTcpClient})">
            <summary>
            异步连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="connectCallback">连接的回调事件：多线程状态下回调</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.ConnectAsync(XCSJ.Net.IAddress,System.Action{XCSJ.Net.Tcp.XTcpClient})">
            <summary>
            异步连接
            </summary>
            <param name="serverAddress"></param>
            <param name="connectCallback">连接的回调事件：多线程状态下回调</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.ConnectAsync(System.Action{XCSJ.Net.Tcp.XTcpClient})">
            <summary>
            异步连接
            </summary>
            <param name="connectCallback">连接的回调事件：多线程状态下回调</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.KillAsyncConnect">
            <summary>
            销毁异步连接
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Close">
            <summary>
            不管现在网络处于什么状态，都会执行关闭
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.IsConnected">
            <summary>
            是否已连接:默认返回<see cref="P:XCSJ.Net.Tcp.XTcpClient.isConnected"/>值；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Write(System.String)">
            <summary>
             直接将数据写入;写入失败会发生异常
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.Read(System.String@)">
            <summary>
            从网络流阻塞等待读取数据；读取失败会发生异常
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.RequestThenClose(System.String,System.Int32,System.Func{XCSJ.Net.Tcp.XTcpClient,XCSJ.Net.AnswerNetPackage})">
            <summary>
            执行成功连接后调用回调函数，之后会自动将网络断开；
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="callback">握手协议完成后的回调函数</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.HeartHeatThenClose(System.String,System.Int32,System.Boolean)">
            <summary>
            向指定服务器发送一次心跳数据包，发送后自动断开连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClient.TryGetServerDateTime(System.String,System.Int32,System.DateTime@)">
            <summary>
            尝试获取服务日期时间
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpClientS">
            <summary>
            安全Tcp客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClientS.rsaPublicKey">
            <summary>
            RSA公钥
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.XTcpClientS.desKey">
            <summary>
            DES密钥
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.XTcpClientS.desIV">
            <summary>
            DES初始量
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpClientS.handShakeValid">
            <summary>
            标识握手已经成功完成的标记量
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.#ctor(XCSJ.Net.Tcp.XTcpClient)">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="rsaPublicKey"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.Connect">
            <summary>
            连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.HandShake">
            <summary>
            执行握手协议
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.First">
            <summary>
            第1次握手
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.Second(XCSJ.Net.Tcp.FirstA)">
            <summary>
            第2次握手
            </summary>
            <param name="firstA"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.Third(XCSJ.Net.Tcp.SecondA)">
            <summary>
            第3次握手
            </summary>
            <param name="secondA"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpClientS.HeartHeat(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            向指定服务器发送一次心跳数据包，发送后自动断开连接
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="rsaPublicKey"></param>
            <param name="throwException"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.ITcpServer">
            <summary>
            Tcp服务接口
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.ITcpServer.Startup(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.BaseTcpServer">
            <summary>
            基础Tcp服务
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.BaseTcpServer.Startup(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpServer">
            <summary>
            XTcp服务器
            </summary>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpServer`1">
            <summary>
            XTcp服务器
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServer`1.listenerThread">
            <summary>
            监听器线程：IPV4监听线程
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServer`1.listener">
            <summary>
            Tcp监听器对象：IPV4监听器对象
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.XTcpServer`1.handleClient">
            <summary>
            用于收到一个有效客户端后继续处理的委托对象:每次回调均在多线程状态下，每个有效客户端均有单独一个线程与之配对；
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.AddHandleClientAction(System.Action{`0})">
            <summary>
            添加处理客户端动作
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.RemoveHandleClientAction(System.Action{`0})">
            <summary>
            添加处理客户端动作
            </summary>
            <param name="action"></param>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServer`1.canHandleClient">
            <summary>
            可以处理客户端
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServer`1.listenPort">
            <summary>
            监听端口，仅在服务处于有效监听状态时才可获取到有效到监听端口
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServer`1.port">
            <summary>
            期望启动监听的端口:如果服务器正在运行中，无法修改值；
            </summary>
        </member>
        <member name="F:XCSJ.Net.Tcp.XTcpServer`1.clients">
            <summary>
            当前已经连接到有效客户端
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.Startup(System.Int32)">
            <summary>
            启动
            </summary>
            <param name="port">期望启动监听的端口</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.SmartStartup(System.Int32)">
            <summary>
            智能启动
            </summary>
            <param name="startPort">期望启动监听的开始端口</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.IsRunning">
            <summary>
            是否运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.NewXTcpClient(System.Net.Sockets.TcpClient)">
            <summary>
            新建Tcp客户端对象
            </summary>
            <param name="tcpClient"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.OnBeforeHandleClient(`0)">
            <summary>
            开始处理客户端之前到回调
            </summary>
            <param name="tcpClient"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.OnHandleClient(`0)">
            <summary>
            当处理客户端
            </summary>
            <param name="tcpClient"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.QuestionHandle(`0,System.Func{`0,XCSJ.Net.QuestionNetPackage,XCSJ.Net.AnswerNetPackage})">
            <summary>
            阻塞等待接收到一个有效的客户端请求数据包（即问题），然后调用对应的委托处理函数，之后回发一个响应数据包（即答案）；<br />
            使用本函数前必须保证 客户端 是一个安全客户端，即成功完成握手协议（至少保证本地与远程XTcpClientS 均有有效的可用于通信的 DES 密钥与初始化向量，两端的密钥为对等密钥，要求密钥一致）；
            </summary>
            <param name="client"></param>
            <param name="questionHandle">本参数（即传入的委托处理函数）的结果数据包（即答案），会回发给对应接收数据的客户端</param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServer`1.DefaultQuestionHandle(`0,XCSJ.Net.QuestionNetPackage,XCSJ.Net.AnswerNetPackage)">
            <summary>
            用于缺省处理各种内部定义的数据包，例如心跳数据包等<br />
            特别说明：握手协议不在缺省处理内实现
            </summary>
            <param name="client"></param>
            <param name="question"></param>
            <param name="answer"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpServerS">
            <summary>
            安全tcp服务器
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="rsaPrivateKey"></param>
        </member>
        <member name="T:XCSJ.Net.Tcp.XTcpServerS`1">
            <summary>
            安全tcp服务器
            </summary>
        </member>
        <member name="P:XCSJ.Net.Tcp.XTcpServerS`1.rsaPrivateKey">
            <summary>
            RSA私钥
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="rsaPrivateKey"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.SetRSAPrivateKey(System.String)">
            <summary>
            设置安全服务器启动使用的RSA私钥，如果在运行中，那么不可修改！
            </summary>
            <param name="rsaPrivateKey"></param>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.Startup">
            <summary>
            启动
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.OnBeforeHandleClient(`0)">
            <summary>
            开始处理客户端之前调用
            </summary>
            <param name="tcpClient"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.HandleShake(`0)">
            <summary>
            握手协议
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.First(`0,System.String@)">
            <summary>
            第一次握手
            </summary>
            <param name="client"></param>
            <param name="tmpRSAPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.Second(`0,XCSJ.Net.Tcp.FirstA,System.String)">
            <summary>
            第二次握手
            </summary>
            <param name="client"></param>
            <param name="firstA"></param>
            <param name="tmpRSAPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Net.Tcp.XTcpServerS`1.Third(`0,XCSJ.Net.Tcp.SecondA)">
            <summary>
            第三次握手
            </summary>
            <param name="client"></param>
            <param name="secondA"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer">
            <summary>
            产品服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.CompanyAbbreviations">
            <summary>
            公司简称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.WebSite">
            <summary>
            产品网址
            </summary>
        </member>
        <member name="M:XCSJ.Products.ProductServer.CreateCommandLineArgs(System.String,System.Char,System.String,System.Int32)">
            <summary>
            生成命令行参数
            </summary>
            <param name="cmdPrefix"></param>
            <param name="separator"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Products.ProductServer.TryGetAddressByArgs(System.String[],System.String,System.Char,System.String@,System.Int32@)">
            <summary>
            通过命令行参数获取地址
            </summary>
            <param name="args"></param>
            <param name="cmdPrefix"></param>
            <param name="separator"></param>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer.AuthenticationServer">
            <summary>
            认证服务：XDreamer软件认证使用的服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.NetRSAPublicKey">
            <summary>
            网络RSA公钥
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.AccessRSAPublicKey">
            <summary>
            权限RSA公钥
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogServer">
            <summary>
            狗服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogServerTitle">
            <summary>
            狗服务标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogServerProcessName">
            <summary>
            狗服务进程名
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.LastLocalDogServerPath">
            <summary>
            最后一次成功启动的本地加密狗服务路径的键名
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DefaultLockTimeLength">
            <summary>
            默认锁定时长
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DefaultMinLockTimeLength">
            <summary>
            默认最小锁定时长
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DefaultTimedIntervalTimeLength">
            <summary>
            默认定时间隔时长
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogCreater">
            <summary>
            狗生成器
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogCreaterTitle">
            <summary>
            狗生成器标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogUpdate">
            <summary>
            狗更新
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.DogUpdateTitle">
            <summary>
            狗更新标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.Abbreviation">
            <summary>
            简称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.Cmd">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.AuthenticationServer.CmdPrefix">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="M:XCSJ.Products.ProductServer.AuthenticationServer.CreateCommandLineArgs(System.String,System.Int32)">
            <summary>
            生成命令行参数
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Products.ProductServer.AuthenticationServer.TryGetAddressByCommandLineArgs(System.String@,System.Int32@)">
            <summary>
            通过命令行参数获取地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer.DataBaseServer">
            <summary>
            数据库服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.FullName">
            <summary>
            全名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.WSPath">
            <summary>
            WebSocket路径
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Abbreviation">
            <summary>
            简称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Cmd">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DataBaseServer.CmdPrefix">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="M:XCSJ.Products.ProductServer.DataBaseServer.CreateCommandLineArgs(System.String,System.Int32)">
            <summary>
            生成命令行参数
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Products.ProductServer.DataBaseServer.TryGetAddressByCommandLineArgs(System.String@,System.Int32@)">
            <summary>
            通过命令行参数获取地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer.MMOServer">
            <summary>
            MMO服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.FullName">
            <summary>
            全名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.WSPath">
            <summary>
            WebSocket路径
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Abbreviation">
            <summary>
            简称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Cmd">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.MMOServer.CmdPrefix">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="M:XCSJ.Products.ProductServer.MMOServer.CreateCommandLineArgs(System.String,System.Int32)">
            <summary>
            生成命令行参数
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Products.ProductServer.MMOServer.TryGetAddressByCommandLineArgs(System.String@,System.Int32@)">
            <summary>
            通过命令行参数获取地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer.XRInteractionSpace">
            <summary>
            XR交互空间:简称XRIS
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Abbreviation">
            <summary>
            简称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Cmd">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.XRInteractionSpace.CmdPrefix">
            <summary>
            命令前缀
            </summary>
        </member>
        <member name="M:XCSJ.Products.ProductServer.XRInteractionSpace.CreateCommandLineArgs(System.String,System.Int32)">
            <summary>
            生成命令行参数
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Products.ProductServer.XRInteractionSpace.TryGetAddressByCommandLineArgs(System.String@,System.Int32@)">
            <summary>
            通过命令行参数获取地址
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Products.ProductServer.DeviceAuthenticationServer">
            <summary>
            设备认证服务：XDreamer各种服务在进行设备激活码联网认证时使用的服务
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DeviceAuthenticationServer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DeviceAuthenticationServer.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XCSJ.Products.ProductServer.DeviceAuthenticationServer.Port">
            <summary>
            端口
            </summary>
        </member>
        <member name="T:XCSJ.Reflection.Assembly`1">
            <summary>
            程序集
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.FullName">
            <summary>
            全名称
            </summary>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.assembly">
            <summary>
            程序集对象
            </summary>
        </member>
        <member name="M:XCSJ.Reflection.Assembly`1.GetAttribute``1">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.Copyright">
            <summary>
            所有权
            </summary>
        </member>
        <member name="P:XCSJ.Reflection.Assembly`1.Company">
            <summary>
            公司
            </summary>
        </member>
        <member name="T:XCSJ.Safety.SafetyData">
            <summary>
            安全数据类
            </summary>
        </member>
        <member name="F:XCSJ.Safety.SafetyData.defaultKey">
            <summary>
            默认密钥
            </summary>
        </member>
        <member name="M:XCSJ.Safety.SafetyData.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="text">明文</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCSJ.Safety.SafetyData.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="text">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:XCSJ.Safety.SafetyData.Decrypt(System.String)">
            <summary>
            解密
            </summary>
            <param name="ciphertext">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCSJ.Safety.SafetyData.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="ciphertext">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:XCSJ.Safety.SafetyData.TryDecrypt(System.String,System.String)">
            <summary>
            尝试解密
            </summary>
            <param name="ciphertext">密文</param>
            <param name="key">密钥</param>
            <returns>明文：解密失败返回null</returns>
        </member>
        <member name="T:XCSJ.Tasks.AsyncTaskManager">
            <summary>
            异步任务管理类；多线程执行；<br />
            注意了！！在webgl里本类中的线程池会报错！！！其他平台ok！
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.AsyncTaskManager.Key_Exception">
            <summary>
            关键异常
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.AsyncTaskManager.AddTask(XCSJ.Tasks.ITask,System.Object)">
            <summary>
            添加新的异步任务
            </summary>
            <param name="task"></param>
            <param name="param">任务Run函数的传入形参；必须保证本参数在执行期间的有效性；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.AsyncTaskManager.AddTask``1(System.Object)">
            <summary>
            添加新的异步任务
            </summary>
            <typeparam name="T">任务类型</typeparam>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.AsyncTaskManager.AddTask(System.Type,System.Object)">
            <summary>
            添加任务
            </summary>
            <param name="taskType"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Tasks.AbstractTask">
            <summary>
            抽象任务
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.AbstractTask.createTime">
            <summary>
            类的创建时间
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.AbstractTask.Run(System.Object)">
            <summary>
            执行
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Tasks.IBaseTask">
            <summary>
            基础任务接口
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IBaseTask.alreadyRunCount">
            <summary>
            已执行次数
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IBaseTask.scheduleTask">
            <summary>
            计划任务
            </summary>
        </member>
        <member name="T:XCSJ.Tasks.BaseTask">
            <summary>
            基础任务类
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseTask.Key_Task">
            <summary>
            任务键值
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseTask.Key_Param">
            <summary>
            参数键值
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseTask.Key_Tag">
            <summary>
            标签键值
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseTask.alreadyAddOnRunFun">
            <summary>
            标识OnRun函数是否已经被加入注册；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseTask.alreadyRunCount">
            <summary>
            任务已经执行的次数，在Run函数中做++操作；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseTask.scheduleTask">
            <summary>
            如果本执行任务被加入计划任务，则会存储该计划任务实例对象；否则为空
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseTask.tag">
            <summary>
            任务类的额外绑定体；<br />
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.Run(System.Object)">
            <summary>
            执行调用的接口函数；子类覆盖本方法时，需调用本方法，以完成处理消息的回调、计数器的累加等；<br />
            如果子类是作为进度表任务类的模版类传入，则在子类的Run方法中必须调用 base.Run() 方法
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.DefaultRun(System.Object)">
            <summary>
            默认执行
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.OnRun(XCSJ.Message.Msg)">
            <summary>
            **看清说明**谨慎调用**<br />
            Run的执行回调函数,只有调用BaseTask.Run()函数才会调用本函数或本函数的子类覆盖函数；<br />
            调用时，会将本实例对象的OnRun委托从消息委托队列中移除；<br />
            子类中如果重写本方法，并调用了BaseTask.Run()函数，则在子类的OnRun函数中必须首先调用BaseTask.OnRun()函数，以执行各种任务的清理操作；
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.AddOnRun">
            <summary>
            添加任务执行的回调函数；
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseTask.RemoveOnRun">
            <summary>
            移除任务执行的回调函数；
            </summary>
        </member>
        <member name="T:XCSJ.Tasks.ITask">
            <summary>
            任务接口
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.ITask.createTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.ITask.Run(System.Object)">
            <summary>
            任务接口的执行函数
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:XCSJ.Tasks.IScheduleTask">
            <summary>
            计划任务
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.task">
            <summary>
            任务
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.runCount">
            <summary>
            运行技术
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.runIntervaTime">
            <summary>
            运行间隔时间
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.relativeRun">
            <summary>
            相对运行
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.alreadyRunOver">
            <summary>
            已经运行完成
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.lastRunTime">
            <summary>
            最后运行时间
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.terminationTask">
            <summary>
            终止任务
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.IScheduleTask.pauseTask">
            <summary>
            暂停任务
            </summary>
        </member>
        <member name="T:XCSJ.Tasks.BaseScheduleTask`1">
            <summary>
            基础计划任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.Key_RunCount">
            <summary>
            运行计数键名
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.Key_RunIntervaTime">
            <summary>
            运行间隔时间键名
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.Key_RelativeRun">
            <summary>
            相对运行键名
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.m_RunCount">
            <summary>
            任务计划执行次数
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.runCount">
            <summary>
            任务计划执行次数 属性器；<br />
            值的修改，仅在初始化时有效；输入>0的值有效；输入-1为无限循环；其他值，则默认为1；
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.DefaultThreadConsumeTime">
            <summary>
            默认的线程消耗时间，在执行循环等待时会将减去一个本时间值，以维持线程调度误差在一定范围内；<br />
            单位：ms毫秒
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.alreadyRunOver">
            <summary>
            任务是否已经执行完成，即 已经执行的次数 >= 计划执行次数；<br />
            如果执行次数为-1,本值一直为false；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.runIntervaTime">
            <summary>
            每次任务执行的间隔时间；默认为0，立即执行；单位 ms 毫秒
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.relativeRun">
            <summary>
            true：相对执行，即在任务完成后间隔时间（RunWaitTime），才再次调用任务；<br />
            false：绝对执行，即两次任务开始调用的时间是固定的间隔时间，如果任务完成的时间超过了间隔时间，那么在本次任务完成后，立即再次调用任务；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.lastRunTime">
            <summary>
            任务完成后回调的时间，记录的是最后一次的；
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.m_TerminationTask">
            <summary>
            终止任务的执行，对于还未循环完的任务直接结束循环；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.terminationTask">
            <summary>
            终止任务的执行，对于还未循环完的任务直接结束循环；<br />
            设置为true后，不能再设置为false；
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.pauseTask">
            <summary>
            暂停任务
            </summary>
        </member>
        <member name="F:XCSJ.Tasks.BaseScheduleTask`1.m_Task">
            <summary>
            计划任务的实体任务
            </summary>
        </member>
        <member name="P:XCSJ.Tasks.BaseScheduleTask`1.task">
            <summary>
            计划任务的实体任务 属性器；
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.#ctor(`0,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数，使用任务等参数初始化；
            </summary>
            <param name="task">任务类</param>
            <param name="runCount">循环执行的次数</param>
            <param name="runWaitTime">循环的等待时间;单位 ms 毫秒；</param>
            <param name="relativeRun">时间计算方法</param>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表；<br />
            </summary>
            <param name="param">参数列表；需要提供Task/RunCount/RunWaitTime/RelativeRun等参数信息</param>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.GetSleepTime">
            <summary>
            获取 需要 sleep 的时间；单位为 ms 毫秒；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.Tasks.BaseScheduleTask`1.UpdateRunTime">
            <summary>
            更新运行时间
            </summary>
        </member>
        <member name="T:XCSJ.Tasks.ThreadBaseScheduleTask`1">
            <summary>
            线程进度表任务类；<br />
            对有执行次数、时间等的任务进行处理的任务类；本类只能处理多线程的任务；<br />
            本类的实例对象只能用于一个任务执行，不能添加多个任务或重复添加任务；<br />
            window测试结果：本类的执行任务，在执行时间开始的（15ms内）延后正波动，为了减小误差引入了DefaultThreadConsumeTime值，使其可以正负波动；<br />
            其他平台目前未知；
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.ThreadBaseScheduleTask`1.#ctor(`0,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数，使用任务等参数初始化；
            </summary>
            <param name="task">任务类</param>
            <param name="runCount">循环执行的次数</param>
            <param name="runWaitTime">循环的等待时间</param>
            <param name="relativeRun">时间计算方法</param>
        </member>
        <member name="M:XCSJ.Tasks.ThreadBaseScheduleTask`1.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表；<br />
            </summary>
            <param name="param">参数列表；需要提供Task/RunCount/RunWaitTime/RelativeRun等参数信息</param>
        </member>
        <member name="M:XCSJ.Tasks.ThreadBaseScheduleTask`1.Run(System.Object)">
            <summary>
            多线程调用的执行函数
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XCSJ.Tasks.ThreadBaseScheduleTask`1.OnRun(XCSJ.Message.Msg)">
            <summary>
            Run函数的消息回调；
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.Tasks.ThreadScheduleTask">
            <summary>
            线程计划任务
            </summary>
        </member>
        <member name="M:XCSJ.Tasks.ThreadScheduleTask.#ctor(XCSJ.Tasks.BaseTask,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数，使用任务等参数初始化；
            </summary>
            <param name="task">任务类</param>
            <param name="runCount">循环执行的次数</param>
            <param name="runWaitTime">循环的等待时间;单位 ms 毫秒；</param>
            <param name="relativeRun">时间计算方法</param>
        </member>
        <member name="M:XCSJ.Tasks.ThreadScheduleTask.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表；<br />
            </summary>
            <param name="param">参数列表；需要提供Task/RunCount/RunWaitTime/RelativeRun等参数信息</param>
        </member>
        <member name="T:XCSJ.Tests.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:XCSJ.Tests.Test.Action(System.Action)">
            <summary>
            动作
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.Tests.Test.Action(System.Action,System.Int32)">
            <summary>
            动作
            </summary>
            <param name="action"></param>
            <param name="testCount"></param>
        </member>
        <member name="M:XCSJ.Tests.Test.Func``1(System.Func{``0},``0)">
            <summary>
            函数
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.This">
            <summary>
            用于获取 XCSJ.dll 自身的各种信息
            </summary>
        </member>
        <member name="P:XCSJ.This.virtualAssemblyVersion">
            <summary>
            由 XCSJ - XDreamer 自定义的 虚拟程序集版本号:核心版本号
            </summary>
        </member>
        <member name="P:XCSJ.This.majorVersion">
            <summary>
            主版本
            </summary>
        </member>
        <member name="P:XCSJ.This.fullMajorVersion">
            <summary>
            完整主版本
            </summary>
        </member>
        <member name="T:XCSJ.Tools.ITool">
            <summary>
            工具接口
            </summary>
        </member>
        <member name="T:XCSJ.Tools.Option">
            <summary>
            选项
            </summary>
        </member>
        <member name="P:XCSJ.Tools.Option.expand">
            <summary>
            界面是否展开
            </summary>
        </member>
        <member name="P:XCSJ.Tools.Option.enable">
            <summary>
            是否生效（即存在性
            </summary>
        </member>
        <member name="P:XCSJ.Tools.Option.active">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="M:XCSJ.Tools.Option.OnModified">
            <summary>
            当选项修改时
            </summary>
        </member>
        <member name="E:XCSJ.Tools.Option.onDirty">
            <summary>
            当脏时事件
            </summary>
        </member>
        <member name="M:XCSJ.Tools.Option.MarkDirty">
            <summary>
            标记脏
            </summary>
        </member>
        <member name="T:XCSJ.Tools.XCateogryAttribute">
            <summary>
            分类特性
            </summary>
        </member>
        <member name="F:XCSJ.Tools.XCateogryAttribute.DefaultCategoryName">
            <summary>
            默认分类名称
            </summary>
        </member>
        <member name="F:XCSJ.Tools.XCateogryAttribute.category">
            <summary>
            分类名
            </summary>
        </member>
        <member name="F:XCSJ.Tools.XCateogryAttribute.categoryIndex">
            <summary>
            分类索引
            </summary>
        </member>
        <member name="M:XCSJ.Tools.XCateogryAttribute.#ctor(System.String)">
            <summary>
            分类特性构造函数
            </summary>
            <param name="category"></param>
        </member>
    </members>
</doc>
