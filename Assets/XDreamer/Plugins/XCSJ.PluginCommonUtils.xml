<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XCSJ.PluginCommonUtils</name>
    </assembly>
    <members>
        <member name="T:XCSJ.PluginCommonUtils.Margin">
            <summary>
            边框结构体
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Margin._left">
            <summary>
            左边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Margin._right">
            <summary>
            右边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Margin._top">
            <summary>
            上边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Margin._bottom">
            <summary>
            下边框
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Margin.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="top"></param>
            <param name="bottom"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.BaseGUIWindow">
            <summary>
            基础GUI窗口类
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.SingleLineHeight">
            <summary>
            单行高度
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.screeRect">
            <summary>
            屏幕矩形
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._visable">
            <summary>
            可见
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.visable">
            <summary>
            可见
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnVisableChanged">
            <summary>
            当可见性变化时回调
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._title">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._minSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._keepInScreen">
            <summary>
            保持窗口在屏幕内
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.dragPositionRect">
            <summary>
            拖拽位置区域；当前窗口的位置可在的矩形；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._alignMode">
            <summary>
            基于屏幕的对齐方式
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.rect">
            <summary>
            窗口矩形，即窗口的位置与尺寸
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.position">
            <summary>
            窗口位置
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.size">
            <summary>
            窗口尺寸
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._margin">
            <summary>
            边框
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.margin">
            <summary>
            边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow._allowDragWindow">
            <summary>
            允许拖拽
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnGUI">
            <summary>
            需要外部调用的绘制接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.WindowID">
            <summary>
            窗口ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.DefaultOnDrawGUI">
            <summary>
            默认绘制GUI；不处理矩阵，直接调用绘制窗口；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawGUI">
            <summary>
            绘制GUI；会处理矩阵；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawWindow(System.Int32)">
            <summary>
            绘制窗口，包括标题与内容
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.DragWindow">
            <summary>
            拖拽窗口
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.scale">
            <summary>
            缩放
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.guiMatrix">
            <summary>
            存储的GUI矩阵；即窗口绘制前的GUI矩阵
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.StorageGUIMatrix">
            <summary>
            存储GUI矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.RecoveryGUIMatrix">
            <summary>
            恢复GUI矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.SetGUIMatrix">
            <summary>
            设置GUI矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.GetGUIMatrix">
            <summary>
            获取期望设置的GUI矩阵
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.adujusWH">
            <summary>
            
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.buttonSize">
            <summary>
            按钮尺寸
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.buttonMargin">
            <summary>
            按钮边距
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.titleHeight">
            <summary>
            标题高度
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.reduceWidthRect">
            <summary>
            减少宽度按钮矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.increaseWidthRect">
            <summary>
            增加宽度按钮矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.reduceHeightRect">
            <summary>
            减少高度按钮矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.increaseHeightRect">
            <summary>
            增加高度按钮矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.closeRect">
            <summary>
            关闭按钮矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.alignRect">
            <summary>
            窗口对齐按钮矩形
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.DefaultDrawTitle">
            <summary>
            默认绘制标题
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawTitle">
            <summary>
            绘制标题
            </summary>
            <returns>返回True表示窗口关闭</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawReduceWidthButton">
            <summary>
            绘制减少宽度按钮
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawIncreaseWidthButton">
            <summary>
            绘制增加宽度按钮
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawAlignButton">
            <summary>
            绘制窗口对齐按钮
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawReduceHeightButton">
            <summary>
            绘制减少高度按钮
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawIncreaseHeightButton">
            <summary>
            绘制增加高度按钮
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawCloseButton">
            <summary>
            绘制关闭按钮
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.contentRect">
            <summary>
            内容矩形，即内容的位置与尺寸;相对当前窗口的局部坐标；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.autoLayout">
            <summary>
            是否自动布局；默认为False，即非自动布局；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.scrollBarWH">
            <summary>
            横向或纵向滚动条的宽度与高度；默认值16
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseGUIWindow.scrollPosition">
            <summary>
            内容滚动的位置
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.scrollRect">
            <summary>
            内容的滚动矩形；相对当前窗口的局部坐标；默认返回值为内容矩形，即contentRect的值；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseGUIWindow.scrollViewRect">
            <summary>
            内容的滚动视图矩形；本矩形小于(宽度高度均小于时)内容的滚动矩形时，所有数据信息可以直接显示完整；本矩形大于（宽度或高度大于时）内容的滚动矩形时，需要使用滚动条滚动才能完整显示所有数据信息；默认返回值为内容的滚动矩形，即scrollRect的值；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.GetScrollViewHeight">
            <summary>
            获取滚动视图的高度；默认返回值为内容的滚动矩形的高度，即scrollRect的高度值；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawContent">
            <summary>
            绘制内容；根据是否自动布局调用不同的绘制函数；会绘制包括：开始滚动视图-内容-结束滚动视图；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawContent(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            绘制滚动视图中的内容；非自动布局，即绘制时需要设置坐标位置等信息；无效绘制函数，需要子类重新；
            </summary>
            <param name="scrollRect">滚动矩形</param>
            <param name="scrollViewRect">滚动视图矩形</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnDrawContentLayout">
            <summary>
            绘制滚动视图中的内容；自动布局，即绘制时使用自动布局的函数绘制控件即可；无效绘制函数，需要子类重新；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnClose">
            <summary>
            窗口关闭时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnRectChanged">
            <summary>
            窗口矩形（位置与尺寸）发生变化时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.OnMarginChanged">
            <summary>
            窗口边框发生变化时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.RelayoutWindow">
            <summary>
            重新布局窗口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.SetWindowAligin">
            <summary>
            设置窗口对齐
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseGUIWindow.SetWindowPositionInScreen(XCSJ.Maths.ERectAnchor)">
            <summary>
            设置窗口在屏幕中的相对位置；不会修改存储的对齐方式；
            </summary>
            <param name="rectAnchor"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CommonGUIStyle">
            <summary>
            通用GUI样式
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.richText">
            <summary>
            富文本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.middleLeftBox">
            <summary>
            左中包围盒
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.middleLeftBoxRichText">
            <summary>
            左中富文本包围盒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGUIStyle.SetHoverColor(UnityEngine.GUIStyle,UnityEngine.Color)">
            <summary>
            设置悬停颜色
            </summary>
            <param name="style"></param>
            <param name="color"></param>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.selectedColor_Professional">
            <summary>
            选中的颜色-专业版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.hoverColor_Professional">
            <summary>
            悬停颜色-专业版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.normalColor_Professional">
            <summary>
            普通颜色-专业版
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.normalBackgroundStyle_Professional">
            <summary>
            普通背景样式-专业版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.boxNormalColor_Professional">
            <summary>
            包围盒普通背景色-专业版
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.boxNormalBackgroundStyle_Professional">
            <summary>
            包围盒普通背景样式-专业版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.selectedColor_Personal">
            <summary>
            选中的颜色-个人版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.hoverColor_Personal">
            <summary>
            悬停颜色-个人版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.normalColor_Personal">
            <summary>
            普通颜色-个人版
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.normalBackgroundStyle_Personal">
            <summary>
            普通背景样式-个人版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonGUIStyle.boxNormalColor_Personal">
            <summary>
            包围盒普通色-个人版
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGUIStyle.boxNormalBackgroundStyle_Personal">
            <summary>
            包围盒普通背景样式-个人版
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.IDRange">
            <summary>
            ID区间:
            Begin -> EScriptID -> ELogScriptID -> End
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.Begin">
            <summary>
            开始:4096
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.End">
            <summary>
            结束:8191
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.Fragment">
            <summary>
            id片段数目，每个片段可有128个ID；[0x1000, 0x1fff] = 4096 = 0x80 * 0x20, 即可有0x20 = 32个片段;
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.Common">
            <summary>
            通用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.MonoBehaviour">
            <summary>
            Mono
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.StateLib">
            <summary>
            状态库
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.Tools">
            <summary>
            工具库
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.IDRange.Editor">
            <summary>
            编辑器
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.ECommonUtilsMsgID">
            <summary>
            枚举的通用工具消息ID，为平台内部调用使用；<br />
            消息ID范围:  [0x2000,0x2fff]<br />
            这样的范围设定使其与脚本的范围可以保持一致！防止消息ID出现二义性！
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.ECommonUtilsMsgID._Begin">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.ECommonUtilsMsgID._End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.EnumTypeData">
            <summary>
            枚举类型数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.enumType">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.underlyingType">
            <summary>
            枚举的基础类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.useCustomDraw">
            <summary>
            使用自定义绘制
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.flagsAttribute">
            <summary>
            标志特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.hasFlagsAttribute">
            <summary>
            有标志特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.unsigned">
            <summary>
            无符号的
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.validEnumFields">
            <summary>
            有效枚举字段
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.displayNames">
            <summary>
            显示名称数组
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.displayContents">
            <summary>
            显示内容数组
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.flagValues">
            <summary>
            标志值数组
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.enumIndexes">
            <summary>
            枚举索引
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.indexEnums">
            <summary>
            索引枚举
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.GetIndex(System.Enum)">
            <summary>
            获取索引
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.GetEnumByIndex(System.Int32,System.Enum)">
            <summary>
            通过索引获取枚举
            </summary>
            <param name="index"></param>
            <param name="defaultEnumValue"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.enumFlagsIntValues">
            <summary>
            枚举标志整型值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToEnumFlagsIntValue(System.Enum)">
            <summary>
            转枚举标志整型值
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToEnumFlagsIntValueNoCache(System.Enum)">
            <summary>
            转枚举标志整型值无缓存
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.enumFlagsIndexMaskValues">
            <summary>
            枚举标志索引掩码值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToIndexMask(System.Enum)">
            <summary>
            转索引掩码
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToIndexMaskNoCache(System.Enum)">
            <summary>
            转索引掩码无缓存
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.indexMaskEnumFlagsValues">
            <summary>
            索引掩码枚举标志值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.FromIndexMask(System.Int32)">
            <summary>
            转索引掩码
            </summary>
            <param name="indexMask"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.FromIndexMaskNoCache(System.Int32)">
            <summary>
            转索引掩码无缓存
            </summary>
            <param name="indexMask"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.EnumTypeData.intEnumFlagsValues">
            <summary>
            整型枚举标志值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToEnumFlagsValue(System.Int32)">
            <summary>
            转枚举标志值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.ToEnumFlagsValueNoCache(System.Int32)">
            <summary>
            转枚举标志值无缓存
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.GetEnumTypeData(System.Type,System.Boolean)">
            <summary>
            获取枚举类型数据
            </summary>
            <param name="enumType"></param>
            <param name="excludeObsolete"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.IntToEnumFlags(System.Type,System.Int32)">
            <summary>
            整型转枚举值
            </summary>
            <param name="enumType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.EnumTypeData.EnumFieldToEnumName(System.Reflection.FieldInfo)">
            <summary>
            枚举字段转枚举名称
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform">
            <summary>
            数据平台枚举
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.RuntimePlatform">
            <summary>
            运行时平台
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.Windows">
            <summary>
            Window
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.OSX">
            <summary>
            OSX
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.WebGL">
            <summary>
            WebGL
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.Android">
            <summary>
            安卓
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform.iOS">
            <summary>
            iOS
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.EDataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.Unknow">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.File">
            <summary>
            文件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.Bytes">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.Texture">
            <summary>
            纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.AudioClip">
            <summary>
            音频剪辑
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EDataType.AssetBundle">
            <summary>
            资产包
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler">
            <summary>
            Unity中所有数据操作类;通过外围明文代码具体实现
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.dataHandler">
            <summary>
            数据操作对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.GetDataFromStreamingAssetsPath(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform)">
            <summary>
            从流资产路径获取数据
            </summary>
            <param name="fromRelativePath"></param>
            <param name="dataPlatform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadDataAsync(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            异步加载数据
            </summary>
            <param name="dataRequest"></param>
            <param name="readyCallback"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadDataAsync(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            异步加载数据
            </summary>
            <param name="uri"></param>
            <param name="dataType"></param>
            <param name="readyCallback"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadData(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            加载数据
            </summary>
            <param name="dataRequest"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadData(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            加载数据
            </summary>
            <param name="uri"></param>
            <param name="dataType"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadData(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest)">
            <summary>
            加载数据
            </summary>
            <param name="dataRequest"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.LoadData(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType)">
            <summary>
            加载数据
            </summary>
            <param name="uri"></param>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.GetDataPlatform(UnityEngine.RuntimePlatform)">
            <summary>
            获取数据平台
            </summary>
            <param name="runtimePlatform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.FindGameObject(System.String)">
            <summary>
            查找游戏对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.GetIconInLib(System.Reflection.MemberInfo,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="defaultTexture"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataHandler.GetIconInLib(System.String,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="path"></param>
            <param name="defaultTexture"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler">
            <summary>
            数据处理器接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.GetDataFromStreamingAssetsPath(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataPlatform)">
            <summary>
            从流资产路径获取数据
            </summary>
            <param name="fromRelativePath"></param>
            <param name="dataPlatform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.LoadDataAsync(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            异步加载数据
            </summary>
            <param name="dataRequest"></param>
            <param name="readyCallback"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.LoadData(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object,System.Object},System.Object)">
            <summary>
            加载数据
            </summary>
            <param name="dataRequest"></param>
            <param name="completedCallback"></param>
            <param name="failedCallback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.LoadData(XCSJ.PluginCommonUtils.Base.Kernel.DataRequest)">
            <summary>
            加载数据
            </summary>
            <param name="dataRequest"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.FindGameObject(System.String)">
            <summary>
            查找游戏对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.GetIconInLib(System.Reflection.MemberInfo,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="defaultTexture"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IDataHandler.GetIconInLib(System.String,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="path"></param>
            <param name="defaultTexture"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest">
            <summary>
            数据请求
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest.uri">
            <summary>
            URI全局定位符
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest.dataType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest.timeout">
            <summary>
            超时时间，单位：秒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest.#ctor(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="uri"></param>
            <param name="dataType"></param>
            <param name="timeout"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.DataRequest.op_Implicit(System.String)~XCSJ.PluginCommonUtils.Base.Kernel.DataRequest">
            <summary>
            隐式转换
            </summary>
            <param name="uri"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo">
            <summary>
            数据信息接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.dataRequest">
            <summary>
            数据请求对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.texture">
            <summary>
            纹理
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.audioClip">
            <summary>
            音频剪辑
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.assetBundle">
            <summary>
            资产包
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.fullPath">
            <summary>
            全路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.url">
            <summary>
            url
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.bytes">
            <summary>
            字节
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.isError">
            <summary>
            是否有错误
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo.isDone">
            <summary>
            是否完成
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler">
            <summary>
            插件处理器接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.pluginsHandler">
            <summary>
            插件处理器接口对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.IsOnUGUI">
            <summary>
            用于判断鼠标（手势）当前是否在任意UGUI上
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.IsVerticalGUILayout">
            <summary>
            判断当前是否是垂直布局
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.isXRMode">
            <summary>
            是否是XR模式
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.gameViewRenderMode">
            <summary>
            游戏视图渲染模式
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.EditInspectorScript(UnityEngine.Object)">
            <summary>
            编辑检查器脚本
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.SelectTypeComponentsInScene(XCSJ.PluginCommonUtils.MB)">
            <summary>
            选择场景中所有类型组件
            </summary>
            <param name="mb"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.SearchTypeComponentsInScene(XCSJ.PluginCommonUtils.MB)">
            <summary>
            搜索场景中所有类型组件
            </summary>
            <param name="mb"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.DelayCall(System.Object,System.Action{System.Object},System.Single)">
            <summary>
            延时执行
            </summary>
            <param name="param"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.GetCommonMaterial">
            <summary>
            获取通用材质
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PluginsHandler.GetPropertyNameInInspector(UnityEngine.Object)">
            <summary>
            获取对象在检查器中可显示的属性名称数组：仅在Unity编辑器中使用时有效；
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode">
            <summary>
            游戏视图渲染模式:枚举游戏视图或主机PC主窗口中XR渲染的可用模式。仅当Unity编辑器处于播放模式时，才会发生XR渲染。
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode.None">
            <summary>
            禁止在游戏视图或主机PC主窗口中渲染任何眼睛。
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode.LeftEye">
            <summary>
            在主机PC的游戏视图窗口或主窗口中渲染XR设备的左眼。
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode.RightEye">
            <summary>
            在主机PC的游戏视图窗口或主窗口中渲染XR设备的右眼。
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode.BothEyes">
            <summary>
            在游戏视图或主机PC的主窗口中并排渲染XR设备的两只眼睛。
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.EGameViewRenderMode.OcclusionMesh">
            <summary>
            在游戏视图或主机PC的主窗口中并排渲染XR设备的双眼和遮挡网格。
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler">
            <summary>
            插件处理器接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.IsOnUGUI">
            <summary>
            用于判断鼠标（手势）当前是否在任意UGUI上
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.IsVerticalGUILayout">
            <summary>
            判断当前是否是垂直布局
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.isXRMode">
            <summary>
            是否是XR模式
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.gameViewRenderMode">
            <summary>
            游戏视图渲染模式
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.EditInspectorScript(UnityEngine.Object)">
            <summary>
            编辑检查器脚本
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.SelectTypeComponentsInScene(XCSJ.PluginCommonUtils.MB)">
            <summary>
            选择场景中所有类型组件
            </summary>
            <param name="mb"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.SearchTypeComponentsInScene(XCSJ.PluginCommonUtils.MB)">
            <summary>
            搜索场景中所有类型组件
            </summary>
            <param name="mb"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.DelayCall(System.Object,System.Action{System.Object},System.Single)">
            <summary>
            延时执行
            </summary>
            <param name="param"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.GetCommonMaterial">
            <summary>
            获取通用材质
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IPluginsHandler.GetPropertyNameInInspector(UnityEngine.Object)">
            <summary>
            获取对象在检查器中可显示的属性名称数组：仅在Unity编辑器中使用时有效；
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IManagerHandler`1">
            <summary>
            管理器处理器接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IManagerHandler`1.GetScripts(`0)">
            <summary>
            获取脚本列表
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IManagerHandler`1.ExecuteScript(`0,System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="manager"></param>
            <param name="id"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.LogHandler">
            <summary>
            日志管理器处理器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.LogHandler.logHandler">
            <summary>
            日志管理器处理器对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.LogHandler.GetScripts(XCSJ.PluginCommonUtils.LogManager)">
            <summary>
            获取脚本列表
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.LogHandler.RunScript(XCSJ.PluginCommonUtils.LogManager,System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="manager"></param>
            <param name="id"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.ILogHandler">
            <summary>
            日志管理器处理器接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.TweenHandler">
            <summary>
            补间处理器类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.TweenHandler.tweenHandler">
            <summary>
            补间处理对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.TweenHandler.To(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Action{System.Object,System.Object[]},System.Object[])">
            <summary>
            将变换补间到目标位置与旋转
            </summary>
            <param name="transform"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="duration"></param>
            <param name="onCompleteCallback"></param>
            <param name="callbackParams"></param>
            <returns>返回补间对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.TweenHandler.Kill(System.Object)">
            <summary>
            杀死，即结束补间
            </summary>
            <param name="tweener"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.ITweenHandler">
            <summary>
            补间处理器接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.ITweenHandler.To(UnityEngine.Transform,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Action{System.Object,System.Object[]},System.Object[])">
            <summary>
            将变换补间到目标位置与旋转
            </summary>
            <param name="transform"></param>
            <param name="position"></param>
            <param name="rotation"></param>
            <param name="duration"></param>
            <param name="onCompleteCallback"></param>
            <param name="callbackParams"></param>
            <returns>返回补间对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.ITweenHandler.Kill(System.Object)">
            <summary>
            杀死，即结束补间
            </summary>
            <param name="tweener"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler">
            <summary>
            Unity对象处理器接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.RegisterCreatedObjectUndo(UnityEngine.Object)">
            <summary>
            注册创建对象撤销
            </summary>
            <param name="objectToUndo"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.CreateGameObject(System.String)">
            <summary>
            创建游戏对象
            </summary>
            <param name="name">游戏对象的名称：会调用重命名<see cref="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.Rename(UnityEngine.Object,System.String)"/></param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.CreateGameObject(UnityEngine.PrimitiveType)">
            <summary>
            创建游戏对象
            </summary>
            <param name="primitiveType">基础类型</param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.AddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="gameObject">添加组件的游戏对象</param>
            <param name="componentType">待创建组件类型</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.CreateScriptableObject(System.Type)">
            <summary>
            创建脚本对象
            </summary>
            <param name="scriptableObjectType">将要创建的脚本对象类型</param>
            <returns>已创建脚本对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.CloneObject(UnityEngine.Object)">
            <summary>
            克隆对象
            </summary>
            <param name="obj">将要克隆的对象</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.DestoryObject(UnityEngine.Object)">
            <summary>
            销毁对象
            </summary>
            <param name="obj">将要销毁的对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.Rename(UnityEngine.Object,System.String)">
            <summary>
            重命名
            </summary>
            <param name="obj">将要重命名的对象</param>
            <param name="name">新名称</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            设置父级变换
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="newParent">新父级</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.ModifyProperty(UnityEngine.Object,System.String,System.Action)">
            <summary>
            修改属性
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
            <param name="action">修改函数</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler.ModifyProperty``1(UnityEngine.Object,System.String,``0@,``0)">
            <summary>
            修改属性
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称</param>
            <param name="property">将要修改的属性</param>
            <param name="newValue">新的属性值</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler">
            <summary>
            Unity对象处理器；类中方法与Unity对象处理器接口<see cref="T:XCSJ.PluginCommonUtils.Base.Kernel.IUnityObjectHandler"/>对象的接口方法实现一一对应；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.unityObjectHandler">
            <summary>
            Unity对象处理器接口对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.RegisterCreatedObjectUndo(UnityEngine.Object)">
            <summary>
            注册创建对象撤销
            </summary>
            <param name="objectToUndo"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.CreateGameObject(System.String)">
            <summary>
            创建游戏对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；
            </summary>
            <param name="name">游戏对象的名称：会调用重命名<see cref="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.Rename(UnityEngine.Object,System.String)"/></param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.CreateGameObject(UnityEngine.PrimitiveType)">
            <summary>
            创建游戏对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="primitiveType">基础类型</param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.AddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            添加组件；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；
            </summary>
            <param name="gameObject">添加组件的游戏对象</param>
            <param name="componentType">待创建组件类型</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.CreateScriptableObject(System.Type)">
            <summary>
            创建脚本对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；
            </summary>
            <param name="scriptableObjectType">待创建脚本对象类型</param>
            <returns>已创建的脚本对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.CloneObject``1(``0)">
            <summary>
            克隆对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillClone"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCloned"/>)；
            </summary>
            <typeparam name="T">将要克隆对象的泛型类型</typeparam>
            <param name="obj">将要克隆的对象</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.DestoryObject(UnityEngine.Object)">
            <summary>
            销毁对象；会回调销毁对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillDestroyObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onDestroyedObject"/>)；
            </summary>
            <param name="obj">将要销毁的对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.Rename(UnityEngine.Object,System.String)">
            <summary>
            重命名：如果新旧名称相同，不执行调用；；会回调重命名事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillRename"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onRenamed"/>)；
            </summary>
            <param name="obj">将要重命名的对象</param>
            <param name="name">新名称</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            设置父级变换；会回调设置父级变换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent"/>)；
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="newParent">新父级</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.ModifyProperty(UnityEngine.Object,System.String,System.Action)">
            <summary>
            修改属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)；
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
            <param name="action">修改函数</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler.ModifyProperty``1(UnityEngine.Object,System.String,``0@,``0)">
            <summary>
            修改属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称</param>
            <param name="property">将要修改的属性</param>
            <param name="newValue">新的属性值</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs">
            <summary>
            Unity对象处理器事件参数类
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs.cancleHandle">
            <summary>
            取消处理；为True时，不会对对象进行后续的处理；为False时，继续处理对象并回调后续的处理事件；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs.New">
            <summary>
            新建当之前对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent">
            <summary>
            Unity对象处理器事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallCreateObject``1(System.Type,UnityEngine.Object,System.Func{``0})">
            <summary>
            调用创建对象事件
            </summary>
            <typeparam name="T">待创建对象泛型类型；可由type参数指定的类型转化；</typeparam>
            <param name="type">待创建对象的真实类型</param>
            <param name="obj">创建所需的依赖对象</param>
            <param name="func">创建函数</param>
            <returns>返回创建后的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallCreateObject``1(UnityEngine.Object,System.Func{``0})">
            <summary>
            创建对象
            </summary>
            <typeparam name="T">待创建对象泛型类型</typeparam>
            <param name="obj">创建所需的依赖对象</param>
            <param name="func">创建函数</param>
            <returns>返回创建后的对象</returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject">
            <summary>
            将要创建对象事件：当将要创建指定类型的对象之前回调；参数依次为：将要创建对象的类型、创建所需的依赖对象、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillCreateObject(System.Type,UnityEngine.Object,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要创建对象事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>
            </summary>
            <param name="type">将要创建对象的类型</param>
            <param name="obj">创建所需的依赖对象</param>
            <param name="eventArgs">对象处理器事件参数对象</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject">
            <summary>
            已创建对象事件：当对象创建之后回调；参数依次为：已创建对象的类型、创建所需的依赖对象、已创建的对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnCreatedObject(System.Type,UnityEngine.Object,UnityEngine.Object)">
            <summary>
            调用已创建对象事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>
            </summary>
            <param name="type">已创建对象的类型</param>
            <param name="obj">创建所需的依赖对象</param>
            <param name="createdObject">已创建的对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallCloneObject``1(UnityEngine.Object,System.Func{``0})">
            <summary>
            调用克隆对象事件
            </summary>
            <typeparam name="T">将要克隆对象的泛型类型</typeparam>
            <param name="obj">将要克隆的对象</param>
            <param name="func">克隆函数</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillClone">
            <summary>
            将要克隆对象事件：当将要克隆对象之前回调；参数依次为：将要克隆的对象、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillClone(UnityEngine.Object,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要克隆对象事件
            </summary>
            <param name="obj">将要克隆的对象</param>
            <param name="eventArgs"></param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCloned">
            <summary>
            已克隆对象事件：当克隆对象滞后回调；参数依次为：将要克隆的对象、新克隆的对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnCloned(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            调用已克隆对象事件
            </summary>
            <param name="obj">将要克隆的对象</param>
            <param name="clonedObject">新克隆的对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallDestroyObject(System.Type,UnityEngine.Object,System.Action)">
            <summary>
            调用销毁对象事件
            </summary>
            <param name="type">待销毁对象的类型</param>
            <param name="obj">待销毁的对象</param>
            <param name="action">销毁函数</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillDestroyObject">
            <summary>
            将要销毁对象事件：当将要销毁对象之前回调；参数依次为：将要销毁对象的类型、将要销毁的对象、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillDestroyObject(System.Type,UnityEngine.Object,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要销毁对象事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillDestroyObject"/>
            </summary>
            <param name="type">待销毁对象的类型</param>
            <param name="obj">待销毁的对象</param>
            <param name="eventArgs">对象处理器事件参数对象</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onDestroyedObject">
            <summary>
            已销毁对象事件：当销毁对象之后回调；参数依次为：已毁对象的类型、已销毁的对象（已为无效对象）；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnDestroyedObject(System.Type,UnityEngine.Object)">
            <summary>
            调用已销毁对象事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onDestroyedObject"/>
            </summary>
            <param name="type">待销毁对象的类型</param>
            <param name="obj">待销毁的对象（已为无效对象）</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallRename(UnityEngine.Object,System.String,System.String,System.Action)">
            <summary>
            调用重命名事件：如果新旧名称相同，不执行调用；
            </summary>
            <param name="obj">待重命名的对象</param>
            <param name="oldName">旧名称</param>
            <param name="newName">新名称</param>
            <param name="action">重命名函数</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillRename">
            <summary>
            将要重命名事件：当将要修改名称之前回调；参数依次为：将要重命名的对象、旧名称、新名称、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillRename(UnityEngine.Object,System.String,System.String,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要重命名事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillRename"/>
            </summary>
            <param name="obj">将要重命名的对象</param>
            <param name="oldName">旧名称</param>
            <param name="newName">新名称</param>
            <param name="eventArgs">对象处理器事件参数对象</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onRenamed">
            <summary>
            已重命名事件：当名称修改之后回调；参数依次为：已重命名的对象、旧名称、新名称；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnRenamed(UnityEngine.Object,System.String,System.String)">
            <summary>
            调用已重命名事件<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onRenamed"/>
            </summary>
            <param name="obj">已重命名的对象</param>
            <param name="oldName">旧名称</param>
            <param name="newName">新名称</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallSetTransformParent(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,System.Action)">
            <summary>
            调用设置父级变换事件
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="oldParent">旧父级</param>
            <param name="newParent">新父级</param>
            <param name="action">设置函数</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent">
            <summary>
            将要设置父级变换事件：当将要设置父级变换之前回调；参数依次为：将要设置父级变换的变换对象、旧父级、新父级、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillSetTransformParent(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要设置父级变换事件
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="oldParent">旧父级</param>
            <param name="newParent">新父级</param>
            <param name="eventArgs">对象处理器事件参数对象</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent">
            <summary>
            已设置父级变换事件：当设置父级变换之后回调；参数依次为：已设置父级变换的变换对象、旧父级、新父级；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnSettedTransformParent(UnityEngine.Transform,UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            调用已设置父级变换事件
            </summary>
            <param name="transform">已设置父级变换的变换对象</param>
            <param name="oldParent">旧父级</param>
            <param name="newParent">新父级</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallModifyProperty``1(UnityEngine.Object,System.String,``0@,``0,System.Action)">
            <summary>
            调用修改属性事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称</param>
            <param name="property">将要修改的属性</param>
            <param name="newValue">新的属性值</param>
            <param name="willModifyAction">在属性已确定要修改，将要修改前回调；本动作回调后立即执行属性修改为新的属性值的操作；</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallModifyProperty(UnityEngine.Object,System.String,System.Action)">
            <summary>
            调用修改属性事件
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
            <param name="action">修改函数</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty">
            <summary>
            将要修改属性事件：当将要修改对象的属性（包括字段、属性）之前回调；参数依次为：将要修改属性的对象、将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）、对象处理器事件参数对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnWillModifyProperty(UnityEngine.Object,System.String,XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEventArgs)">
            <summary>
            调用将要修改属性事件
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
            <param name="eventArgs">对象处理器事件参数对象</param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty">
            <summary>
            已修改属性事件：当已修改对象的属性（包括字段、属性）之后回调；参数依次为：已修改属性的对象、已修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.CallOnModifiedProperty(UnityEngine.Object,System.String)">
            <summary>
            调用已修改属性事件
            </summary>
            <param name="obj">已修改属性的对象</param>
            <param name="name">已修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler">
            <summary>
            路径处理器类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.pathHandler">
            <summary>
            路径处理器对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.streamingAssetsPath">
            <summary>
            流资产路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.persistentDataPath">
            <summary>
            可持久化数据路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.fileProtocol">
            <summary>
            文件协议
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.IsHttpPath(System.String)">
            <summary>
            判断路径是否是 网络路径；即以 http 字符串开头的路径；不判断网络路径的有效性；
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.GetFilePath(System.String)">
            <summary>
            如果路径为本地磁盘路径，会添加文件协议前缀；网络路径不处理；
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.GetLocalFilePath(System.String)">
            <summary>
            为路径添加文件协议前缀
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.LocalFileSmartSearch(System.String,System.String@)">
            <summary>
            在本地磁盘路径中查找输入的期望路径文件；
            </summary>
            <param name="fullPath"></param>
            <param name="existFullPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.PathHandler.FileSmartSearch(System.String,System.String@)">
            <summary>
            文件智能查找；
            如果是网络路径会直接返回该路径
            否则调用 LocalFileSmartSearch 进行处理
            </summary>
            <param name="fullPath"></param>
            <param name="existFullPath"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.IPathHandler">
            <summary>
            路径处理器接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IPathHandler.persistentDataPath">
            <summary>
            可持久化数据路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.IPathHandler.fileProtocol">
            <summary>
            文件协议
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler">
            <summary>
            文件处理器：仅可在主线程中使用
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.asyncMono">
            <summary>
            异步MB对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadFile(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            加载文件
            </summary>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadLocalFile(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            异步加载本地文件
            </summary>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadHttpFile(System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            异步加载HTTP文件
            </summary>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadFile(UnityEngine.MonoBehaviour,System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            异步加载文件
            </summary>
            <param name="mono"></param>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadLocalFile(UnityEngine.MonoBehaviour,System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            异步加载本地文件
            </summary>
            <param name="mono"></param>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Base.Kernel.FileHandler.LoadHttpFile(UnityEngine.MonoBehaviour,System.String,XCSJ.PluginCommonUtils.Base.Kernel.EDataType,System.Action{XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.Object},System.Object)">
            <summary>
            异步加载Http文件
            </summary>
            <param name="mono"></param>
            <param name="path"></param>
            <param name="dataType"></param>
            <param name="callback"></param>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EBoundsAnchor">
            <summary>
            包围盒锚点：按照上中下，左中右，前中后顺序定义包围盒特征锚点；以处于包围中心方式，理解上中下，左中右，前中后等概念；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.TopLeftFront">
            <summary>
            左上前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.TopLeft">
            <summary>
            左上
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.TopLeftBack">
            <summary>
            左上后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.TopFront">
            <summary>
            上前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.TopBack">
            <summary>
            上后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightTopFront">
            <summary>
            右上前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightTop">
            <summary>
            右上
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightTopBack">
            <summary>
            右上后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.LeftFront">
            <summary>
            左前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.LeftBack">
            <summary>
            左后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Front">
            <summary>
            前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Center">
            <summary>
            前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Back">
            <summary>
            后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightFront">
            <summary>
            右前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightBack">
            <summary>
            右后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.LeftBottomFront">
            <summary>
            左下前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.LeftBottom">
            <summary>
            左下
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.LeftBottomBack">
            <summary>
            左下后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.BottomFront">
            <summary>
            下前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.BottomBack">
            <summary>
            下后
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightBottomFront">
            <summary>
            右下前
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightBottom">
            <summary>
            右下
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EBoundsAnchor.RightBottomBack">
            <summary>
            右下后
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.AnchorHelper">
            <summary>
            锚点辅助类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorPoition(XCSJ.PluginCommonUtils.EBoundsAnchor,UnityEngine.Bounds)">
            <summary>
            获取包围盒锚点位置
            </summary>
            <param name="boundsAnchor"></param>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorPoition(XCSJ.PluginCommonUtils.EBoundsAnchor,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            获取包围盒锚点位置
            </summary>
            <param name="boundsAnchor"></param>
            <param name="center"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorPoition(UnityEngine.Bounds,XCSJ.PluginCommonUtils.EBoundsAnchor)">
            <summary>
            获取包围盒锚点位置
            </summary>
            <param name="bounds"></param>
            <param name="boundsAnchor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorOffset(XCSJ.Maths.ERectAnchor,UnityEngine.Vector2)">
            <summary>
            获取矩形锚点偏移值，相对坐标原点的偏移值
            </summary>
            <param name="anchor"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorPoition(XCSJ.Maths.ERectAnchor,UnityEngine.Rect)">
            <summary>
            获取矩形锚点位置，基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rectAnchor"></param>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetAnchorPoition(UnityEngine.Rect,XCSJ.Maths.ERectAnchor)">
            <summary>
            获取矩形锚点位置，基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rect"></param>
            <param name="rectAnchor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AnchorHelper.GetRectPositionOfSameAnchor(UnityEngine.Rect,UnityEngine.Vector2,XCSJ.Maths.ERectAnchor)">
            <summary>
            获取等同锚点的矩形位置，即输入的矩形与期望长度的矩形的锚点位置重合；基于左上角坐标系进行计算(即X向右，Y向下)；
            </summary>
            <param name="rect"></param>
            <param name="rectSize"></param>
            <param name="rectAnchor"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ESpaceType">
            <summary>
            空间类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESpaceType.World">
            <summary>
            世界:相对于世界坐标系统进行变换
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESpaceType.Local">
            <summary>
            本地:相对于本地坐标系统进行变换,即局部坐标、自身坐标;
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ECoordinateType">
            <summary>
            坐标系类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECoordinateType.World">
            <summary>
            世界坐标系:世界坐标系,Unity自身的世界全局坐标系；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECoordinateType.Screen">
            <summary>
            屏幕坐标系:屏幕坐标系，基于当前显示屏幕构建的坐标系；左下角为(0,0)坐标原点，向右为x正方向，向上为y正方向；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECoordinateType.GUI">
            <summary>
            GUI坐标系:GUI坐标系，基于Unity的GUI渲染系统构建的坐标系；左上角为(0,0)坐标原点，向右为x正方向，向下为y正方向；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECoordinateType.ViewPort">
            <summary>
            视口坐标系:视口坐标系,基于Unity中当前相机的构建的坐标系；相机当前位置为(0,0,0)坐标远点，相机渲染视口的左下角为(0,0,z),，相机渲染视口的右上角为(1,1,z),Z的位置是以相机的世界单位来衡量的，z轴方向为相机位置到屏幕坐标点构成的射线的方向（即z轴为动态轴）；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EAxisType">
            <summary>
            轴类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAxisType.X">
            <summary>
            X轴
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAxisType.Y">
            <summary>
            Y轴
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAxisType.Z">
            <summary>
            Z轴
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EMouseButtonType">
            <summary>
            鼠标按钮类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EMouseButtonType.Left">
            <summary>
            左键
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EMouseButtonType.Right">
            <summary>
            右键
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EMouseButtonType.Middle">
            <summary>
            中键
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.SearchFlagsHelper">
            <summary>
            搜索标识组手类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.HasAnyFlag(XCSJ.PluginCommonUtils.ESearchFlags,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            有任意标识，进行与运算后结果不为<see cref="F:XCSJ.PluginCommonUtils.ESearchFlags.None"/>即成立；
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.HasFlag(XCSJ.PluginCommonUtils.ESearchFlags,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            有标识，进行与运算后结果仍为flag值即成立；
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.HasValidFlag(XCSJ.PluginCommonUtils.ESearchFlags,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            有有效标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.RemoveFlag(XCSJ.PluginCommonUtils.ESearchFlags,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            移除标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.AddFlag(XCSJ.PluginCommonUtils.ESearchFlags,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            添加标识
            </summary>
            <param name="flags"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.CheckHierarchyEnable(XCSJ.PluginCommonUtils.ESearchFlags,System.Boolean)">
            <summary>
            检查层级启用
            </summary>
            <param name="flags"></param>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.CheckCompnentEnable(XCSJ.PluginCommonUtils.ESearchFlags,System.Boolean)">
            <summary>
            检查组件可用
            </summary>
            <param name="flags"></param>
            <param name="enable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.IncludeInactive(XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            包含非激活的
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.GetHierarchys``1(System.Collections.Generic.IEnumerable{``0},XCSJ.PluginCommonUtils.ESearchFlags,System.Func{``0,System.Boolean})">
            <summary>
            获取层级
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="searchFlags"></param>
            <param name="hierarchyEnableFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.GetChildren(UnityEngine.Transform,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            获取子级
            </summary>
            <param name="transform"></param>
            <param name="searchFlags"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.GetChildren(UnityEngine.GameObject,XCSJ.PluginCommonUtils.ESearchFlags)">
            <summary>
            获取子级
            </summary>
            <param name="gameObject"></param>
            <param name="searchFlags"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.GetComponents``1(System.Collections.Generic.IEnumerable{``0},XCSJ.PluginCommonUtils.ESearchFlags,System.Type,System.Func{``0,System.Boolean})">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="searchFlags"></param>
            <param name="type"></param>
            <param name="componentEnableFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SearchFlagsHelper.GetComponents``1(System.Collections.Generic.IEnumerable{``0},XCSJ.PluginCommonUtils.ESearchFlags,System.Type)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="searchFlags"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ESearchFlags">
            <summary>
            搜索标志枚举；适用于带层级的组件化模式搜索，例如游戏对象（即组件集，组件集之间层级子父关系称之为层级）与组件（有父级，即组件集，无子级）关系的搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Self">
            <summary>
            自身；搜索传入的组件集；如果传入的组件集无效时，默认从根组件集开始搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Children">
            <summary>
            子级；搜索传入的组件集的子一级组件集；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Hierarchy">
            <summary>
            层级；遍历搜索传入的组件集的子级以及子级的子级（递归遍历）组件集；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.HierarchyEnable">
            <summary>
            层级启用；搜索激活的组件集，如不添加本标志则激活组件集的则不进行搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Active">
            <summary>
            激活，即层级启用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.HierarchyDisable">
            <summary>
            层级禁用；搜索非激活的组件集，如不添加本标志则非激活的组件集则不进行搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Inactive">
            <summary>
            非激活，即层级禁用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.ComponentEnable">
            <summary>
            组件启用；搜索启用的组件，如不添加本标志则激活的组件则不进行搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Enable">
            <summary>
            启用，即组件启用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.ComponentDisable">
            <summary>
            组件禁用；搜索禁用的组件，如不添加本标志则禁用的组件则不进行搜索；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Disable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.FirstComponent">
            <summary>
            第一组件；如果同一组件集上多个相同类型的组件时取第一个；通常与‘优化组件’搜索标志搭配使用；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.OptimizeComponent">
            <summary>
            优化组件；使用组件集替代组件本身；通常与‘第一组件’搜索标志搭配使用；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.DefaultIgnoreHierarchy">
            <summary>
            默认忽略层级；包含：自身，子级，激活，非激活，启用，禁用；即遍历自身与子一级所有激活与非激活组件集上的启用与禁用的组件；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.Default">
            <summary>
            默认；包含：默认忽略层级，层级
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.DefaultOptimize">
            <summary>
            默认；包含：默认,第一组件，优化组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.SelfComponent">
            <summary>
            自身组件；包含：自身，激活，非激活，启用，禁用；即搜索自身组件集（不管自身组件集激活与非激活都搜索）上的所有启用与禁用的组件；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.DefaultChildren">
            <summary>
            默认子级；包含：子级，激活，非激活，启用，禁用；即仅遍历传入的组件集的子一级（即传入的自身组件集不进行搜索，子一级组件集不论激活与非激活都搜索）上的所有启用与禁用的组件；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ESearchFlags.DefaultChildrenOptimize">
            <summary>
            默认子级优化；包含：子级，激活，非激活，启用，禁用，第一组件，优化组件；即仅遍历传入的组件集的子一级（即传入的自身组件集不进行搜索，子一级组件集不论激活与非激活都搜索）上的所有启用与禁用的组，并且搜索结果执行‘第一组件’与‘优化组件’搜索标志的处理；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GUIStyleCreater">
            <summary>
            GUI样式构建器
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GUIStyleCreater.PrefixName">
            <summary>
            前缀名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GUIStyleCreater.guiStyleCreater">
            <summary>
            key = 风格名，value = 风格创建函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GUIStyleCreater.AddGUIStyleCreateFunction(System.String,System.Func{System.String,UnityEngine.GUIStyle})">
            <summary>
            创建风格
            </summary>
            <param name="name"></param>
            <param name="createFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GUIStyleCreater.FindOrCreate(System.String)">
            <summary>
            查找或创建风格，并返回风格对象
            </summary>
            <param name="name">风格名称</param>
            <returns>风格</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GUIStyleCreater.RegistToCurrentGUISkin(UnityEngine.GUIStyle)">
            <summary>
            将GUIStyle注册到当前GUISkin中,即注册到GUI.skin对象的用户自定义风格中
            </summary>
            <param name="style">风格</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GUIStyleCreater.RegistToSkin(UnityEngine.GUIStyle,UnityEngine.GUISkin)">
            <summary>
            将GUIStyle注册到指定的GUISkin中,即注册到传入的GUISkin用户自定义风格中
            </summary>
            <param name="style"></param>
            <param name="skin"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IAwake">
            <summary>
            唤醒初始化接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IAwake.Awake">
            <summary>
            唤醒
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IStart">
            <summary>
            启动接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IStart.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IUpdate">
            <summary>
            更新接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IUpdate.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnGUI">
            <summary>
            绘制GUI接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnGUI.OnGUI">
            <summary>
            绘制GUI
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnEnable">
            <summary>
            当启用接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnEnable.OnEnable">
            <summary>
            当启用时
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnDisable">
            <summary>
            当禁用时接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnDisable.OnDisable">
            <summary>
            当禁用
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnDestroy">
            <summary>
            当销毁接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnDestroy.OnDestroy">
            <summary>
            当销毁
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnDrawGizmos">
            <summary>
            当绘制Gizmos接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnDrawGizmos.OnDrawGizmos">
            <summary>
            当绘制Gizmos
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnDrawGizmosSelected">
            <summary>
            当绘制选中的Gizmos
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnDrawGizmosSelected.OnDrawGizmosSelected">
            <summary>
            绘制选中的Gizmos
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGizmos">
            <summary>
            Gizmos接口声明
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IReset">
            <summary>
            重置接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IReset.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IMonoBehaviourLite">
            <summary>
            MonoBehaviour简版接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IMonoBehaviour">
            <summary>
            MonoBehaviour接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGraph">
            <summary>
            图形接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraph.rect">
            <summary>
            矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraph.parentRect">
            <summary>
            父级矩形
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraph.parent">
            <summary>
            父级
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraph.graphGroup">
            <summary>
            图新组
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGraphGroup">
            <summary>
            图形组接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraphGroup.children">
            <summary>
            成员列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGraphGroup`1">
            <summary>
            图形组接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraphGroup`1.children">
            <summary>
            成员列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGraphGroupCollection">
            <summary>
            图形组集合接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraphGroupCollection.groups">
            <summary>
            组列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IGraphGroupCollection`2">
            <summary>
            图形组集合接口
            </summary>
            <typeparam name="TGroup"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IGraphGroupCollection`2.groups">
            <summary>
            组列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnTriggerEnter">
            <summary>
            当触发器进入接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnTriggerEnter.OnTriggerEnter(UnityEngine.Collider)">
            <summary>
            当触发器进入
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnTriggerStay">
            <summary>
            当触发器保持接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnTriggerStay.OnTriggerStay(UnityEngine.Collider)">
            <summary>
            当触发器保持
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnTriggerExit">
            <summary>
            当触发器退出接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnTriggerExit.OnTriggerExit(UnityEngine.Collider)">
            <summary>
            当触发器退出
            </summary>
            <param name="collider"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnTrigger">
            <summary>
            触发器接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnCollisionEnter">
            <summary>
            当碰撞器进入接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnCollisionEnter.OnCollisionEnter(UnityEngine.Collision)">
            <summary>
            当碰撞器进入
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnCollisionStay">
            <summary>
            当碰撞器保持接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnCollisionStay.OnCollisionStay(UnityEngine.Collision)">
            <summary>
            当碰撞器保持
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnCollisionExit">
            <summary>
            当碰撞器退出接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IOnCollisionExit.OnCollisionExit(UnityEngine.Collision)">
            <summary>
            当碰撞器退出
            </summary>
            <param name="collision"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IOnCollision">
            <summary>
            碰撞器接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.MultiLanguageHelper">
            <summary>
            多语言组手
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.MultiLanguageHelper.onChanged">
            <summary>
            当变换时回调：发生回调的情况有：当语言切换后当导致前语言文件发生变更、因清理缓存导致语言文件发生变更、语言文件重新生成的变更等；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.Clear">
            <summary>
            清理：将语言文件缓存全部清空，并触发语言类型已变更事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.Set(System.Func{UnityEngine.SystemLanguage,XCSJ.Languages.LanguageFile})">
            <summary>
            设置用于获取语言文件的委托：用于外围扩展时使用；
            </summary>
            <param name="getLanguageFileFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.GetLanguageFile(UnityEngine.SystemLanguage)">
            <summary>
            获取语言文件
            </summary>
            <param name="systemLanguage"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.ToSystemLanguage(XCSJ.Languages.ELanguageType)">
            <summary>
            转系统语言
            </summary>
            <param name="languageType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.ToLanguageType(UnityEngine.SystemLanguage)">
            <summary>
            转语言类型
            </summary>
            <param name="systemLanguage"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.TrLabel(System.Type,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            翻译标签
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.TrLabel(System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            翻译标签
            </summary>
            <param name="memberInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MultiLanguageHelper.TrLabel(System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            翻译标签
            </summary>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ENameTip">
            <summary>
            名称提示枚举
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENameTip.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENameTip.Image">
            <summary>
            图像
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENameTip.EmptyTextWhenHasImage">
            <summary>
            当有图像时清空文本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENameTip.OnlyTip">
            <summary>
            仅提示
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.NameTipCache">
            <summary>
            名称提示缓存；因会缓存图片资产，所以当有任意资产变动时（包括编辑器与运行时）需清理缓存；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache">
            <summary>
            成员信息缓存；键值：ELanguageType-MemberInfo-ENameTip；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache.TryGet(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            尝试获取
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <param name="value"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache.Name(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo)">
            <summary>
            获取名称
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache.Tip(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo)">
            <summary>
            获取提示
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache.NameTip(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，会执行拷贝（即会对底层缓存对象执行拷贝）；
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoCache.NameTipNoCopy(XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，不执行拷贝（即直接返回底层缓存对象）；
            </summary>
            <param name="languageType"></param>
            <param name="memberInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue">
            <summary>
            成员信息值；键值：ELanguageType-MemberInfo-ENameTip；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.tip">
            <summary>
            提示
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.contentCopy">
            <summary>
            拷贝内容
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.MemberInfoValue.NameTip">
            <summary>
            名称提示；根据底层信息获取名称提示；
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache">
            <summary>
            类型成员缓存；键值：ELanguageType-Type-成员名-ENameTip；可用于缓存字段、属性成员的对应信息；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.TryGet(XCSJ.Languages.ELanguageType,System.Type,System.String,XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            尝试获取
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="value"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.Name(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.MemberInfo@)">
            <summary>
            名称
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.Name(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.FieldInfo@)">
            <summary>
            名称
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.Name(XCSJ.Languages.ELanguageType,System.Type,System.String)">
            <summary>
            名称
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.Tip(XCSJ.Languages.ELanguageType,System.Type,System.String)">
            <summary>
            提示
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTip(XCSJ.Languages.ELanguageType,System.Type,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，会执行拷贝（即会对底层缓存对象执行拷贝）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTip(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.FieldInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，会执行拷贝（即会对底层缓存对象执行拷贝）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="memberFieldInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTip(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.MemberInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，会执行拷贝（即会对底层缓存对象执行拷贝）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTipNoCopy(XCSJ.Languages.ELanguageType,System.Type,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，不执行拷贝（即直接返回底层缓存对象）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTipNoCopy(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.FieldInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，不执行拷贝（即直接返回底层缓存对象）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="memberFieldInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberCache.NameTipNoCopy(XCSJ.Languages.ELanguageType,System.Type,System.String,System.Reflection.MemberInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取名称提示的GUI内容，不执行拷贝（即直接返回底层缓存对象）；
            </summary>
            <param name="languageType"></param>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue">
            <summary>
            类型成员值；键值：ELanguageType-Type-成员名-ENameTip；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.fieldInfo">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.memberInfo">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.tip">
            <summary>
            提示
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.contentCopy">
            <summary>
            拷贝内容
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.TypeMemberValue.NameTip">
            <summary>
            名称提示；根据底层信息获取名称提示；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.NameTipCache.HandleLabel(System.Reflection.MemberInfo,UnityEngine.GUIContent,XCSJ.PluginCommonUtils.ENameTip,UnityEngine.Texture2D@)">
            <summary>
            处理标签
            </summary>
            <param name="memberInfo"></param>
            <param name="content"></param>
            <param name="nameTip"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentCache">
            <summary>
            组件缓存；用于缓存当前场景中某一类型组件的所有实例对象;当场景发生游戏对象、组件的增加、删除等关键操作时，缓存被清空；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentCache.Value">
            <summary>
            组件缓存信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.scenePath">
            <summary>
            场景路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.componentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.searchFlags">
            <summary>
            搜索标志
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.components">
            <summary>
            符合期望组件类型与搜索标志的结果组件数组
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.namePathOfGameObject">
            <summary>
            结果组件数组中每个组件所在游戏对象的名称路径数组；数组元素按照字符串升序排序；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentCache.Value.namePathOfComponent">
            <summary>
            结果组件数组中每个组件的名称路径数组；数组元素按照字符串升序排序；名称路径形如：/GameObject0/GameObject1/XCSJ.Component；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Value.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Value.GetGameObjectNamePath(UnityEngine.GameObject)">
            <summary>
            获取游戏对象路径名称
            </summary>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Value.GetGameObject(System.String)">
            <summary>
            获取游戏对象
            </summary>
            <param name="namePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Value.GetComponentNamePath(UnityEngine.Component)">
            <summary>
            获取组件路径名称
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Value.GetComponent(System.String)">
            <summary>
            获取组件
            </summary>
            <param name="namePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Get(System.Type,System.Boolean,System.String)">
            <summary>
            获取
            </summary>
            <param name="componentType"></param>
            <param name="includeInactive"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Get(System.Type,XCSJ.PluginCommonUtils.ESearchFlags,System.String)">
            <summary>
            获取
            </summary>
            <param name="componentType"></param>
            <param name="searchFlags"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Get``1(System.Boolean,System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeInactive"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.Get``1(XCSJ.PluginCommonUtils.ESearchFlags,System.String)">
            <summary>
            获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="searchFlags"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.GetComponents``1(System.Boolean,System.String)">
            <summary>
            获取组件枚举器
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeInactive"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentCache.GetComponent``1(System.Boolean,System.String)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeInactive"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EnumNameTipCache">
            <summary>
            枚举名称提示缓存；用于缓存枚举所有字段成员的名称提示信息；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.Get(System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的GUI内容
            </summary>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.Get(XCSJ.Languages.ELanguageType,System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的GUI内容
            </summary>
            <param name="languageType"></param>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.GetNames(XCSJ.Languages.ELanguageType,System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的名称
            </summary>
            <param name="languageType"></param>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.GetNames_ConsiderHideInSuperInspectorAttribute(XCSJ.Languages.ELanguageType,System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取考虑<see cref="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute"/>特性修饰枚举字段情况的枚举所有字段成员的名称
            </summary>
            <param name="languageType"></param>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.GetNames(XCSJ.Languages.ELanguageType,System.Type,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的名称
            </summary>
            <param name="languageType"></param>
            <param name="enumType"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.GetNames_ConsiderHideInSuperInspectorAttribute(XCSJ.Languages.ELanguageType,System.Type,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取考虑<see cref="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute"/>特性修饰枚举字段情况的枚举所有字段成员的名称
            </summary>
            <param name="languageType"></param>
            <param name="enumType"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.Get``1(XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的GUI内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.Get``1(XCSJ.Languages.ELanguageType,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取枚举所有字段成员的GUI内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="languageType"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.GetValue(XCSJ.Languages.ELanguageType,System.Type,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取值
            </summary>
            <param name="languageType"></param>
            <param name="enumType">枚举类型</param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EnumNameTipCache.Value">
            <summary>
            值类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EnumNameTipCache.Value.contents">
            <summary>
            内容数组：保留枚举原始定义的顺序；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EnumNameTipCache.Value.names">
            <summary>
            名称数组：保留枚举原始定义的顺序；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EnumNameTipCache.Value.contents_ConsiderHideInSuperInspectorAttribute">
            <summary>
            考虑<see cref="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute"/>特性修饰枚举字段情况的内容数组：保留枚举原始定义的顺序；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EnumNameTipCache.Value.names_ConsiderHideInSuperInspectorAttribute">
            <summary>
            考虑<see cref="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute"/>特性修饰枚举字段情况的名称数组：保留枚举原始定义的顺序；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumNameTipCache.Value.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ITreeNode">
            <summary>
            树形节点泛型接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNode.displayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNode.parent">
            <summary>
            父级
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNode.children">
            <summary>
            子级
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ITreeNodeGraph">
            <summary>
            树形节点图形化
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.display">
            <summary>
            显示的GUI内容
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.enable">
            <summary>
            是否可用；仅影响当前节点是否可回调点击事件；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.visible">
            <summary>
            是否可见；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.depth">
            <summary>
            深度
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.expanded">
            <summary>
            是否展开
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.selected">
            <summary>
            是否被选择
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.parent">
            <summary>
            父级
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraph.children">
            <summary>
            子级
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ITreeNodeGraph.OnClick">
            <summary>
            点击
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ETreeNodeType">
            <summary>
            树形节点类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ETreeNodeType.Root">
            <summary>
            根
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ETreeNodeType.Sub">
            <summary>
            子
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ETreeNodeType.Leaf">
            <summary>
            叶子
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ITreeNodeGraphExtension">
            <summary>
            树形节点图形化扩展
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ITreeNodeGraphExtension.nodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.TreeView">
            <summary>
            树形视图
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Foreach(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Action{XCSJ.PluginCommonUtils.ITreeNodeGraph},System.Boolean)">
            <summary>
            遍历所有树形节点及子级节点
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="action"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Any(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Func{XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean},System.Boolean)">
            <summary>
            所有树形节点及子级节点中任意一个节点满足条件
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="func"></param>
            <param name="includeChildren"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.All(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Func{XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean},System.Boolean)">
            <summary>
            所有树形节点及子级节点中所有节点都满足条件
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="func"></param>
            <param name="includeChildren"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.DefaultPrefixFunc(System.String,XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Int32)">
            <summary>
            获取默认前缀字符串函数
            </summary>
            <param name="parentIndexText"></param>
            <param name="treeNodeGraph"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.DefaultDrawAction(XCSJ.PluginCommonUtils.ITreeNodeGraph,UnityEngine.GUIContent)">
            <summary>
            默认绘制功能
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="label"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.DefaultDrawExpandedFunc(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Single)">
            <summary>
            默认绘制展开项功能
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="hasChildren"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Expand(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Boolean)">
            <summary>
            展开
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="expanded"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Enable(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Boolean)">
            <summary>
            启用
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="enable"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Visible(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Boolean)">
            <summary>
            可视
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="visible"></param>
            <param name="includeChildren"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Draw(XCSJ.PluginCommonUtils.ITreeNodeGraph[],System.Func{XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Single,System.Boolean},System.Func{System.String,XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Int32,System.String},System.Action{XCSJ.PluginCommonUtils.ITreeNodeGraph,UnityEngine.GUIContent},System.Single,System.Single)">
            <summary>
            绘制
            </summary>
            <param name="treeNodeGraphs"></param>
            <param name="drawExpandedFunc"></param>
            <param name="prefixFunc"></param>
            <param name="drawAction"></param>
            <param name="indent"></param>
            <param name="expandedWidth"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Draw(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Func{XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Single,System.Boolean},System.Func{System.String,XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Int32,System.String},System.Action{XCSJ.PluginCommonUtils.ITreeNodeGraph,UnityEngine.GUIContent},System.Single,System.Single)">
            <summary>
            绘制
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="drawExpandedFunc"></param>
            <param name="prefixFunc"></param>
            <param name="drawAction"></param>
            <param name="indent"></param>
            <param name="expandedWidth"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Draw(XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Action{XCSJ.PluginCommonUtils.ITreeNodeGraph,UnityEngine.GUIContent},System.Single,System.Single)">
            <summary>
            绘制
            </summary>
            <param name="treeNodeGraph"></param>
            <param name="drawAction"></param>
            <param name="indent"></param>
            <param name="expandedWidth"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TreeView.Draw(System.String,XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Int32,System.Func{XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Boolean,System.Single,System.Boolean},System.Func{System.String,XCSJ.PluginCommonUtils.ITreeNodeGraph,System.Int32,System.String},System.Action{XCSJ.PluginCommonUtils.ITreeNodeGraph,UnityEngine.GUIContent},System.Single,System.Single)">
            <summary>
            绘制
            </summary>
            <param name="parentIndexText"></param>
            <param name="treeNodeGraph"></param>
            <param name="index"></param>
            <param name="drawExpandedFunc"></param>
            <param name="prefixFunc"></param>
            <param name="drawAction"></param>
            <param name="indent"></param>
            <param name="expandedWidth"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.MathU">
            <summary>
            Math For Unity 简写为 MathU -- 取首字母
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.BezierInterp(UnityEngine.Vector3[],System.Single)">
            <summary>
            贝塞尔插值
            </summary>
            <param name="pts">函数BezierPathControlPointGenerator计算结果的控制点数组</param>
            <param name="t">期望获取插值的比例值，范围[0,1]</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.BezierInterp(UnityEngine.Vector3[],System.Double)">
            <summary>
            贝塞尔插值
            </summary>
            <param name="pts"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.BezierPathControlPointGenerator(UnityEngine.Vector3[])">
            <summary>
            贝塞尔路径控制点生成器
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.BezierPolygonPathControlPointGenerator(UnityEngine.Vector3[],System.Int32)">
            <summary>
            贝塞尔多边形路径控制点生成器
            </summary>
            <param name="path">原始路径点</param>
            <param name="tweenTime">补间倍数；多边形路径点数相对原始路径点的倍数；默认20倍；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.LinerInterp(UnityEngine.Vector3[],System.Single)">
            <summary>
            线性插值
            </summary>
            <param name="path"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.LinerInterp(UnityEngine.Vector3[],System.Double)">
            <summary>
            线性插值
            </summary>
            <param name="path"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.SumArray(System.Single[],System.Int32,System.Int32)">
            <summary>
            数组求和
            </summary>
            <param name="nums">数组</param>
            <param name="fromIndex">起始点</param>
            <param name="toIndex">终止点</param>
            <returns>合</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.PathLength(System.Collections.Generic.IEnumerable{UnityEngine.Vector3})">
            <summary>
            计算路径长度；路径坐标点的相邻距离差之和；
            </summary>
            <param name="path">待求长度的路径坐标点</param>
            <returns>路径长度</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.PathLength(UnityEngine.Vector3[])">
            <summary>
            计算路径长度；路径坐标点的相邻距离差之和；
            </summary>
            <param name="path">待求长度的路径坐标点</param>
            <returns>路径长度</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.Intersection(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            求两圆交点
            </summary>
            <param name="c1">圆心1</param>
            <param name="radius1">半径1</param>
            <param name="c2">圆心2</param>
            <param name="radius2">半径2</param>
            <param name="planeNormal">两圆所在平面法向量</param>
            <param name="p1">交点1</param>
            <param name="p2">交点2</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.Intersection(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            求圆与直线交点
            </summary>
            <param name="center">圆心</param>
            <param name="radius">半径</param>
            <param name="position">直线上的点</param>
            <param name="lineNormal">直线法向量</param>
            <param name="planeNormal">圆与直线所在平面法向量</param>
            <param name="p1">交点1</param>
            <param name="p2">交点2</param>
            <returns>是否相交</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.Clamp(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            限定位置在矩形内
            </summary>
            <param name="rect"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.PositionRect(UnityEngine.Rect,UnityEngine.Vector2,XCSJ.PluginCommonUtils.Margin)">
            <summary>
            计算size尺寸的矩形在rect矩形内拖拽时，size尺寸的矩形的位置在的有效矩形范围；计算时保留margin的边框；
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <param name="margin"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.PositionRect(UnityEngine.Rect,UnityEngine.Vector2)">
            <summary>
            计算size尺寸的矩形在rect矩形内拖拽时，size尺寸的矩形的位置在的有效矩形范围；
            </summary>
            <param name="rect"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.TopLeft(UnityEngine.Rect)">
            <summary>
            矩形左上角
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.GetRectBounds(UnityEngine.Rect,UnityEngine.Rect)">
            <summary>
            获取两个矩形的最小包围矩形
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.GetRectBounds(UnityEngine.Rect[])">
            <summary>
            矩形包含盒
            </summary>
            <param name="rects"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.ScaleSizeBy(UnityEngine.Rect,System.Single,UnityEngine.Vector2)">
            <summary>
            根据锚点，缩放矩形
            </summary>
            <param name="rect"></param>
            <param name="scale"></param>
            <param name="pivotPoint"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.TryGetDistanceOfIntersectionAndLineOrigin(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single@)">
            <summary>
            尝试获取线与面交点到线原点的距离
            </summary>
            <param name="lineOrigin"></param>
            <param name="lineDirection"></param>
            <param name="pointInPanel"></param>
            <param name="panelNormal"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.TryGetIntersectionOfLineAndPanel(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            尝试获取线与面的交点
            </summary>
            <param name="lineOrigin"></param>
            <param name="lineDirection"></param>
            <param name="pointInPanel"></param>
            <param name="panelNormal"></param>
            <param name="intersection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MathU.TryGetIntersectionOfRayAndPanel(UnityEngine.Ray,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@)">
            <summary>
            尝试获取射线与面的交点
            </summary>
            <param name="ray"></param>
            <param name="pointInPanel"></param>
            <param name="panelNormal"></param>
            <param name="intersection"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GizmosIconAttribute">
            <summary>
            Gizmos图标特性
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GizmosIconAttribute.#ctor(System.String,XCSJ.Attributes.ESkinRule,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="icon"></param>
            <param name="skinRule"></param>
            <param name="index"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IHostGameObject">
            <summary>
            宿主游戏对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IHostGameObject.hostGameObject">
            <summary>
            宿主游戏对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.MB">
            <summary>
            MonoBehaviour的简写类，是XDreamer中所有组件类的基类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.MB.hostGameObject">
            <summary>
            宿主游戏对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.EditInspectorScript">
            <summary>
            编辑检查器脚本
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.SelectTypeComponentsInScene">
            <summary>
            选择场景中所有类型组件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.SearchTypeComponentsInScene">
            <summary>
            搜索场景中所有类型组件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.MB.onEnable">
            <summary>
            当启动事件：组件启用时回调的事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.MB.onDisable">
            <summary>
            当禁用事件：组件禁用时回调的事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.CallOnEnable">
            <summary>
            调用启用事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.CallOnDisable">
            <summary>
            调用启用事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.OnEnable">
            <summary>
            启用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.OnDisable">
            <summary>
            禁用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.SwitchEnabled">
            <summary>
            切换可用的：将当前组件可用的状态进行切换；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.Reenabled">
            <summary>
            重新可用：先将当前组件设置为非启用，再设置为启用；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.ReenabledDelay(System.Single)">
            <summary>
            重新可用延时：先将当前组件设置为非启用，再设置为启用；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.MB.disabled">
            <summary>
            禁用的
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.MB.gameObjectInactive">
            <summary>
            游戏对象非激活
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.MB.gameObjectActive">
            <summary>
            游戏对象激活
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.SwitchGameObjectActive">
            <summary>
            切换游戏对象激活：将当前组件所在游戏对象的自身激活状态进行切换；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.GameObjectReactive">
            <summary>
            游戏对象重新激活：先将游戏对象设置为非激活，再设置为激活；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.GameObjectReactiveDelay(System.Single)">
            <summary>
            游戏对象重新激活延时：先将游戏对象设置为非激活，再延时设置为激活；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.MB._eventListener">
            <summary>
            Unity对象事件监听器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.MB.eventListener">
            <summary>
            Unity对象事件监听器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.AddModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            添加模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.RemoveModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            移除模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.MB.BroadcastModelEvent(XCSJ.ComponentModel.ModelEventArgs)">
            <summary>
            广播模型事件
            </summary>
            <param name="modelEventArgs">模型事件参数</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.SingleInstanceMB`1">
            <summary>
            单例MB:场景内至多有一个的MB，切场景时组件会被销毁
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance">
            <summary>
            实例对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.SingleInstanceMB`1.instance">
            <summary>
            单例
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.SingleInstanceMB`1.validInstance">
            <summary>
            是否是有效实例，即检查<see cref="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance"/>是否有效
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.SingleInstanceMB`1.hasInstance">
            <summary>
            是否存在实例，查找场景中是否存在有效的<see cref="!:T"/>类型对象
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.SingleInstanceMB`1.onInstanceChanged">
            <summary>
            实例变化回调事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.SetInstance(`0)">
            <summary>
            设置实例，如果实例对象<see cref="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance"/>有效，则返回；否则设置实例对象并回调实例变化事件<see cref="E:XCSJ.PluginCommonUtils.SingleInstanceMB`1.onInstanceChanged"/>
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.GetInstance">
            <summary>
            获取实例，如果实例对象<see cref="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance"/>有效，则返回此对象；否则调用<see cref="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.TryGetInstance"/>尝试获取实例,如果获取成功则返回该实例，获取失败则创建新的实例并返回；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.TryGetInstance">
            <summary>
            尝试获取实例，如果实例对象<see cref="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance"/>有效，则返回此对象；否则查找场景中所有<see cref="!:T"/>类型对象，将第一个对象设置为实例对象<see cref="F:XCSJ.PluginCommonUtils.SingleInstanceMB`1._instance"/>并返回，同时销毁其他查找到的对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.DefaultName">
            <summary>
            默认名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.Awake">
            <summary>
            唤醒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SingleInstanceMB`1.CheckInstance">
            <summary>
            检查实例
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GlobalMB`1">
            <summary>
            全局组件泛型类：用于创建不受场景切换而影响的组件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalMB`1.Awake">
            <summary>
            唤醒
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GlobalMB">
            <summary>
            全局组件：不随场景切换而失效的组件;用于协程处理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalMB._needInstance">
            <summary>
            需要实例化：可用于多线程态使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalMB.TryInstanceIfNeed">
            <summary>
            如果需要，尝试实例化，仅可在Unity主线程中调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalMB.StartCoroutine(XCSJ.PluginCommonUtils.DelayData)">
            <summary>
            启动协程：可在多线程环境下使用
            </summary>
            <param name="delayData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalMB.StopCoroutine(XCSJ.PluginCommonUtils.DelayData)">
            <summary>
            停止协程：可在多线程环境下使用
            </summary>
            <param name="delayData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalMB.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.SO">
            <summary>
            ScriptableObject的简写类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.SO.hostGameObject">
            <summary>
            宿主游戏对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.SO._eventListener">
            <summary>
            Unity对象事件监听器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.SO.eventListener">
            <summary>
            Unity对象事件监听器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SO.AddModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            添加模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SO.RemoveModelEventListener(System.Action{System.Object,XCSJ.ComponentModel.ModelEventArgs})">
            <summary>
            移除模型事件监听
            </summary>
            <param name="listenAction">监听动作</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.SO.BroadcastModelEvent(XCSJ.ComponentModel.ModelEventArgs)">
            <summary>
            广播模型事件
            </summary>
            <param name="modelEventArgs">模型事件参数</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.AssetFile`2">
            <summary>
            资产文件
            </summary>
            <typeparam name="TAssetFile"></typeparam>
            <typeparam name="TAsset"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.AssetFile`2.extension">
            <summary>
            文件扩展名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.AssetFile`2.asset">
            <summary>
            资产对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Init(`1)">
            <summary>
            初始化
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.OnSaveAsset">
            <summary>
            当保存资产时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.AddAsset(UnityEngine.Object)">
            <summary>
            添加资产
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Save(System.String)">
            <summary>
            保存
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.CloneAndSave``1(System.String,``0,System.Action{`0})">
            <summary>
            克隆并保存
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="asset"></param>
            <param name="beforeSave"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Create(`1)">
            <summary>
            创建资产文件对象
            </summary>
            <param name="asset"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Create(`1,System.String)">
            <summary>
            创建资产文件对象
            </summary>
            <param name="asset"></param>
            <param name="name">资产文件对象名称</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Save(System.String,`1,System.Action{`0})">
            <summary>
            保存
            </summary>
            <param name="filePath"></param>
            <param name="asset"></param>
            <param name="beforeSave"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.Load(System.String)">
            <summary>
            加载
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.LoadAsset(System.String)">
            <summary>
            加载
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.LoadAssetAndClone``1(System.String,System.Action{``0})">
            <summary>
            加载资产并克隆
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="beforeClone"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetFile`2.ExportComponent(XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection)">
            <summary>
            导出组件
            </summary>
            <param name="componentCollection"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.AssetHelper">
            <summary>
            资产助手
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.AssetHelper.DefaultExtension">
            <summary>
            默认扩展名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.AssetHelper.assetHandler">
            <summary>
            资产处理器
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler">
            <summary>
            资产处理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.LoadAssetAtPath``1(System.String)">
            <summary>
            加载资产在路径
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            添加对象到资产
            </summary>
            <param name="objectToAdd"></param>
            <param name="assetObject"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.DeleteAsset(System.String)">
            <summary>
            删除资产
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.CreateAsset(UnityEngine.Object,System.String)">
            <summary>
            创建资产
            </summary>
            <param name="asset"></param>
            <param name="path"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.SaveAssets">
            <summary>
            保存资产
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.IAssetHandler.Refresh">
            <summary>
            刷新
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.LoadAssetAtPath``1(System.String)">
            <summary>
            加载
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
            <summary>
            添加对象到资产
            </summary>
            <param name="objectToAdd"></param>
            <param name="assetObject"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.Save(System.String,UnityEngine.Object,System.Action)">
            <summary>
            保存
            </summary>
            <param name="filePath"></param>
            <param name="asset"></param>
            <param name="saveAssetAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.SaveAndRefreshAssets">
            <summary>
            保存和刷新资产
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.Delete(System.String,System.Func{System.Boolean})">
            <summary>
            删除
            </summary>
            <param name="filePath"></param>
            <param name="deleteFun"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.AssetHelper.CheckAssetFileExtension(System.String,System.String)">
            <summary>
            检查资产文件扩展名
            </summary>
            <param name="path"></param>
            <param name="fileExtension"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityObjectEventListener">
            <summary>
            Unity对象事件监听器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityObjectEventListener.unityObject">
            <summary>
            Unity对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectEventListener.#ctor(UnityEngine.Object)">
            <summary>
            构造
            </summary>
            <param name="unityObject">Unity对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectEventListener.CallModelAnyPropertyChangedEvent">
            <summary>
            调用模型任意属性已变更事件
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityObjectPropertyWillChangeEventArgs">
            <summary>
            Unity对象属性将变更事件参数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityObjectPropertyWillChangeEventArgs.unityObject">
            <summary>
            Unity对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectPropertyWillChangeEventArgs.#ctor(UnityEngine.Object)">
            <summary>
            构造函数
            </summary>
            <param name="unityObject">Unity对象</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityObjectPropertyChangedEventArgs">
            <summary>
            Unity对象属性已变更事件参数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityObjectPropertyChangedEventArgs.Any">
            <summary>
            任意：可表示Unity对象任意属性已变更事件
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityObjectPropertyChangedEventArgs.unityObject">
            <summary>
            Unity对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectPropertyChangedEventArgs.#ctor(UnityEngine.Object)">
            <summary>
            构造函数
            </summary>
            <param name="unityObject">Unity对象</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityObjectHelper">
            <summary>
            Unity对象组手类：内部实现请参考类Unity对象处理器<see cref="T:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandler"/>；所有方法均会回调相应事件，详细参考类Unity对象处理器事件<see cref="T:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent"/>；所有方法支持在Unity编辑器中执行撤销与重做；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced">
            <summary>
            已实例化事件：对象实例化后的回调--用于组件模型；会被；此时对象已经创建，但未调用初始化；参数1为原始对象，参数2为新实例化的对象；如参数1为null，表示参数2为新建对象；如参数1不为null，表示参数2为使用参数1克隆的新对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated">
            <summary>
            已创建事件：有对象被创建时回调--用于组件模型；此时对象已经创建并已调用初始化；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.Create``1(System.Action{``0})">
            <summary>
            创建脚本对象--用于组件模型；会回调事件(包括<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>)；同时在回调<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>之前会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">创建对象的泛型类型，会将新克隆的对象转为本泛型类型返回</typeparam>
            <param name="init">在<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>之间调用的初始化函数</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.Create``1(System.Type,System.Action{``0})">
            <summary>
            创建脚本对象--用于组件模型；会回调事件(包括<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>)；同时在回调<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>之前会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">创建对象的泛型类型，会将新克隆的对象转为本泛型类型返回</typeparam>
            <param name="type">创建对象的真实类型</param>
            <param name="init">在<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>之间调用的初始化函数</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.Instantiate``1(``0,System.Action{``0})">
            <summary>
            实例化对象,即克隆对象--用于组件模型；会回调事件(包括<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>)；同时在回调<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>之前会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillClone"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCloned"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">待克隆的对象的泛型类型</typeparam>
            <param name="original">待克隆的原始对象</param>
            <param name="init">在<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onInstanced"/>与<see cref="F:XCSJ.PluginCommonUtils.UnityObjectHelper.onCreated"/>之间调用的初始化函数</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.RegisterCreatedObjectUndo(UnityEngine.Object)">
            <summary>
            注册创建对象撤销
            </summary>
            <param name="objectToUndo"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.CreateGameObject(System.String)">
            <summary>
            创建游戏对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="name">游戏对象的名称：会调用重命名<see cref="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XRename(UnityEngine.Object,System.String)"/></param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.CreateGameObject(UnityEngine.PrimitiveType)">
            <summary>
            创建游戏对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="primitiveType">基础类型</param>
            <returns>已创建的游戏对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XAddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            添加组件；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject">添加组件的游戏对象</param>
            <param name="componentType">待创建组件类型</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XAddComponent``1(UnityEngine.GameObject)">
            <summary>
            添加组件；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">待创建组件泛型类型</typeparam>
            <param name="gameObject">添加组件的游戏对象</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XAddComponent(UnityEngine.Component,System.Type)">
            <summary>
            添加组件；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="component">为此参数组件所在游戏对象添加组件</param>
            <param name="componentType">待创建组件类型</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XAddComponent``1(UnityEngine.Component)">
            <summary>
            添加组件；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">待创建组件泛型类型</typeparam>
            <param name="component">为此参数组件所在游戏对象添加组件</param>
            <returns>已添加的组件对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XGetOrAddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            获取或添加组件；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject"></param>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XGetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            获取或添加组件；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XGetOrAddComponent(UnityEngine.Component,System.Type)">
            <summary>
            获取或添加组件；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="component"></param>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XGetOrAddComponent``1(UnityEngine.Component)">
            <summary>
            获取或添加组件；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.CreateScriptableObject(System.Type)">
            <summary>
            创建脚本对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="scriptableObjectType">待创建脚本对象类型</param>
            <returns>已创建的脚本对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.CreateScriptableObject``1">
            <summary>
            创建脚本对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillCreateObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCreatedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">待创建脚本对象泛型类型</typeparam>
            <returns>已创建的脚本对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XCloneObject``1(``0)">
            <summary>
            克隆对象；会回调创建对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillClone"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onCloned"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T">将要克隆对象的泛型类型</typeparam>
            <param name="obj">将要克隆的对象</param>
            <returns>返回新克隆的对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XDestoryObject(UnityEngine.Object)">
            <summary>
            销毁对象；会回调销毁对象事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillDestroyObject"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onDestroyedObject"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj">将要销毁的对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XRename(UnityEngine.Object,System.String)">
            <summary>
            重命名：如果新旧名称相同，不执行调用；会回调重命名事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillRename"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onRenamed"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj">将要重命名的对象</param>
            <param name="name">新名称</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetName(UnityEngine.Object,System.String)">
            <summary>
            设置名称：如果新旧名称相同，不执行调用；与<see cref="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XRename(UnityEngine.Object,System.String)"/>功能相同；会回调重命名事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillRename"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onRenamed"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetTransformParent(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            设置父级变换；会回调设置父级变换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="newParent">新父级</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetTransformParent(UnityEngine.Transform,UnityEngine.GameObject)">
            <summary>
            设置父级变换；会回调设置父级变换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">将要设置父级变换的变换对象</param>
            <param name="newParent">新父级游戏对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetParent(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            设置父级；会回调设置父级变换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject">将要设置父级变换的游戏对象</param>
            <param name="newParent">新父级游戏对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetParent(UnityEngine.GameObject,UnityEngine.Transform)">
            <summary>
            设置父级；会回调设置父级变换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillSetTransformParent"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onSettedTransformParent"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject">将要设置父级变换的游戏对象</param>
            <param name="newParent">新父级变换对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XModifyProperty(UnityEngine.Object,System.String,System.Action)">
            <summary>
            修改属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
            <param name="action">修改函数</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XModifyProperty(UnityEngine.Object,System.Action,System.String)">
            <summary>
            修改属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj">将要修改属性的对象</param>
            <param name="action">修改函数</param>
            <param name="name">将要修改的属性名称（或是用户对本次属性修改动作的自定义名称，此情况多用于多个属性的修改）</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XModifyProperty``1(UnityEngine.Object,``0@,``0,System.String)">
            <summary>
            修改属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">将要修改属性的对象</param>
            <param name="name">将要修改的属性名称</param>
            <param name="property">将要修改的属性</param>
            <param name="newValue">新的值</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetPosition(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            设置位置：修改变换的位置属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetPosition’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="position">位置</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetLocalPosition(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            设置本地位置：修改变换的本地位置属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetLocalPosition’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="localPosition">本地位置</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetRotation(UnityEngine.Transform,UnityEngine.Quaternion)">
            <summary>
            设置旋转：修改变换的旋转属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetRotation’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="rotation">旋转</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetRotation(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            设置旋转：修改变换的旋转属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetRotation’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="eulerAngles">欧拉角度；单位：度</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetLocalRotation(UnityEngine.Transform,UnityEngine.Quaternion)">
            <summary>
            设置旋转：修改变换的旋转属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetLocalRotation’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="localRotation">本地旋转</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetLocalRotation(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            设置旋转：修改变换的旋转属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetLocalRotation’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="eulerAngles">本地欧拉角度；单位：度</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetLocalScale(UnityEngine.Transform,UnityEngine.Vector3)">
            <summary>
            设置缩放：修改变换的本地缩放属性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetLocalScale’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
            <param name="localScale">本地缩放</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XResetPRS(UnityEngine.Transform)">
            <summary>
            重置PRS：P(位置)归0，R(旋转)归0，S(缩放-本地缩放)归1；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XResetPRS’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform">变换</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XResetLocalPRS(UnityEngine.Transform)">
            <summary>
            重置本地PRS：P(本地位置)归0，R(本地旋转)归0，S(缩放-本地缩放)归1；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XResetLocalPRS’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetOffsetMin(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形左下角偏移量：修改矩形变换的左下角偏移量属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetOffsetMin’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="offsetMin">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetOffsetMax(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形右上角偏移量：修改矩形变换的右上角偏移量属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetOffsetMax’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="offsetMax">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetPivot(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形变换支点：修改矩形变换的支点属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetPivot’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="pivot">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetSizeDelta(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形变换尺寸：修改矩形变换的尺寸属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetSizeDelta’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="sizeDelta">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetAnchorMin(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形变换最小锚点：修改矩形变换的最小锚点属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetAnchorMin’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="anchorMin">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetAnchorMax(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形变换最大锚点：修改矩形变换的最大锚点属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetAnchorMax’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="anchorMax">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetAnchoredPosition(UnityEngine.RectTransform,UnityEngine.Vector2)">
            <summary>
            设置矩形变换锚点位置：修改矩形变换的锚点位置属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetAnchoredPosition’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="anchoredPosition">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetAnchoredPosition3D(UnityEngine.RectTransform,UnityEngine.Vector3)">
            <summary>
            设置矩形锚点位置3D：修改矩形变换的锚点位置3D属性；会回调修改属性事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetAnchoredPosition3D’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="rectTransform">矩形变换</param>
            <param name="anchoredPosition3D">矩形尺寸</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetActive(UnityEngine.GameObject,System.Boolean)">
            <summary>
            设置游戏对象激活性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetActive’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject"></param>
            <param name="active"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetActive(UnityEngine.GameObject,XCSJ.Scripts.EBool)">
            <summary>
            设置游戏对象激活性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetActive’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="gameObject"></param>
            <param name="active"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetEnable(UnityEngine.Object,System.Boolean)">
            <summary>
            设置Unity对象的可用性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetEnable’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj"></param>
            <param name="enable"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetEnable(UnityEngine.Component,System.Boolean)">
            <summary>
            设置组件的可用性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetEnable’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="component"></param>
            <param name="enable"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetEnable(UnityEngine.Object,XCSJ.Scripts.EBool)">
            <summary>
            设置Unity对象的可用性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetEnable’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="obj"></param>
            <param name="enable"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityObjectHelper.XSetEnable(UnityEngine.Component,XCSJ.Scripts.EBool)">
            <summary>
            设置组件的可用性；会回调修改属性换事件(包括<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onWillModifyProperty"/>与<see cref="E:XCSJ.PluginCommonUtils.Base.Kernel.UnityObjectHandlerEvent.onModifiedProperty"/>)，其中回调事件的参数‘已修改的属性名称’为‘XSetEnable’；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="component"></param>
            <param name="enable"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.PropertyPathHelper">
            <summary>
            属性路径组手
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.PropertyPathHelper.ArraySize">
            <summary>
            数组大小
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.PropertyPathHelper.DotArraySize">
            <summary>
            点数组大小
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.IsArrayElement(System.String)">
            <summary>
            是数组元素
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.IsArrayElementNoCache(System.String)">
            <summary>
            是数组元素
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.IsArraySize(System.String)">
            <summary>
            是数组大小
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.IsArraySizeNoCache(System.String)">
            <summary>
            是数组大小
            </summary>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetLastArrayElementIndex(System.String,System.Int32@)">
            <summary>
            获取最后数组元素索引:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetLastArrayElementIndexAndArrayPropertyPath(System.String,System.Int32@,System.String@)">
            <summary>
            获取最后数组元素索引与数组属性路径:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <param name="arrayPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetLastArrayElementIndexAndArrayPropertyPathNoCache(System.String,System.Int32@,System.String@)">
            <summary>
            获取最后数组元素索引与数组属性路径:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <param name="arrayPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetFirstArrayElementIndex(System.String,System.Int32@)">
            <summary>
            获取第一个数组元素索引:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetFirstArrayElementIndexAndArrayPropertyPath(System.String,System.Int32@,System.String@)">
            <summary>
            获取第一个数组元素索引与数组属性路径:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <param name="arrayPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetFirstArrayElementIndexAndArrayPropertyPathNoCache(System.String,System.Int32@,System.String@)">
            <summary>
            获取第一个数组元素索引与数组属性路径:确保属性路径有指向数组元素；
            </summary>
            <param name="arrayElementPropertyPath"></param>
            <param name="index"></param>
            <param name="arrayPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetArrayElementIndexes(System.String,System.Int32[]@)">
            <summary>
            数组元素索引数组:确保属性路径有指向数组元素；
            </summary>
            <param name="propertyPath"></param>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetArrayElementIndexesNoCache(System.String,System.Int32[]@)">
            <summary>
            获取数组元素索引数组:确保属性路径有指向数组元素；
            </summary>
            <param name="propertyPath"></param>
            <param name="indexes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetIndex(System.String,System.Int32@)">
            <summary>
            获取索引：获取属性路径中第一个出现的数字；只能处理非负整数；
            </summary>
            <param name="propertyPath"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetIndexNoCache(System.String,System.Int32@)">
            <summary>
            获取索引：获取属性路径中第一个出现的数字；只能处理非负整数；
            </summary>
            <param name="propertyPath"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetPropertyName(System.String,System.String@)">
            <summary>
            尝试获取属性名，如果是数组元素或数组大小时会获取失败
            </summary>
            <param name="propertyPath"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryGetPropertyNameNoCache(System.String,System.String@)">
            <summary>
            尝试获取属性名，如果是数组元素或数组大小时会获取失败
            </summary>
            <param name="propertyPath"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryParentPropertyPath(System.String,System.String@)">
            <summary>
            尝试获取父级属性路径
            </summary>
            <param name="propertyPath"></param>
            <param name="parentPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryParentPropertyPathNoCache(System.String,System.String@)">
            <summary>
            尝试获取父级属性路径(无缓存)
            </summary>
            <param name="propertyPath"></param>
            <param name="parentPropertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.PropertyPathHelper.TryParentPropertyPaths(System.String,System.String[]@)">
            <summary>
            尝试获取父级属性路径列表:由父级到子级的顺序,包括传入的属性路径，传入参数在数组末尾；
            </summary>
            <param name="propertyPath"></param>
            <param name="parentPropertyPaths"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ECompareOperator">
            <summary>
            比较运算符
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.Contains">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareOperator.NotContains">
            <summary>
            不包含
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ECompareRule">
            <summary>
            比较规则
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareRule.String">
            <summary>
            字符串:字符串
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareRule.Long">
            <summary>
            整数:将字符串转为Long(长整型)进行比较
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ECompareRule.Double">
            <summary>
            浮点数:将字符串转为Double(双精度浮点数)进行比较
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.VariableCompareHelper">
            <summary>
            变量比较组手类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.VariableCompareVariable(System.String,XCSJ.PluginCommonUtils.ECompareOperator,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            变量比较变量
            </summary>
            <param name="leftVaiable"></param>
            <param name="compareOperator"></param>
            <param name="rightVaiable"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.VariableCompareVariable(XCSJ.PluginCommonUtils.ECompareOperator,System.String,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            变量比较变量
            </summary>
            <param name="compareOperator"></param>
            <param name="leftVaiable"></param>
            <param name="rightVaiable"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.VariableCompareValue(System.String,XCSJ.PluginCommonUtils.ECompareOperator,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            变量比较值
            </summary>
            <param name="leftVaiable"></param>
            <param name="compareOperator"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.VariableCompareValue(XCSJ.PluginCommonUtils.ECompareOperator,System.String,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            变量比较值
            </summary>
            <param name="compareOperator"></param>
            <param name="leftVaiable"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.ValueCompareVariable(System.String,XCSJ.PluginCommonUtils.ECompareOperator,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            值比较变量
            </summary>
            <param name="leftValue"></param>
            <param name="compareOperator"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.ValueCompareVariable(XCSJ.PluginCommonUtils.ECompareOperator,System.String,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            值比较变量
            </summary>
            <param name="compareOperator"></param>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.ValueCompareValue(System.Object,XCSJ.PluginCommonUtils.ECompareOperator,System.Object,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            值比较值
            </summary>
            <param name="leftValue"></param>
            <param name="compareOperator"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.ValueCompareValue(XCSJ.PluginCommonUtils.ECompareOperator,System.String,System.String,XCSJ.PluginCommonUtils.ECompareRule)">
            <summary>
            值比较值
            </summary>
            <param name="compareOperator"></param>
            <param name="leftValue"></param>
            <param name="rightValue"></param>
            <param name="compareRule"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VariableCompareHelper.ToAbbreviations(XCSJ.PluginCommonUtils.ECompareOperator)">
            <summary>
            转简写
            </summary>
            <param name="compareOperator"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XGUIStyle">
            <summary>
            GUI风格缓存类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyle.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyle.initAction">
            <summary>
            初始化函数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyle.frontSize">
            <summary>
            字体尺寸
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyle.normalBackgroundColor">
            <summary>
            普通背景颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyle.style">
            <summary>
            样式
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.Func{XCSJ.PluginCommonUtils.XGUIStyle,UnityEngine.GUIStyle},System.Func{UnityEngine.GUIStyle,System.Boolean})">
            <summary>
            构造
            </summary>
            <param name="newFunc"></param>
            <param name="validFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.String,System.Action{UnityEngine.GUIStyle},System.Func{UnityEngine.GUIStyle,System.Boolean})">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="initAction"></param>
            <param name="validFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.String,System.Action{UnityEngine.GUIStyle})">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="initAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.String,System.Int32,System.Action{UnityEngine.GUIStyle})">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="frontSize"></param>
            <param name="initAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.String,UnityEngine.Color,System.Action{UnityEngine.GUIStyle})">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="normalBackgroundColor"></param>
            <param name="initAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(System.String,UnityEngine.Color,System.Action{UnityEngine.GUIStyle},System.Func{UnityEngine.GUIStyle,System.Boolean})">
            <summary>
            构造
            </summary>
            <param name="name"></param>
            <param name="normalBackgroundColor"></param>
            <param name="initAction"></param>
            <param name="validFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(XCSJ.PluginCommonUtils.EGUIStyle,System.Action{UnityEngine.GUIStyle})">
            <summary>
            使用枚举获取GUI风格
            </summary>
            <param name="eGuiStyle"></param>
            <param name="initAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.#ctor(XCSJ.PluginCommonUtils.EGUIStyle,UnityEngine.Color,System.Action{UnityEngine.GUIStyle})">
            <summary>
            使用枚举获取GUI风格
            </summary>
            <param name="eGuiStyle"></param>
            <param name="normalBackgroundColor"></param>
            <param name="initAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.DefaultValidFuncWithNormalBackground(UnityEngine.GUIStyle)">
            <summary>
            默认验证函数，带普通背景有效检测；
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.GetStyle">
            <summary>
            获取样式
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyle.op_Implicit(XCSJ.PluginCommonUtils.XGUIStyle)~UnityEngine.GUIStyle">
            <summary>
            隐式转换为GUI样式
            </summary>
            <param name="style"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XGUIContent">
            <summary>
            GUI内容缓存类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIContent.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIContent.memberName">
            <summary>
            成员名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIContent.emptyTextWhenHasImage">
            <summary>
            标识当有图片时，是否清空文本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIContent.texture2D">
            <summary>
            2D纹理
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIContent.memberInfo">
            <summary>
            成员信息
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIContent.#ctor(System.Enum,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="e"></param>
            <param name="emptyTextWhenHasImage"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIContent.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="emptyTextWhenHasImage"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIContent.#ctor(System.Type,UnityEngine.Texture2D,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
            <param name="texture2D"></param>
            <param name="emptyTextWhenHasImage"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIContent.GetGUIContent_Type">
            <summary>
            通过类型获取GUI内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIContent.GetGUIContent_TypeMember">
            <summary>
            通过类型中成员获取GUI内容
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EGUIStyle">
            <summary>
            GUI风格
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Logo">
            <summary>
            Logo
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Head1">
            <summary>
            标题1
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Head2">
            <summary>
            标题2
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Head3">
            <summary>
            标题3
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal">
            <summary>
            正文13
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_14">
            <summary>
            正文14
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_16">
            <summary>
            正文16
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Center">
            <summary>
            正文居中
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Center_14">
            <summary>
            正文居中14
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Center_16">
            <summary>
            正文居中16
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Right">
            <summary>
            正文右对齐
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Right_14">
            <summary>
            正文右对齐14
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Normal_Right_16">
            <summary>
            正文右对齐16
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Selected">
            <summary>
            正文选中
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Selected_14">
            <summary>
            正文选中14
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Selected_16">
            <summary>
            正文选中16
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Label_Http">
            <summary>
            URL文本样式
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Separator">
            <summary>
            分割线
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Foldout_13">
            <summary>
            标题折叠
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Box">
            <summary>
            盒
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Box_Blue">
            <summary>
            蓝色盒
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Box_Solid">
            <summary>
            实体盒
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Button_NoneBackground">
            <summary>
            空背景按钮
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Button_NoneBackground_Hover">
            <summary>
            空背景移入效果按钮
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Button_Blue">
            <summary>
            蓝色实心按钮
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.Button_Border_Blue">
            <summary>
            蓝色边框按钮
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.SelectionBorder">
            <summary>
            选择边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.NavigationLeftBar">
            <summary>
            导航条左图标
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EGUIStyle.NavigationMiddleBar">
            <summary>
            导航图中图标
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XGUIStyleLib">
            <summary>
            XGUI样式库
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyleLib.Get(XCSJ.PluginCommonUtils.EGUIStyle)">
            <summary>
            获取GUI风格
            </summary>
            <param name="guiStyle"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyleLib.Get(System.String)">
            <summary>
            获取GUI风格
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyleLib.GetXDreamerStyleName(System.String)">
            <summary>
            获取XDreamer风格名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XGUIStyleLib.StylePrefix">
            <summary>
            XDreamer风格前缀
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XGUIStyleRegisterAttribute">
            <summary>
            修饰获取风格函数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XGUIStyleRegisterAttribute.name">
            <summary>
            注册名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XGUIStyleRegisterAttribute.#ctor(System.String)">
            <summary>
            名称
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.XR.XRQuestion">
            <summary>
            XR问题
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.XR.XRAnswer">
            <summary>
            XR答案
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.XR.ComponentInfoSetQuestion">
            <summary>
            组件信息集合问题
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.XR.ComponentInfoSetAnswer">
            <summary>
            组件信息集合答案
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.XR.ComponentInfoSetAnswer.componentInfoSet">
            <summary>
            组件信息集合
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.IAccess">
            <summary>
            权限接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.IAccess.hasAccess">
            <summary>
            是否有使用权限
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.IXRAccess">
            <summary>
            XR权限接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.IAccessObject">
            <summary>
            权限对象接口:被本接口修饰的实例对象均是需要进行权限检查的
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.ComponentVersion">
            <summary>
            组件版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.ComponentVersion.versionName">
            <summary>
            版本名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.ComponentVersion.componentNames">
            <summary>
            组件名称列表
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.ComponentVersion.displayComponentNames">
            <summary>
            显示组件名称列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.ComponentVersion.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.ComponentName">
            <summary>
            组件名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.ComponentName.name">
            <summary>
            组件名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.ComponentName.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SafetyCertificateHelper">
            <summary>
            安全证书组手
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateHelper.netRSAPublicKey">
            <summary>
            网络RSA公钥
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateHelper.accessRSAPublicKey">
            <summary>
            权限RSA公钥
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData">
            <summary>
            <p>安全证书数据；加密狗内存储的数据信息；</p>
            <p>CSC   : Client Safety Certificate                   客户端安全证书</p>
            <p>SCAD  : Safety Certificate Authentication Data      安全证书校验数据</p>
            <p>SCADF : Safety Certificate Authentication Data File 安全证书校验数据文件</p>
            <p>SCD   : Safety Certificate Data                     安全证书校验数据</p>>
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.ERuntimePlatform.OSXEditor">
            <summary>
            OSX编辑器或Linux编辑器：即可理解为非Windows编辑器
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.author">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.version">
            <summary>
            版本信息;
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.user">
            <summary>
            使用者信息;由服务器分配的用户唯一id；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.guid">
            <summary>
            本证书数据的唯一id
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.startTime">
            <summary>
            起始时间，制作时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.expirationTime">
            <summary>
            过期时间，到期时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.localOrNet">
            <summary>
            单机还是网络
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.runtimePlatform">
            <summary>
            加密狗可用的运行时平台
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.pcCountWhenNet">
            <summary>
            网络时允许的客户端数目
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.forbiddenComponents">
            <summary>
            禁用的组件列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.allowComponents">
            <summary>
            允许的组件列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.defaultHandleComponentUse">
            <summary>
            不在允许列表中的组件，是否允许使用；即是否允许用户做组件开发，可用于限制用户是否允许扩展化开发
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.defaultHandleCompoentUse">
            <summary>
            默认处理组件规则：已使用<see cref="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateData.defaultHandleComponentUse"/>替代；导出时忽略，用于兼容旧版部分单词拼写错误的问题
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SafetyCertificateAuthenticationData">
            <summary>
            安全证书认证数据 --- 内部数据用于存储在物理磁盘文件上数据格式
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SafetyCertificateAuthenticationData.a">
            <summary>
            客户端安全证书时，为启动 TCP安全客户端 连接使用RSA公钥;
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.XNetworkDefaultInfo">
            <summary>
            网络默认信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.XNetworkDefaultInfo.DefaultPort">
            <summary>
            默认端口
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.XNetworkDefaultInfo.DefaultXRPort">
            <summary>
            默认XR端口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SCDA_V2">
            <summary>
            返回的SafetyCertificateData信息,是服务器端启动认证服务使用的加密狗或Udpkg文件中的信息;
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SCDA_V3">
            <summary>
            返回的SafetyCertificateData信息,可能与V2相同，也可能时根据不同用户设定的信息，此时信息存储在数据库中；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SCDA_V4">
            <summary>
            返回的SafetyCertificateData信息,可能与V3相同，也可能时根据不同用户设定的信息，此时信息存储在数据库中；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SCDA_V5">
            <summary>
            返回的SafetyCertificateData信息,可能与V4相同，也可能时根据不同用户设定的信息，此时信息存储在数据库中；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCDA_V5.userSystemOnLine">
            <summary>
            表示用户系统是否启用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCDA_V5.userExpirationTime">
            <summary>
            用户系统中用户的过期时间
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCDQ_V6.GetSignatureText">
            <summary>
            获取签名文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCDQ_V6.GetSignatureText_V6">
            <summary>
            获取签名文本V6
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCDA_V6.GetSignatureText(XCSJ.PluginCommonUtils.Safety.SCDQ_V6)">
            <summary>
            获取签名文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCDA_V7.GetSignatureText(XCSJ.PluginCommonUtils.Safety.SCDQ_V7)">
            <summary>
            获取签名文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCDA_V7.GetMD5Text(XCSJ.PluginCommonUtils.Safety.SCDQ_V7)">
            <summary>
            获取MD5文本
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo">
            <summary>
            SCD 用于扩展的功能类;仅在认证服务启动用户系统时生效;本地与服务器之间通信使用的类;
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._hasAccess">
            <summary>
            有权限
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._scd">
            <summary>
            安全证书数据
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetSCD">
            <summary>
            获取SCD
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._signatureKey">
            <summary>
            签名键：签名对应的键
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._signatureTime">
            <summary>
            签名时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._signature">
            <summary>
            签名：用于对所有存储磁盘的认证数据做签名验证
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._md5">
            <summary>
            除签名信息外其他所有信息的MD5
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.hasWatermark">
            <summary>
            是否有水印；默认有水印；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo._authenticationRuntimePlatform">
            <summary>
            验证运行时平台
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.forbiddenComponents">
            <summary>
            禁用的组件列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.allowComponents">
            <summary>
            允许的组件列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.defaultHandleComponentUse">
            <summary>
            不在允许列表中的组件，是否允许使用；即是否允许用户做组件开发，可用于限制用户是否允许扩展化开发；默认不允许扩展；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.defaultHandleCompoentUse">
            <summary>
            默认处理组件规则：已使用<see cref="F:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.defaultHandleComponentUse"/>替代；导出时忽略，用于兼容旧版部分单词拼写错误的问题
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetMD5Text">
            <summary>
            获取MD5文本：返回最新版本的MD5文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetMD5Text_V7">
            <summary>
            获取MD5文本V7
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetSignatureText">
            <summary>
            获取签名文本：返回最新版本的签名文本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetSignatureText_V7">
            <summary>
            获取签名文本V7
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.GetSignatureText_V6">
            <summary>
            获取签名文本V6
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.Merge(XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo)">
            <summary>
            将其他对象的数据信息合并到当前对象中
            </summary>
            <param name="other">待合并的其他对象</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Safety.SCD_OtherInfo.Merge(System.Object)">
            <summary>
            将其他对象的数据信息合并到当前对象中
            </summary>
            <param name="other">待合并的其他对象</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform">
            <summary>
            验证运行时平台：在何种运行时平台环境中针对软件做身份验证
            </summary>   
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.Always">
            <summary>
            总是验证
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.EditInEditer">
            <summary>
            编辑器内编辑时
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.RuntimeInEditor">
            <summary>
            编辑器内运行时
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.EditInPlayer">
            <summary>
            播放器内编辑时：目前不会出现的特殊情况
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.RuntimeInPlayer">
            <summary>
            播放器内运行时
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.InEditor">
            <summary>
            编辑器内
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.InPlayer">
            <summary>
            播放器内
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.Edit">
            <summary>
            编辑时
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.Runtime">
            <summary>
            运行时
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Safety.EAuthenticationRuntimePlatform.EditInEditerAndInPlayer">
            <summary>
            编辑器内编辑时与播放器内
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomFunctionCollection">
            <summary>
            自定义函数集合
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2">
            <summary>
            枚举函数集合
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TEnumFunction"></typeparam>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2._enumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2._enumFunctionDictionary">
            <summary>
            枚举函数字典
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.enumFunctionDictionary">
            <summary>
            枚举函数字典
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.GetEnumFunction(`0)">
            <summary>
            获取函数
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.ListToDictionary(System.Boolean,System.Boolean)">
            <summary>
            列表到字典：将列表数据添加到<see cref="F:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2._enumFunctionDictionary"/>；无则添加、有则覆盖或不处理；会优先调用基类方法；
            </summary>
            <param name="clearDictionaryFirst">优先清空字典：是否在数据转移前，优先将字典数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：字典中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.DictionaryToList(System.Boolean,System.Boolean)">
            <summary>
            字典到列表：将<see cref="F:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2._enumFunctionDictionary"/>数据添加到列表；如列表数据清空时，则直接将字典数据全部添加到列表；如列表数据不清空时，无则添加、有则覆盖或不处理；不再调用基类方法；
            </summary>
            <param name="clearListFirst">优先清空列表：是否在数据转移前，优先将列表数据清空；</param>
            <param name="overrideIfExist">如存在则覆盖：列表中已存在同名且有效的对象时，是否使用新的对象覆盖；True为覆盖；False不处理；</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.EnsureFunctionExist(`0)">
            <summary>
            确保函数存在
            </summary>
            <param name="enumValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionCollection`2.EnumEquals(`0,`0)">
            <summary>
            枚举相等
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData">
            <summary>
            游戏对象脚本事件变量数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData.varName">
            <summary>
            变量名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData.component">
            <summary>
            组件
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData.scriptEvent">
            <summary>
            脚本事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData.ToString">
            <summary>
            转字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData.FromString(System.String)">
            <summary>
            从字符串转化
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomVarCollection">
            <summary>
            自定义变量集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomVarCollection.LegacyUpgrade(System.Collections.Generic.List{XCSJ.Scripts.CustomVariable})">
            <summary>
            旧版升级：执行完成后会将传入参数的列表清空；
            </summary>
            <param name="variableList"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.GlobalVarCollection">
            <summary>
            全局变量集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.GlobalVarCollection.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.GlobalVarCollection._varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.GlobalVarCollection.varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.GlobalVarCollection.EnsureSystemVariablesExist">
            <summary>
            确保系统变量存在
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.LocalVarCollection">
            <summary>
            本地变量集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.LocalVarCollection.varScope">
            <summary>
            变量作用域
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.LocalVarCollection._varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.LocalVarCollection.varDictionary">
            <summary>
            变量字典
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IEnumFunctionCollectionHost`1">
            <summary>
            函数处理
            </summary>
            <typeparam name="TEnum">枚举</typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.IEnumFunctionCollectionHost`1.ExecuteFunction(`0,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="enumValue"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IEnumFunctionCollectionHost`2">
            <summary>
            函数处理
            </summary>
            <typeparam name="TEnum">枚举</typeparam>
            <typeparam name="TEnumFunction">脚本集合</typeparam>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IScriptEvent">
            <summary>
            脚本事件接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.IScriptEvent.gameObject">
            <summary>
            脚本事件所在游戏对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IScriptEvent`2">
            <summary>
            脚本事件泛型接口
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TEnumFunction"></typeparam>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IMBScriptEvent">
            <summary>
            MB脚本事件接口
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.IMBScriptEvent`2">
            <summary>
             MB脚本事件泛型接口
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TEnumFunction"></typeparam>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.UnityObjectScriptParam`1">
            <summary>
            Unity对象脚本参数
            </summary>
            <typeparam name="TParamType"></typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.UnityObjectScriptParam`1.CanCacheParamObject">
            <summary>
            能缓存参数对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.EScriptID">
            <summary>
            脚本控制的枚举ID
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID._Begin">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ScriptBase">
            <summary>
            脚本基本操作
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.OutputScriptCount">
            <summary>
            输出脚本数量
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.OutputLastScriptReturnValue">
            <summary>
            输出上一句脚本的返回值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetScriptCount">
            <summary>
            获取脚本数量
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RunScripts">
            <summary>
            执行脚本语句
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RunOneScript">
            <summary>
            执行单条脚本语句
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StateSwitch">
            <summary>
            状态切换
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StateHandle">
            <summary>
            状态处理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ScriptOfBranchAndLoopStatement">
            <summary>
            脚本-分支与循环语句
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.If">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIf">
            <summary>
             判断语句中转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfInt">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIfInt">
            <summary>
             判断跳转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfFloat">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIfFloat">
            <summary>
             判断跳转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfString">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIfString">
            <summary>
             判断跳转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.If2">
            <summary>
             判断开始标记，同时携带判断信息；两个判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIf2">
            <summary>
             判断跳转开始标记，同时携带判断信息；两个判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfLastScriptRunReturnValue">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfValue">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIfValue">
            <summary>
             判断跳转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IfStateValue">
            <summary>
             判断开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ElseIfStateValue">
            <summary>
             判断跳转开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Else">
            <summary>
            判断语句中的else
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.EndIf">
            <summary>
            判断结束标记
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.WhileNumRange">
            <summary>
            数值范围循环开始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.WhileGameObjectChildren">
            <summary>
            遍历游戏对象成员开始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.While">
            <summary>
            循环开始标记，同时携带判断信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.EndWhile">
            <summary>
            循环结束标记
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Break">
            <summary>
            跳出循环
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Continue">
            <summary>
            继续循环
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Return">
            <summary>
            逻辑返回
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ReturnOne">
            <summary>
            逻辑返回1
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ScriptOfGlobalVarAndUserDefineFun">
            <summary>
            脚本-全局变量与自定义函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ReturnVarValue">
            <summary>
            返回变量值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.VarDefineAndAssignment">
            <summary>
            变量定义并赋值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.VarDefine">
            <summary>
            变量定义
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.VarAssignment">
            <summary>
            变量赋值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.VarRemove">
            <summary>
            变量删除
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetVarValue">
            <summary>
            获取变量值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.BeginUserDefineFun">
            <summary>
            自定义函数开始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.EndUserDefineFun">
            <summary>
            自定义函数结束
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RemoveUserDefineFun">
            <summary>
            删除自定义函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.CallUserDefineFun">
            <summary>
            调用自定义函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.OperUserDefineFun">
            <summary>
            操作自定义函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ModifyUserDefineFunScriptString">
            <summary>
            修改自定义函数脚本语句
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.UpdateUserDefineFunScriptString">
            <summary>
            更新自定义函数脚本语句
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ScriptOfLocalVarAndScriptEvent">
            <summary>
            脚本-局部变量与脚本事件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.LocalVarDefineAndAssignment">
            <summary>
            局部变量定义并赋值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.LocalVarDefine">
            <summary>
            局部变量定义
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.LocalVarRemove">
            <summary>
            局部变量删除
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetLocalVarValue">
            <summary>
            获取局部变量值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.SetLocalVarValue">
            <summary>
            设置局部变量值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.AddScriptEventComponent">
            <summary>
            添加脚本事件组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.DeleteScriptEventComponent">
            <summary>
            删除脚本事件组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.OperScriptEventComponent">
            <summary>
            操作脚本事件组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.CallScriptEventFunction">
            <summary>
            调用脚本事件函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.OperScriptEventFunction">
            <summary>
            操作脚本事件函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ModifyScriptEventFunction">
            <summary>
            修改脚本事件函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.UpdateScriptEventFunction">
            <summary>
            更新脚本事件函数脚本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.String">
            <summary>
            字符串-目录
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringCalculate">
            <summary>
            字符串计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringSplicing">
            <summary>
            字符串拼接
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringSplit">
            <summary>
            字符串拆分
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringLegnth">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringAtIndex">
            <summary>
            获取字符串中字符
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringContains">
            <summary>
            检测字符串包含字符串
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringStartsWith">
            <summary>
            检测字符串起始
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringEndsWith">
            <summary>
            检测字符串结尾
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringFirstOrLastIndexOf">
            <summary>
            查找字符串出现位置
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringPadLeftOrRight">
            <summary>
            填充字符串到指定长度
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringRemoveByIndex">
            <summary>
            字符串删除(通过索引)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringSubstringByIndex">
            <summary>
            获取子字符串
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringReplace">
            <summary>
            字符串替换
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringToLowerOrUpper">
            <summary>
            字符串大小写转换
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringTrim">
            <summary>
            字符串修剪
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringTrimByCharSet">
            <summary>
            字符串修剪(通过字符集)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.StringRemoveUTF8BOM">
            <summary>
            移除字符串中UTF-8的BOM信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.NumberBaseAlgorithm">
            <summary>
            数值基础算法-目录
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.NumberSelfAdd">
            <summary>
            数值自加
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.NumberCalculate">
            <summary>
            数值计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IntCalculate">
            <summary>
            整形计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.FloatCalculate">
            <summary>
            浮点计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RectCalculate">
            <summary>
            矩形计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Vector4Calculate">
            <summary>
            四维向量计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.BoundsCalculate">
            <summary>
            包围盒计算
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ColorCalculate">
            <summary>
            BoundsCalculate
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetCommonColor">
            <summary>
            获取通用颜色
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetColor">
            <summary>
            获取颜色
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RandomInt">
            <summary>
            随机数(整数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RandomFloat">
            <summary>
            随机数(浮点数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RandomVector2">
            <summary>
            随机数(二维向量)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RandomVector3">
            <summary>
            随机数(三维向量)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.RandomNum">
            <summary>
            随机数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note1">
            <summary>
            注释语句/
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note2">
            <summary>
            注释语句//
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note3">
            <summary>
            注释语句/*
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note4">
            <summary>
            注释语句-
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Note5">
            <summary>
            注释语句--
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Selection">
            <summary>
            选择集
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.ClearSelection">
            <summary>
            清除选择集
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.SetSelection">
            <summary>
            设置选择集
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.GetSelection">
            <summary>
            获取选择集
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.MathLib">
            <summary>
            数学库-目录
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.PI">
            <summary>
            圆周率
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.NaturalConstantsE">
            <summary>
            自然常数e
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Abs">
            <summary>
            绝对值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.AbsInt">
            <summary>
            绝对值(整数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.AbsFloat">
            <summary>
            绝对值(浮点数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Sin">
            <summary>
            正弦
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Asin">
            <summary>
            反正弦
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Cos">
            <summary>
            余弦
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Acos">
            <summary>
            反余弦
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Tan">
            <summary>
            正切
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Atan">
            <summary>
            反正切
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Atan2">
            <summary>
            反正切2
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Logarithm">
            <summary>
            对数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Lg">
            <summary>
            10为底的对数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Ln">
            <summary>
            e为底的对数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Pow">
            <summary>
            幂
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Exp">
            <summary>
            e为底的幂
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Sqrt">
            <summary>
            开平方
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Truncate">
            <summary>
            截整数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Round">
            <summary>
            四舍五入
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Max2">
            <summary>
            大值2
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Max2Int">
            <summary>
            大值2(整数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Min2">
            <summary>
            小值2
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.Min2Int">
            <summary>
            小值2(整数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.IEEERemainder">
            <summary>
            IEEE余数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.DivRem">
            <summary>
            商与余数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.MinInt_Ceiling">
            <summary>
            最小整数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.MaxInt_Floor">
            <summary>
            最大整数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.BigMul">
            <summary>
            相乘(整数)
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.FormulaLib">
            <summary>
            数学库-目录
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.PendulumPeriod">
            <summary>
            单摆周期
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.PendulumLength">
            <summary>
            单摆摆长
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.SpeedOfUniformlyAcceleratedRectilinearMotion">
            <summary>
            匀加速直线运动的速度
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.DisplacementOfUniformlyAcceleratedRectilinearMotion">
            <summary>
            匀加速直线运动的位移
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID.MaxCurrent">
            <summary>
            目前已经使用ID的最大值,保留不使用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EScriptID._End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomFunction">
            <summary>
            自定义函数
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomParamData">
            <summary>
            自定义参数数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.CustomParamData._paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.CustomParamData.paramIndex">
            <summary>
            参数索引
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.CustomParamData._unityObject">
            <summary>
            Unity对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.CustomParamData.paramObject">
            <summary>
            参数对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString">
            <summary>
            脚本字符串
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString._paramDatas">
            <summary>
            参数数据列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.TryGetParamData(XCSJ.Scripts.ScriptParam,XCSJ.Scripts.IParamData@)">
            <summary>
            尝试获取参数数据
            </summary>
            <param name="scriptParam"></param>
            <param name="paramData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.Get(XCSJ.Scripts.ScriptParam)">
            <summary>
            获取
            </summary>
            <param name="scriptParam"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.GetOrCreate(XCSJ.Scripts.ScriptParam)">
            <summary>
            获取或创建
            </summary>
            <param name="scriptParam"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.SetParamData(XCSJ.Scripts.ScriptParam,System.Action{XCSJ.PluginCommonUtils.CNScripts.CustomParamData},System.Boolean)">
            <summary>
            设置参数数据
            </summary>
            <param name="scriptParam"></param>
            <param name="action"></param>
            <param name="createIfNotExist"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.TrySetParamData(XCSJ.Scripts.ScriptParam,System.Action{XCSJ.PluginCommonUtils.CNScripts.CustomParamData},System.Boolean)">
            <summary>
            尝试设置参数数据
            </summary>
            <param name="scriptParam"></param>
            <param name="action"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.TryDelaySetParamData(XCSJ.Scripts.ScriptParam,System.Action{XCSJ.PluginCommonUtils.CNScripts.CustomParamData},System.Boolean)">
            <summary>
            尝试延时设置参数数据
            </summary>
            <param name="scriptParam"></param>
            <param name="action"></param>
            <param name="createIfNotExist"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.CustomScriptString.TrySetParamObject(XCSJ.Scripts.ScriptParam,System.Object)">
            <summary>
            尝试设置参数对象：会同时设置参数字符串类型为值类型；使用延时机制处理；
            </summary>
            <param name="scriptParam">脚本参数</param>
            <param name="paramObject">参数对象</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.EnumFunction">
            <summary>
            枚举函数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.EnumFunction.enumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.EnumFunction`1">
            <summary>
            枚举函数
            </summary>
            <typeparam name="TEnum">枚举类型</typeparam>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.EnumFunction`1.type">
            <summary>
            类型：具体的枚举类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.EnumFunction`1.enumValue">
            <summary>
            枚举值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunction`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.EnumFunction`1.UniqueName">
            <summary>
            获取唯一名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.CustomFunctionDictionary">
            <summary>
            自定义函数字典
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.EnumFunctionDictionary`2">
            <summary>
            枚举函数字典
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TEnumFunction"></typeparam>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3">
            <summary>
            基础脚本事件
            </summary>
            <typeparam name="TEnum">枚举</typeparam>
            <typeparam name="TEnumFunction">枚举函数</typeparam>
            <typeparam name="TEnumFunctionCollection">枚举函数集合</typeparam>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.variableList">
            <summary>
            局部变量列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.functionList">
            <summary>
            事件列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.OnBeforeSerialize">
            <summary>
            当序列化之前回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.OnAfterDeserialize">
            <summary>
            当反序列化之后回调
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3._varCollection">
            <summary>
            局部变量集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.GetHostContext">
            <summary>
            获取脚本上下文信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3._funcCollection">
            <summary>
            脚本事件函数集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.XCSJ#Scripts#IFuncCollectionHost#funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteFunction(XCSJ.Scripts.Function,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="function"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteFunction(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="functionName"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteFunction(`0,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="enumValue"></param>
            <param name="param"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteScriptEvent(`0,System.String)">
            <summary>
            执行脚本事件
            </summary>
            <param name="eventType">事件类型</param>
            <param name="param"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteScriptEvent(XCSJ.Scripts.Function,System.String)">
            <summary>
            执行脚本事件
            </summary>
            <param name="function"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.ExecuteScriptEvent(System.String,System.String)">
            <summary>
            执行脚本事件
            </summary>
            <param name="eventName"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.Awake">
            <summary>
            唤醒，会保证变量与脚本函数有效性；如子类重载本函数，必须调用对应基类函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.OnDestroy">
            <summary>
            销毁；空函数；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.OnEnable">
            <summary>
            当启用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.OnDisable">
            <summary>
            当禁用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.Start">
            <summary>
            启动；空函数；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.BaseScriptEvent`3.Reset">
            <summary>
            重置；会初始化脚本事件；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.ScriptEventAttribute">
            <summary>
            脚本事件特性;用于处理<see cref="T:XCSJ.PluginCommonUtils.CNScripts.IScriptEvent"/>
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.ScriptEventAttribute.category">
            <summary>
            脚本事件所属类别
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.ScriptEventAttribute.categoryEN">
            <summary>
            脚本事件所属类别英文
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.ScriptEventAttribute.categoryIcon">
            <summary>
            类别图标
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.ScriptEventAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="category">类别名称</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CNScripts.ScriptEnumAttribute">
            <summary>
            脚本枚举特性：用于描述一个枚举是用于脚本生成的；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CNScripts.ScriptEnumAttribute.ownerType">
            <summary>
            拥有者类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CNScripts.ScriptEnumAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="ownerType"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.Component">
            <summary>
            组件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.Delete(System.Boolean)">
            <summary>
            删除当前对象
            </summary>
            <returns>成功删除返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.Clone">
            <summary>
            克隆当前对象
            </summary>
            <returns>成功返回克隆后的对象；否则返回null</returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Component.componentCollection">
            <summary>
            组件集；组件所在组件集对象；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.GetComponent(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.GetComponent``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.GetComponents(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Component.GetComponents``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.Component`1">
            <summary>
            组件
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Component`1.parent">
            <summary>
            父级对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection">
            <summary>
            组件集
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection._components">
            <summary>
            组件列表
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.components">
            <summary>
            组件列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.EnsureComponentsValid">
            <summary>
            确保所有组件有效
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.Delete(System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="deleteObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnDelete(XCSJ.PluginCommonUtils.ComponentModel.IModel,System.Boolean)">
            <summary>
            当对象被删除时回调
            </summary>
            <param name="obj"></param>
            <param name="deleteObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetWillDeleteModels">
            <summary>
            获取删除当前对象时所有将要关联删除的模型对象；本函数返回值包含当前对象、组件列表中的组件对象；
            </summary>
            <returns></returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.onWillAddComponent">
            <summary>
            当将要添加组件时回调；此时组件还未加入组件集；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnWillAddComponent(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            当将要添加组件时回调；此时组件还未加入组件集；
            </summary>
            <param name="component"></param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.onAddComponent">
            <summary>
            当添加组件时回调；此时组件已加入组件集；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnAddComponent(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            当添加组件时回调；此时组件已加入组件集；
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CheckComponentType(System.Type)">
            <summary>
            检查组件类型；用于判断传入的类型是否是当前组件集可管理的有效组件类型；
            </summary>
            <param name="type">类型</param>
            <returns>传入的类型是当前组件集可管理的有效组件类型，返回True；否者返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CanAddComponent(System.Type)">
            <summary>
            判断当前组件集中能否添加指定类型的组件
            </summary>
            <param name="type">期望添加的组件类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CanAddComponent(System.Type,System.Collections.Generic.List{System.Type}@,System.Collections.Generic.List{System.Type}@,System.Action{System.String})">
            <summary>
            判断当前组件集中能否添加指定类型的组件
            </summary>
            <param name="type">期望添加的组件类型</param>
            <param name="missingTypes">添加组件时需同步添加的缺失类型；即检测组件类型上的RequireComponent特性修饰情况；</param>
            <param name="invalidTypes">缺失类型中的无效类型</param>
            <param name="onError">无法添加时回调，参数为无法添加的原因</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.AddComponentInternal(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            将组件对象添加到组件列表中
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.AddComponentInternalWithUniqueName(XCSJ.PluginCommonUtils.ComponentModel.Component,System.String)">
            <summary>
            将组件对象添加到组件列表中,同时保证组件名称的唯一性
            </summary>
            <param name="component"></param>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.AddComponentDirectInternal(System.Type)">
            <summary>
            直接添加指定类型的组件到组件列表中；不对传入类型做任何有效判断，直接创建然后添加；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.AddComponent(System.Type)">
            <summary>
            添加指定类型的组件；对传入类型做有效判断，并会添加缺失的组件；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.AddComponent``1">
            <summary>
            添加组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.onWillRemoveComponent">
            <summary>
            将要移除组件时回调；此时组件还未从组件集中移除；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnWillRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            将要移除组件时回调；此时组件还未从组件集中移除；
            </summary>
            <param name="component"></param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.onRemoveComponent">
            <summary>
            当移除组件时回调；此时组件已经移除
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            当移除组件时回调；此时组件已经移除
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CanRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponent)">
            <summary>
            检测组件集中是否可移除组件
            </summary>
            <param name="component">待移除的组件对象;如果component不在当前组件集中，返回False；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CanRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponent,XCSJ.PluginCommonUtils.ComponentModel.IComponent@,System.Action{System.String})">
            <summary>
            检测组件集中是否可移除组件;
            </summary>
            <param name="component">待移除的组件对象;如果component不在当前组件集中，返回False；</param>
            <param name="requireThisComponent">不可移除时，依赖待移除的组件对象的组件对象；即requireThisComponent依赖component，简单理解若想移除component必须先移除requireThisComponent；</param>
            <param name="onError">无法移除时回调，参数为无法移除的原因</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.RemoveComponentInternal(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            从组件列表中移除指定的组件对象
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.RemoveComponentAtInternal(System.Int32)">
            <summary>
            通过索引从组件列表中移除指定的组件对象
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.RemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.Component)">
            <summary>
            移除组件
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CloneFrom(XCSJ.PluginCommonUtils.ComponentModel.Model)">
            <summary>
            从来源对象克隆数据信息
            </summary>
            <param name="from">来源对象</param>
            <returns>成功克隆数据信息返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CloneComponentsFrom(XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection)">
            <summary>
            仅from克隆组件列表信息到当前对象；当前对象的原组件列表信息保留；
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetComponent(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetComponent``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetComponents(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetComponents``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CallbackEvent(System.String,System.Object[])">
            <summary>
            回调事件
            </summary>
            <param name="eventName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.GetUniqueName(XCSJ.PluginCommonUtils.ComponentModel.Model,System.String)">
            <summary>
            获取唯一名称
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.TypeName(System.Type,System.Boolean)">
            <summary>
            类型名称
            </summary>
            <param name="type"></param>
            <param name="fullName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnDrawGizmos">
            <summary>
            当绘制Gizmos时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.OnDrawGizmosSelected">
            <summary>
            当对象被选中,绘制Gizmos时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.onComponentInvalid">
            <summary>
            当组件无效时的回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.DataValidityAnalysis(System.Func{System.Int32,XCSJ.PluginCommonUtils.ComponentModel.Component,System.Boolean},System.Func{System.Int32,XCSJ.PluginCommonUtils.ComponentModel.Component,System.Boolean})">
            <summary>
            数据有效性分析
            </summary>
            <param name="onComponentInvalid"></param>
            <param name="onComponentDataInvalid"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.DataValidity">
            <summary>
            数据有效性；对当前对象的数据进行有效性判断；仅判断，不做其它处理；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.DataValidate">
            <summary>
            数据验证；对当前对象的数据进行验证，尝试使其数据有效性成立；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.ToFriendlyString">
            <summary>
            输出友好字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.SearchComponents(XCSJ.PluginCommonUtils.ESearchFlags,System.Type)">
            <summary>
            搜索组件；搜索当前组件集对象中管理的符合传入参数条件的所有组件对象；
            </summary>
            <param name="searchFlags">搜索标志；搜索时，需要组件对象满足本搜索标志；</param>
            <param name="type">类型；检测时，需要组件对象可转为本参数类型的对象；</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection.CheckComponent(XCSJ.PluginCommonUtils.ESearchFlags,System.Type)">
            <summary>
            检测当前组件集对象中管理的组件对象是否有满足传入参数条件的；有任意一个组件对象满足条件就会返回True；
            </summary>
            <param name="searchFlags">搜索标志；检测时，需要组件对象满足本搜索标志；本函数主要检测可用性；</param>
            <param name="type">类型；检测时，需要组件对象可转为本参数类型的对象；</param>
            <returns>有任意一个组件对象满足搜索条件，则返回True；没有组件对象或是全部都不满足搜索条件,则返回False；</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection`1">
            <summary>
            组件集泛型类
            </summary>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection`1.components">
            <summary>
            组件列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection`1.GetComponents">
            <summary>
            获取组件列表
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection`2">
            <summary>
            组件集泛型类
            </summary>
            <typeparam name="TParent"></typeparam>
            <typeparam name="TComponent"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection`2.parent">
            <summary>
            父级
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.CMHelper">
            <summary>
            组件模型辅助类；ComponentModel简写CM
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.UniqueNameFormat">
            <summary>
            唯一名称格式
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.HierarchyDelimiter">
            <summary>
            层级分隔符
            </summary> 
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.Prefix">
            <summary>
            前缀
            </summary> 
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.EnableString">
            <summary>
            启用字符串
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.Create``1(System.Type,System.Action{``0})">
            <summary>
            创建对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.Instantiate``1(``0,System.Action{``0})">
            <summary>
            实例化对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="original"></param>
            <param name="init"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.DefaultName(System.Type)">
            <summary>
            默认名称
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.FormatName(System.String)">
            <summary>
            格式化名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.GetUniqueNameOfComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.String)">
            <summary>
            获取组件的唯一名称
            </summary>
            <param name="collectCollection"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.GetUniqueNameOfComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,XCSJ.PluginCommonUtils.ComponentModel.IComponent,System.String)">
            <summary>
            获取组件的唯一名称
            </summary>
            <param name="collectCollection"></param>
            <param name="component"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.GetNamePath(XCSJ.PluginCommonUtils.ComponentModel.IModel)">
            <summary>
            获取名称路径
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.GetParentNamePath(System.String)">
            <summary>
            获取父级名称路径
            </summary>
            <param name="namePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.TryParseNamePath(System.String,System.String@,System.String@)">
            <summary>
            尝试分析名称路径
            </summary>
            <param name="namePath"></param>
            <param name="parentNamePath"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CanAddComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type)">
            <summary>
            检测组件集是否可添加指定类型的组件
            </summary>
            <param name="componentCollection">待检测的组件集</param>
            <param name="type">待添加的组件类型</param>
            <returns>可添加返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CanAddComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type,System.Collections.Generic.List{System.Type}@)">
            <summary>
            检测组件集是否可添加指定类型的组件
            </summary>
            <param name="componentCollection">待检测的组件集</param>
            <param name="type">待添加的组件类型</param>
            <param name="missingTypes">不可添加时，缺失的组件类型列表（即列表中指定类型的组件已经添加后，待添加的组件类型才可以添加）</param>
            <returns>可添加返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CanAddComponents(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type[])">
            <summary>
            检测组件集是否可添加指定类型的组件
            </summary>
            <param name="componentCollection"></param>
            <param name="types">其中有一个类型无法添加就会返回失败</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CheckDisallowMultipleComponentAttribute(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type)">
            <summary>
            检查DisallowMultipleComponent特性
            </summary>
            <param name="componentCollection"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.TryGetMissingTypesOfRequireComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type,System.Collections.Generic.List{System.Type}@,System.Boolean)">
            <summary>
            检查RequireComponent特性，获取所有必须的但又缺失的类型
            </summary>
            <param name="componentCollection"></param>
            <param name="type"></param>
            <param name="missingTypes"></param>
            <param name="checkInvalidTypesInMissingTypes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.TryGetMissingTypesOfRequireComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,System.Type,System.Collections.Generic.List{System.Type}@,System.Collections.Generic.List{System.Type}@,System.Boolean)">
            <summary>
            检查RequireComponent特性，获取所有必须的但又缺失的类型
            </summary>
            <param name="componentCollection"></param>
            <param name="type"></param>
            <param name="missingTypes"></param>
            <param name="invalidTypes"></param>
            <param name="checkInvalidTypesInMissingTypes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CanRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,XCSJ.PluginCommonUtils.ComponentModel.IComponent)">
            <summary>
            检测组件集中是否可移除组件
            </summary>
            <param name="componentCollection">待检测的组件集</param>
            <param name="component">待移除的组件对象</param>
            <returns>可移除组件返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CanRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection,XCSJ.PluginCommonUtils.ComponentModel.IComponent,XCSJ.PluginCommonUtils.ComponentModel.IComponent@)">
            <summary>
            检测组件集中是否可移除组件
            </summary>
            <param name="componentCollection">待检测的组件集</param>
            <param name="component">待移除的组件对象</param>
            <param name="requireThisComponent">不可移除时，依赖待移除的组件对象的组件对象</param>
            <returns>可移除组件返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.GetComponentTypes``1">
            <summary>
            获取所有组件类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CloneComponent(XCSJ.PluginCommonUtils.ComponentModel.Component,XCSJ.PluginCommonUtils.ComponentModel.ComponentCollection,System.Boolean)">
            <summary>
            克隆组件
            </summary>
            <param name="fromComponent">源组件</param>
            <param name="toComponentCollection">目标组件集</param>
            <param name="withData">是否携带数据</param>
            <returns>克隆后的组件</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.CMHelper.CheckComponent(XCSJ.PluginCommonUtils.ESearchFlags,System.Type,XCSJ.PluginCommonUtils.ComponentModel.IComponent)">
            <summary>
            检测组件对象是否满足搜索标志并且可转为type参数类型的对象
            </summary>
            <param name="searchFlags">搜索标志</param>
            <param name="type">类型</param>
            <param name="component">组件对象</param>
            <returns>如组件对象可转为type参数类型的对象，则返回True；否则返回False；</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute">
            <summary>
            组件菜单特性；用本特性修饰的组件类型，可在Inspector窗口的添加组件菜单中可见;
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute.itemName">
            <summary>
            项名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute.#ctor(System.String,System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="itemName">项名称；多层级使用/间隔</param>
            <param name="managerTypes"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute.Valid(System.Reflection.MemberInfo)">
            <summary>
            检查在成员信息上是否有当前特性修饰
            </summary>
            <param name="element">待检查的成员信息对象</param>
            <returns>如有当前特性修饰返回True；否则返回False；</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute.Valid(System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ComponentModel.ComponentMenuAttribute@)">
            <summary>
            检查在成员信息上是否有当前特性修饰
            </summary>
            <param name="element">待检查的成员信息对象</param>
            <param name="attribute">如有当前特性修饰传出对应的特性对象；否则返回null；</param>
            <returns>如有当前特性修饰返回True；否则返回False；</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IComponent">
            <summary>
            组件接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IComponent.componentCollection">
            <summary>
            组件集；组件所在组件集对象；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IGetComponent">
            <summary>
            获取组件接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IGetComponent.GetComponent(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IGetComponent.GetComponent``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IGetComponent.GetComponents(System.Type,System.Boolean)">
            <summary>
            获取组件
            </summary>
            <param name="type"></param>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IGetComponent.GetComponents``1(System.Boolean)">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeDisable"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection">
            <summary>
            组件集接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.components">
            <summary>
            组件列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.CheckComponentType(System.Type)">
            <summary>
            检查组件类型；用于判断传入的类型是否是当前组件集可管理的有效组件类型；
            </summary>
            <param name="type">类型</param>
            <returns>传入的类型是当前组件集可管理的有效组件类型，返回True；否者返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.CanAddComponent(System.Type,System.Collections.Generic.List{System.Type}@,System.Collections.Generic.List{System.Type}@,System.Action{System.String})">
            <summary>
            判断当前组件集中能否添加指定类型的组件
            </summary>
            <param name="type">期望添加的组件类型</param>
            <param name="missingTypes">添加组件时需同步添加的缺失类型；即检测组件类型上的RequireComponent特性修饰情况；</param>
            <param name="invalidTypes">缺失类型中的无效类型</param>
            <param name="onError">无法添加时回调，参数为无法添加的原因</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.AddComponent(System.Type)">
            <summary>
            添加组件
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.CanRemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponent,XCSJ.PluginCommonUtils.ComponentModel.IComponent@,System.Action{System.String})">
            <summary>
            判断当前组件集中能否移除指定的组件对象
            </summary>
            <param name="component"></param>
            <param name="requireThisComponent"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IComponentCollection.RemoveComponent(XCSJ.PluginCommonUtils.ComponentModel.IComponent)">
            <summary>
            移除组件
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IModel">
            <summary>
            模型接口；数据模型接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IModel.parent">
            <summary>
            父级模型对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.Clone``1">
            <summary>
            尝试将当前对象克隆，并尝试转换限定的模版类型；
            </summary>
            <typeparam name="T">模版类型</typeparam>
            <returns>成功返回克隆并转换后的对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.IsChildOf(XCSJ.PluginCommonUtils.ComponentModel.IModel)">
            <summary>
            判断当前对象是待检测对象的成员，即待检测对象是否是当前对象的父级对象（或父级的父级对象）；会递归检测；
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.OnDelete(XCSJ.PluginCommonUtils.ComponentModel.IModel,System.Boolean)">
            <summary>
            当对象被删除时回调
            </summary>
            <param name="obj">待删除的对象</param>
            <param name="deleteObject">是否删除底层对象</param>
            <returns>执行成功返回True；否则返回False；</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.DefaultDelete(System.Boolean)">
            <summary>
            默认删除
            </summary>
            <param name="deleteObject"></param>
            <returns>成功删除返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.OnCreated">
            <summary>
            当首次创建时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.OnStart">
            <summary>
            当重新创建是回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IModel.CallbackEvent(System.String,System.Object[])">
            <summary>
            尝试回调事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="args">事件参数</param>
            <returns>事件成功回调返回True；事件不存在，返回False</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IDataValidity">
            <summary>
            数据有效性接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IDataValidity.DataValidity">
            <summary>
            数据有效性:对当前对象的数据进行有效性判断；仅判断，不做其它处理；
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IDataAnalyse">
            <summary>
            数据分析接口声明
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IDataAnalyse.DataValidity(XCSJ.PluginCommonUtils.ComponentModel.IModel)">
            <summary>
            数据有效性:根据传入的父级对象,对当前对象的数据做有效性检测；仅判断，不做其它处理；
            </summary>
            <param name="parent">期望的父级对象</param>
            <returns>有效返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.IDataAnalyse.DataValidate">
            <summary>
            数据验证:对当前对象的数据进行验证，尝试使其数据有效性成立；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.IModelCollection">
            <summary>
            模型集合接口
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IModelCollection.entry">
            <summary>
            进入
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IModelCollection.any">
            <summary>
            任意
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IModelCollection.exit">
            <summary>
            退出
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.IModelCollection.children">
            <summary>
            成员
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.ModelCollectionExtension">
            <summary>
            模型集合扩展
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentModel.Model">
            <summary>
            模型类；数据模型抽象类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Model.currentTime">
            <summary>
            当前时间；基于场景加载的时间；要在Start之后才是有效值，如在OnEnable中获取可能是不准确的；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.Model._enable">
            <summary>
            可用性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Model.enable">
            <summary>
            可用性，标识当前对象是否可用
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onEnableChanged">
            <summary>
            当可用性已变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnEnableChanged">
            <summary>
            当可用性已变化后回调
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Model.hostGameObject">
            <summary>
            宿主游戏对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Model.hostComponent">
            <summary>
            宿主组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentModel.Model._parent">
            <summary>
            父级对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentModel.Model.parent">
            <summary>
            父级对象
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onParentChanged">
            <summary>
            当父级已变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnParentChanged(XCSJ.PluginCommonUtils.ComponentModel.Model)">
            <summary>
            当父级已变化后回调
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.IsChildOf(XCSJ.PluginCommonUtils.ComponentModel.IModel)">
            <summary>
            判断当前对象是待检测对象的成员，即待检测对象是否是当前对象的父级对象（或父级的父级对象）；会递归检测；
            </summary>
            <param name="obj">待检测对象</param>
            <returns>如待检测对象是当前对象的父级对象（或父级的父级对象），返回True；否则，返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.DefaultDelete(System.Boolean)">
            <summary>
            默认删除
            </summary>
            <returns>成功删除返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.Delete(System.Boolean)">
            <summary>
            删除当前对象
            </summary>
            <returns>成功删除返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnDelete(XCSJ.PluginCommonUtils.ComponentModel.IModel,System.Boolean)">
            <summary>
            当对象被删除时回调
            </summary>
            <param name="obj">待删除的对象</param>
            <param name="deleteObject">是否删除底层对象</param>
            <returns>执行成功返回True；否则返回False；</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.GetWillDeleteModels">
            <summary>
            获取删除当前对象时所有将要关联删除的模型对象；本函数返回值仅包含当前对象；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.Clone``1">
            <summary>
            尝试将当前对象克隆，并尝试转换限定的模版类型；
            </summary>
            <typeparam name="T">模版类型</typeparam>
            <returns>成功返回克隆并转换后的对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.Clone">
            <summary>
            克隆当前对象
            </summary>
            <returns>成功返回克隆后的对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.CloneFrom(XCSJ.PluginCommonUtils.ComponentModel.Model)">
            <summary>
            从来源对象克隆数据信息
            </summary>
            <param name="from">来源对象</param>
            <returns>成功克隆数据信息返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.CallbackEvent(System.String,System.Object[])">
            <summary>
            尝试回调事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="args">事件参数</param>
            <returns>事件成功回调返回True；事件不存在，返回False</returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onWillDelete">
            <summary>
            当将要删除时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onDeleted">
            <summary>
            当已被删除后回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onCreated">
            <summary>
            当首次创建时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnCreated">
            <summary>
            当首次创建时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onStart">
            <summary>
            当启动时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnStart">
            <summary>
            当启动时回调；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.Reset">
            <summary>
            当对象重置时被调用
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onNameWillChange">
            <summary>
            当名称将要变化时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.ComponentModel.Model.onNameChanged">
            <summary>
            当名称已变化后回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.GetUniqueName(System.String)">
            <summary>
            获取唯一名称
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.GetUniqueName(XCSJ.PluginCommonUtils.ComponentModel.Model,System.String)">
            <summary>
            获取唯一名称
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.SetUniqueName(System.String,System.Boolean)">
            <summary>
            设置唯一名称；保证父级中所有子级名称的唯一性；
            </summary>
            <param name="name"></param>
            <param name="ignoreWhenSame"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnDrawGizmos">
            <summary>
            当绘制Gizmos时回调：空方法；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.OnDrawGizmosSelected">
            <summary>
            当对象被选中,绘制Gizmos时回调：空方法；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.DataValidity">
            <summary>
            数据有效性；对当前对象的数据进行有效性判断；仅判断，不做其它处理；本方法总是返回True，需要子类根据需要进行重写；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.DataValidity(XCSJ.PluginCommonUtils.ComponentModel.IModel)">
            <summary>
            数据有效性；根据传入的父级对象,对当前对象的数据做有效性检测；仅判断，不做其它处理；
            </summary>
            <param name="parent">期望的父级对象</param>
            <returns>有效返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.DataValidate">
            <summary>
            数据验证；对当前对象的数据进行验证，尝试使其数据有效性成立；本方法是空方法，需要子类根据需要进行重写；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.ToFriendlyString">
            <summary>
            输出友好字符串：当前方法返回空字符串；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.LogException(XCSJ.PluginCommonUtils.ComponentModel.IModel,System.String,System.Exception)">
            <summary>
            输出异常日志
            </summary>
            <param name="obj"></param>
            <param name="method"></param>
            <param name="exception"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentModel.Model.LogException(System.String,System.Exception)">
            <summary>
            输出异常日志
            </summary>
            <param name="method"></param>
            <param name="exception"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteract">
            <summary>
            交互
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.AbstractInteract">
            <summary>
            抽象交互
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractCmds">
            <summary>
            交互命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.IInteractCmds.inCmdList">
            <summary>
            交互命令列表：交互对象可处理的所有命令
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractCmds.GetWorkInCmds(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            获取工作输入命令：交互对象根据交互数据确定的有效工作输入命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.IInteractCmds.outCmdList">
            <summary>
            输出命令列表：交互对象执行交互后可产生的所有结果命令
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractor">
            <summary>
            交互器：命令的发起者
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractor.CanInteract(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            能否交互
            </summary>
            <param name="interactData">交互数据</param>
            <returns>能否处理交互</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractor.TryInteract(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.EInteractResult@)">
            <summary>
            尝试交互
            </summary>
            <param name="interactData">交互数据</param>
            <param name="interactResult">交互结果</param>
            <returns>能处理交互</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractable">
            <summary>
            可交互对象：命令的承受者
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractable.CanInteractAsInteractable(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            作为可交互对象能否交互
            </summary>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractable.TryInteractAsInteractable(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.EInteractResult@)">
            <summary>
            作为可交互对象尝试交互
            </summary>
            <param name="interactData"></param>
            <param name="interactResult"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractObject">
            <summary>
            交互对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.IInteractObject.interactInputer">
            <summary>
            交互输入器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.IInteractObject.interactOutputer">
            <summary>
            交互输出器
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractInputer">
            <summary>
            交互输入器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.IInteractInputer.interactInputs">
            <summary>
            交互输入列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractInput">
            <summary>
            交互输入接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractInput.CanHandle(XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            能否交互
            </summary>
            <param name="owner"></param>
            <param name="sender"></param>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.IInteractInput.Handle(XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            处理交互
            </summary>
            <param name="interactor"></param>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractOutputer">
            <summary>
            交互输出器
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost">
            <summary>
            标签属性宿主
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost.tagProperty">
            <summary>
            标签属性
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.ITagKeyValue">
            <summary>
            标签键值
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.ITagKeyValue.key">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.ITagKeyValue.value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.ITagProperty">
            <summary>
            标签属性
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.ExistsTagValue(System.String[])">
            <summary>
            存在标签值
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.GetTagKeys">
            <summary>
            获取所有关键字
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.GetTagValues(System.String)">
            <summary>
            获取所有标签值：与key匹配的所有标签值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.GetTags">
            <summary>
            获取标签集
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.AddTagWithDistinct(System.String,System.String)">
            <summary>
            添加不重复标签
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.RemoveAllTag(System.String)">
            <summary>
            移除所有标签：移除所有与输入关键字相同的标签
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.ITagProperty.RemoveAllTag(System.String,System.String)">
            <summary>
            移除标签：移除所有与输入关键字和输入值相同的标签
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.EInteractState">
            <summary>
            交互状态:用于描述交互器执行过程状态
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.Entry">
            <summary>
            进入
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.Processing">
            <summary>
            处理中
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.Finished">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.Aborted">
            <summary>
            中止
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractState.Exit">
            <summary>
            退出
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.EInteractResult">
            <summary>
            交互结果:用于记录交互最终结果
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractResult.None">
            <summary>
            未进行过交互
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractResult.Wait">
            <summary>
            已进行交互，但未完成，结果未知
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractResult.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.EInteractResult.Fail">
            <summary>
            失败
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.InteractData">
            <summary>
             交互数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.interactor">
            <summary>
            交互器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.interactable">
            <summary>
            可交互对象列表中第一个可交互对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.interactables">
            <summary>
            可交互对象列表
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.finishedInteractables">
            <summary>
            已完成的可交互对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.interactState">
            <summary>
            交互状态：描述交互数据在交互器中的处理状态
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetInteractState(XCSJ.PluginCommonUtils.Interactions.EInteractState)">
            <summary>
            设置交互状态
            </summary>
            <param name="interactState"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.TryGetInteractStateTime(XCSJ.PluginCommonUtils.Interactions.EInteractState,System.Double@)">
            <summary>
            尝试获取交互状态时间
            </summary>
            <param name="interactState"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.InteractData.interactStateTime">
            <summary>
            交互状态时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.interactResult">
            <summary>
            交互结果：描述交互器处理结果；交互结果被设置为None时，自动将其设定为失败
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetInteractResult(XCSJ.PluginCommonUtils.Interactions.EInteractResult)">
            <summary>
            设置交互结果
            </summary>
            <param name="interactResult"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetInteractResultInternal(XCSJ.PluginCommonUtils.Interactions.EInteractResult)">
            <summary>
            设置交互结果
            </summary>
            <param name="interactResult"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.RegisterInteractResultCallback(System.Action{XCSJ.PluginCommonUtils.Interactions.EInteractResult,XCSJ.PluginCommonUtils.Interactions.InteractData})">
            <summary>
            注册交互结果回调
            </summary>
            <param name="onInteractResult"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.CallInteractResult(XCSJ.PluginCommonUtils.Interactions.EInteractResult,XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            调用交互结果事件，并移除
            </summary>
            <param name="interactResult"></param>
            <param name="interactData"></param>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.isInteractSuccessAndExit">
            <summary>
            交互成功且退出
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.isInteractFailAndExit">
            <summary>
            交互失败且退出
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.InteractData.MaxDepth">
            <summary>
            交互数据链最大深度：交互器执行交互时传递数据的最大深度，超过当前值则抛出异常，防止内存无限增长
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.root">
            <summary>
            根
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.parent">
            <summary>
            父级交互数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.depth">
            <summary>
            当前交互数据链深度
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.children">
            <summary>
            子级交互数据
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdOwner"></param>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdOwner"></param>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.cloneSource">
            <summary>
            克隆源对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.Clone">
            <summary>
            克隆数据:内部方法，只在当前空间内的交互器调用
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.CreateInstance">
            <summary>
            创建实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.CopyTo(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            复制
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.cmdOwner">
            <summary>
            命令发布者
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.cmdName">
            <summary>
            命令名称:交互对象中用户自定义的交互命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.cmd">
            <summary>
            命令：未交互时为交互对象的输入命令，交互后为交互对象的输出命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.inCmd">
            <summary>
            输入命令：将命令名称转换为交互对象中的输入命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.outCmd">
            <summary>
            输出命令：将命令名称转换为交互对象中的输出命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractData.cmdParam">
            <summary>
            命令参数：构建交互时附带的参数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetCmdName(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            设置命令名称
            </summary>
            <param name="cmdName"></param>
            <param name="cmdOwner"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetCmd(System.String)">
            <summary>
            设置命令
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.SetCmdParam(System.Object)">
            <summary>
            设置命令参数
            </summary>
            <param name="cmdParam"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData.TryInteract">
            <summary>
            尝试交互
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.InteractData`1">
            <summary>
            交互数据模版类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdOwner"></param>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.#ctor(XCSJ.PluginCommonUtils.Interactions.InteractObject,System.String,XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject,System.Object,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            构造函数
            </summary>
            <param name="cmdOwner"></param>
            <param name="cmdName"></param>
            <param name="parent"></param>
            <param name="interactor"></param>
            <param name="cmdParam"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.CreateInstance">
            <summary>
            创建实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.CopyTo(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            复制到
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractData`1.CopyTo(`0)">
            <summary>
            复制到
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.InteractHelper">
            <summary>
            交互助手
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.InteractInputerDefaultHandle(XCSJ.PluginCommonUtils.Interactions.IInteractInputer,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractData,System.Action{XCSJ.PluginCommonUtils.Interactions.InteractData})">
            <summary>
            交互输入器缺省处理
            </summary>
            <param name="interactInputer"></param>
            <param name="interactor"></param>
            <param name="sender"></param>
            <param name="interactData"></param>
            <param name="onInput"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.ExistsTagValue(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost,System.String[])">
            <summary>
            是否存在标签值:与输入标签字符串数组中的其中之一匹配
            </summary>
            <param name="tagPropertyHost"></param>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.GetTagKeys(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost)">
            <summary>
            获取所有标签关键字
            </summary>
            <param name="tagPropertyHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.GetTagValues(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost,System.String)">
            <summary>
            获取所有标签值：与key相同的所有标签
            </summary>
            <param name="tagPropertyHost"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.AddTagWithDistinct(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost,System.String,System.String)">
            <summary>
            添加不重复标签
            </summary>
            <param name="tagPropertyHost"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.RemoveAllTag(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost,System.String)">
            <summary>
            移除标签：移除所有与输入关键字相同的标签
            </summary>
            <param name="tagPropertyHost"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractHelper.RemoveAllTag(XCSJ.PluginCommonUtils.Interactions.ITagPropertyHost,System.String,System.String)">
            <summary>
            移除标签：移除所有与输入关键字和输入值相同的标签
            </summary>
            <param name="tagPropertyHost"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.InteractObject">
            <summary>
            交互对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.interactInputer">
            <summary>
            交互输入器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInputInteract(XCSJ.PluginCommonUtils.Interactions.InteractObject,XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            当输入交互
            </summary>
            <param name="sender"></param>
            <param name="interactData"></param>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.inCmdList">
            <summary>
            输入命令列表：交互对象可处理的所有命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.inCmdNameList">
            <summary>
            输入命令名称列表：交互对象可处理的所有用户定义的命令名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetWorkInCmds(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            获取工作输入命令：交互对象根据交互数据确定的有效工作输入命令
            </summary>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetInCmd(System.String)">
            <summary>
            获取输入命令：通过输入命令名称获取输入命令
            </summary>
            <param name="inCmdName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetInCmdName(System.String)">
            <summary>
            获取输入命令名称：通过输入命令获取输入命令名称
            </summary>
            <param name="inCmd"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetInCmdNames(System.String)">
            <summary>
            获取输入命令名称集：通过输入命令获取输入命令名称集（交互对象内的输入命令名称不允许重复、命令与命令名称为1：N关系）
            </summary>
            <param name="inCmd"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.interactOutputer">
            <summary>
            交互输出器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.outCmdList">
            <summary>
            输出命令列表：交互对象执行交互后可产生的所有结果命令
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.outCmdNameList">
            <summary>
            输出命令名称列表：交互对象执行交互后可产生的所有用户定义的结果命令名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetOutCmd(System.String)">
            <summary>
            获取输出命令：通过输出命令名称获取输出命令
            </summary>
            <param name="outCmdName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetOutCmdName(System.String)">
            <summary>
            获取输出命令名称：通过输出命令获取输出命令名称
            </summary>
            <param name="outCmd"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.GetOutCmdNames(System.String)">
            <summary>
            获取输出命令名称集：通过输出命令获取输出命令名称集（交互对象内的输出命令名称不允许重复、因此命令与命令名称为1：N关系）
            </summary>
            <param name="outCmd"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnEnable">
            <summary>
            启用：绑定输入事件
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnDisable">
            <summary>
            禁用：解除输入事件
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.inInteractUpdating">
            <summary>
            在交互更新中
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Interactions.InteractObject.wantExitInteractUpdate">
            <summary>
            期望退出交互更新
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnEntryInteractUpdater">
            <summary>
            当进入【交互更新器】
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnExitInteractUpdater">
            <summary>
            当退出【交互更新器】
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.UpdateInteract">
            <summary>
            更新交互
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CanInteract(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            能否交互
            </summary>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteractDelay(XCSJ.PluginCommonUtils.Interactions.InteractData,System.Single)">
            <summary>
            尝试延时交互
            </summary>
            <param name="interactData"></param>
            <param name="delayTime"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteract(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.EInteractResult@)">
            <summary>
            尝试交互
            </summary>
            <param name="interactData">交互数据</param>
            <param name="interactResult">交互结果</param>
            <returns>能否交互</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteract(XCSJ.PluginCommonUtils.Interactions.InteractData,System.Action{XCSJ.PluginCommonUtils.Interactions.EInteractResult,XCSJ.PluginCommonUtils.Interactions.InteractData})">
            <summary>
            尝试交互：传入完成或中止回调方法
            </summary>
            <param name="interactData">交互数据</param>
            <param name="onInteractResult">完成或中止回调方法</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteract(System.String,XCSJ.PluginCommonUtils.Interactions.EInteractResult@)">
            <summary>
            尝试交互
            </summary>
            <param name="cmdName"></param>
            <param name="outInteractResult"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteract(System.String,XCSJ.PluginCommonUtils.Interactions.EInteractResult@,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            尝试交互
            </summary>
            <param name="cmdName"></param>
            <param name="outInteractResult"></param>
            <param name="interactables"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CancelAllInteract">
            <summary>
            取消全部交互
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteract(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            当交互时
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.HandleSingleInteract(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            处理单一交互：会回调<see cref="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractSingle(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject)"/>方法，如果可进行有效交互则会继续回调<see cref="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractSingleFinished(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject)"/>方法； 
            </summary>
            <param name="interactData"></param>
            <param name="interactable"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractSingle(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            当单一交互时
            </summary>
            <param name="interactData">交互数据</param>
            <param name="interactable">可交互对象</param>
            <returns>返回True，表示当前交互对象（即交互器）与可交互对象根据交互数据的信息进行了有效的交互；</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractSingleFinished(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            当单一交互完成时：在当前交互对象（即交互器）与可交互对象根据交互数据的信息进行了有效的交互后，可交互对象也处理完对应交互后，本方法执行回调；
            </summary>
            <param name="interactData"></param>
            <param name="interactable"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CloneInteractData(XCSJ.PluginCommonUtils.Interactions.InteractData,System.Action{XCSJ.PluginCommonUtils.Interactions.InteractData})">
            <summary>
            克隆交互数据
            </summary>
            <param name="cloneSource"></param>
            <param name="onCloned"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnCloneInteractData(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            克隆交互数据回调
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.SetClonedData(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            设置已克隆数据
            </summary>
            <param name="clonedData"></param>
            <param name="cloneSource"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CreateInteractData(System.String,XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            为执行交互创建交互数据
            </summary>
            <param name="cmdName"></param>
            <param name="interactables"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.Entry(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            进入
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CallFinished(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            调用完成
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CallFinished(System.String,System.Func{System.String,XCSJ.PluginCommonUtils.Interactions.InteractData},XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            调用完成：使用输出命令构建交互数据，当没找到对应输出命令名称时，构建空输出命令名称的交互数据
            </summary>
            <param name="outCmd"></param>
            <param name="createInteractData"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CallAborted(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            调用中止
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CallAborted(System.String,System.Func{System.String,XCSJ.PluginCommonUtils.Interactions.InteractData},XCSJ.PluginCommonUtils.Interactions.InteractObject[])">
            <summary>
            调用中止：使用输出命令构建交互数据，当没找到对应输出命令名称时，构建空输出命令名称的交互数据
            </summary>
            <param name="outCmd"></param>
            <param name="createInteractData"></param>
            <param name="interactables"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.Exit(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            退出
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.Cannel">
            <summary>
            取消交互
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Interactions.InteractObject.onInteractEntry">
            <summary>
            交互进入
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Interactions.InteractObject.onInteractProcessing">
            <summary>
            交互处理中
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Interactions.InteractObject.onInteractFinished">
            <summary>
            交互完成事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Interactions.InteractObject.onInteractAborted">
            <summary>
            交互中止事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Interactions.InteractObject.onInteractExit">
            <summary>
            交互退出
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractEntry(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            交互进入回调
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractFinished(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            交互完成回调
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractAborted(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            交互中止回调
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.OnInteractExit(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            交互退出回调
            </summary>
            <param name="interactData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.CanInteractAsInteractable(XCSJ.PluginCommonUtils.Interactions.InteractData)">
            <summary>
            作为可交互对象能否交互
            </summary>
            <param name="interactData"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractObject.TryInteractAsInteractable(XCSJ.PluginCommonUtils.Interactions.InteractData,XCSJ.PluginCommonUtils.Interactions.EInteractResult@)">
            <summary>
            作为可交互对象能否尝试交互
            </summary>
            <param name="interactData"></param>
            <param name="interactResult"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.InteractUpdater">
            <summary>
            交互更新器：用于对交互器的等待处理数据进行处理（保证交互器在禁用后依然能处理未完成的交互动作）
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.updateInteractors">
            <summary>
            正在更新的交互器
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.willAddInteractors">
            <summary>
            将要添加到更新中的交互器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.Add(XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            添加交互器
            </summary>
            <param name="interactor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.Remove(XCSJ.PluginCommonUtils.Interactions.InteractObject)">
            <summary>
            移除交互器
            </summary>
            <param name="interactor"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Interactions.InteractUpdater.Update">
            <summary>
            更新交互
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.IInteractProvider">
            <summary>
            交互提供者
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Interactions.BaseInteractProvider">
            <summary>
            交互提供者：提供交互所需数据
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ManualAttribute">
            <summary>
            手册特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ManualAttribute.c">
            <summary>
            类别
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ManualAttribute.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ManualHelper">
            <summary>
            手册组手
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ManualHelper.ManualUrl">
            <summary>
            手册URL
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ManualHelper.ManualCategoryUrl">
            <summary>
            手册目录URL
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ManualHelper.CNScriptMark">
            <summary>
            中文脚本标记
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ManualHelper.DefaultManualClassType">
            <summary>
            默认手册类别类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ManualHelper.DefaultManualClass">
            <summary>
            默认手册类别
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.Valid(System.Type)">
            <summary>
            有效的
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.NeedLimit(System.Type,System.Boolean)">
            <summary>
            需要限定
            </summary>
            <param name="type"></param>
            <param name="limit"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.TypeToClass(System.Type)">
            <summary>
            类型转类别：非嵌套类返回全名称；嵌套类将全名称中+替换为-然后返回；主要因为在URL传送中+会被解析为空格,而-会被正常保留；
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualClassType(System.Type)">
            <summary>
            获取手册类别类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualClass(System.Object,System.Type@,System.Boolean)">
            <summary>
            获取手册类别
            </summary>
            <param name="obj"></param>
            <param name="classType"></param>
            <param name="limit">限定：针对类型在没有明确的手册特性指明类别时，限定其最终返回默认手册类别</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualClass(System.Object,System.Boolean)">
            <summary>
            获取手册类别
            </summary>
            <param name="obj"></param>
            <param name="limit">限定：针对类型在没有明确的手册特性指明类别时，限定其最终返回默认手册类别</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualOwnerClass(System.Object,System.Type@,System.Boolean)">
            <summary>
            获取手册目录类型
            </summary>
            <param name="obj"></param>
            <param name="ownerType"></param>
            <param name="limit">限定：针对类型在没有明确的拥有者特性指明拥有者类别时，限定其最终返回默认手册类别</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualOwnerClass(System.Object,System.Boolean)">
            <summary>
            获取手册拥有者类别
            </summary>
            <param name="obj"></param>
            <param name="limit">限定：针对类型在没有明确的拥有者特性指明拥有者类别时，限定其最终返回默认手册类别</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualUrl(System.String,System.String)">
            <summary>
            获取手册URL
            </summary>
            <param name="c"></param>
            <param name="ownerClass"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetManualUrl(System.Object)">
            <summary>
            获取手册URL
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManualHelper.GetCNScriptManualUrl(XCSJ.Scripts.Script)">
            <summary>
            获取中文脚本手册URL
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.OwnerAttribute">
            <summary>
            拥有者特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.OwnerAttribute.ownerType">
            <summary>
            拥有者类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.OwnerAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="ownerType"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ApiAttribute">
            <summary>
            API特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ApiAttribute.output">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ApiAttribute.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="output"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Runtime.XTime">
            <summary>
            XDreamer时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Runtime.XTime.realtimeStampOfSceneLoaded">
            <summary>
            场景加载的实时时间戳；最后一个场景加载的时间；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Runtime.XTime.realtimeSinceSceneLoaded">
            <summary>
            自从场景加载后的实时时间戳
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Runtime.XTime.realtime">
            <summary>
            实时时间
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Runtime.XTime.OutputRealtimeStamp(System.String)">
            <summary>
            输出实时时间戳
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Runtime.XTime.OutputRealtimeStampSinceSceneLoaded(System.String)">
            <summary>
            输出自从场景加载后的实时时间戳
            </summary>
            <param name="log"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Runtime.GameObjectEqualityComparer">
            <summary>
            Unity游戏对象 相等比较器类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Runtime.GameObjectEqualityComparer.Equals(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            相等比较
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Runtime.GameObjectEqualityComparer.GetHashCode(UnityEngine.GameObject)">
            <summary>
            获取Hash码
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Runtime.Selection">
            <summary>
            运行时 Unity游戏对象 选择集类
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CommonGL">
            <summary>
            通用GL
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonGL.commonMaterial">
            <summary>
            通用材质
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Draw(UnityEngine.Material,System.Int32,UnityEngine.Color,UnityEngine.Vector3[])">
            <summary>
            绘制
            </summary>
            <param name="material"></param>
            <param name="mode"></param>
            <param name="color"></param>
            <param name="points"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Triangles(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制三角形
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.TriangleStrip(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制三角带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Quads(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制方形
            </summary>
            <param name="p0"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Lines(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制线条
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStrip(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制线带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStrip(UnityEngine.Vector3[],UnityEngine.Color,System.Boolean,UnityEngine.Material)">
            <summary>
            绘制线带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="closed"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStrip(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Camera,UnityEngine.Material)">
            <summary>
            绘制线带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStrip(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Camera,System.Boolean,UnityEngine.Material)">
            <summary>
            绘制线带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="closed"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStrip(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,System.Boolean,UnityEngine.Material)">
            <summary>
            绘制线带
            </summary>
            <param name="points"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="closed"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Extend(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
            <summary>
            扩展
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="planeNormal"></param>
            <param name="width"></param>
            <param name="beginL"></param>
            <param name="beginR"></param>
            <param name="endL"></param>
            <param name="endR"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.ToLineStrip(UnityEngine.Vector3[],System.Boolean)">
            <summary>
            转为线带
            </summary>
            <param name="points"></param>
            <param name="closed"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LinesToTriangleStrip(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            线转为线带
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="planeNormal"></param>
            <param name="width"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStripToTriangleStrip(UnityEngine.Vector3[],UnityEngine.Vector3,System.Single,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            线带转为三角带
            </summary>
            <param name="points"></param>
            <param name="planeNormal"></param>
            <param name="width"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LineStripToTriangleStrip(UnityEngine.Vector3[],UnityEngine.Vector3,System.Single,System.Boolean,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            线带转为三角带
            </summary>
            <param name="points"></param>
            <param name="planeNormal"></param>
            <param name="width"></param>
            <param name="closed"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.LinesToQuads(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            线转方形
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="planeNormal"></param>
            <param name="width"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.BoundsToLineStrip(UnityEngine.Bounds,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            包围盒转为线带
            </summary>
            <param name="bounds"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Bounds(UnityEngine.Bounds,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制包围盒
            </summary>
            <param name="bounds"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Bounds(UnityEngine.Bounds,UnityEngine.Color,UnityEngine.Camera,UnityEngine.Material)">
            <summary>
            绘制包围盒
            </summary>
            <param name="bounds"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Bounds(UnityEngine.Bounds,UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,UnityEngine.Material)">
            <summary>
            绘制包围盒
            </summary>
            <param name="bounds"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Bounds(UnityEngine.GameObject,UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,UnityEngine.Material)">
            <summary>
            绘制包围盒
            </summary>
            <param name="gameObject"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Bounds(UnityEngine.Renderer,UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,UnityEngine.Material)">
            <summary>
            绘制包围盒
            </summary>
            <param name="renderer"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.CreateSphere(UnityEngine.Vector3,System.Single,System.Int32,System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3},System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            创建球体
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="outX0Y"></param>
            <param name="outY0Z"></param>
            <param name="outZ0X"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Sphere(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制球体
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Sphere(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,UnityEngine.Material)">
            <summary>
            绘制球体
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.CreateCircle(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Vector3,System.Collections.Generic.List{UnityEngine.Vector3})">
            <summary>
            创建圆形
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="planeNormal"></param>
            <param name="outPoints"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Circle(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Material)">
            <summary>
            绘制圆形
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="planeNormal"></param>
            <param name="color"></param>
            <param name="material"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonGL.Circle(UnityEngine.Vector3,System.Single,System.Int32,UnityEngine.Color,UnityEngine.Camera,System.Boolean,System.Single,UnityEngine.Material)">
            <summary>
            绘制圆形
            </summary>
            <param name="center"></param>
            <param name="r"></param>
            <param name="count"></param>
            <param name="color"></param>
            <param name="camera"></param>
            <param name="occlusion"></param>
            <param name="width"></param>
            <param name="material"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IntervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.IntervalTime._intervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IntervalTime.intervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.IntervalTime._waitedTime">
            <summary>
            已等待时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.IntervalTime.waitedTime">
            <summary>
            已等待时间
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IntervalTime.Timeout">
            <summary>
            已超时，即已到间隔时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IntervalTime.Timeout(System.Single)">
            <summary>
            已超时，即已到间隔时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.TimeSetting">
            <summary>
            时间设置
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TimeSetting._rule">
            <summary>
            规则
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.TimeSetting.rule">
            <summary>
            规则
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.TimeSetting.ERule">
            <summary>
            规则
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TimeSetting.ERule.Auto">
            <summary>
            自动：由系统自动调用或自动执行
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TimeSetting.ERule.Ask">
            <summary>
            询问：询问用户后再执行，即由用户手动调用或手动执行；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TimeSetting._intervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.TimeSetting.intervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TimeSetting._waitedTime">
            <summary>
            已等待时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.TimeSetting.waitedTime">
            <summary>
            已等待时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.TimeSetting.waitedTimeString">
            <summary>
            已等待时间字符串
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TimeSetting.NeedTry">
            <summary>
            需要尝试：即是否已等待时间超过间隔时间;每次调用本函数会更新以等待时间；多用于组件更新函数中轮询使用；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TimeSetting.SwitchRule">
            <summary>
            切换规则
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TimeSetting.ResetWaitedTime">
            <summary>
            重置已等待时间
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TimeSetting.AutoInvoke(System.Action)">
            <summary>
            自动调用：在规则为自动时，在调用本函数的间隔时间<see cref="P:XCSJ.PluginCommonUtils.TimeSetting.intervalTime"/>之后自动调用参数传入的动作；
            </summary>
            <param name="action">动作</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Menus.ESeparatorType">
            <summary>
            分隔符类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.TopUp">
            <summary>
            顶层上
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.TopDown">
            <summary>
            顶层下
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.SubUp">
            <summary>
            子层上
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.SubDown">
            <summary>
            子层下
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.Top">
            <summary>
            顶层
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.Sub">
            <summary>
            子层
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.ESeparatorType.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Menus.MenuItemInfo">
            <summary>
            菜单项信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.menuName">
            <summary>
            菜单名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.itemName">
            <summary>
            项名
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.validFun">
            <summary>
            验证函数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.validFunDelegate">
            <summary>
            验证函数委托
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.validFunDelegate1">
            <summary>
            带参数的验证函数委托
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.validFunHasParam">
            <summary>
            验证函数有参数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.fun">
            <summary>
            函数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.funDelegate">
            <summary>
            函数委托
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.funDelegate1">
            <summary>
            带参数的函数委托
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.funHasParam">
            <summary>
            函数有参数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.separatorType">
            <summary>
            分隔符类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.userData">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.overrideUserData">
            <summary>
            覆盖用户数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.realtimeUserData">
            <summary>
            实时用户数据
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="menuName"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetValid(System.Reflection.MethodInfo)">
            <summary>
            设置验证函数
            </summary>
            <param name="validFun"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetValid(System.Func{System.Boolean})">
            <summary>
            设置验证函数
            </summary>
            <param name="validFunDelegate"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetValid(System.Func{System.Object,System.Boolean})">
            <summary>
            设置验证函数
            </summary>
            <param name="validFunDelegate"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetMenuItemInfo(System.Action,System.Int32,XCSJ.PluginCommonUtils.Menus.ESeparatorType)">
            <summary>
            设置菜单项信息
            </summary>
            <param name="funDelegate"></param>
            <param name="index"></param>
            <param name="separatorType"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetMenuItemInfo(System.Action{System.Object},System.Int32,XCSJ.PluginCommonUtils.Menus.ESeparatorType,System.Object)">
            <summary>
            设置菜单项信息
            </summary>
            <param name="funDelegate1"></param>
            <param name="index"></param>
            <param name="separatorType"></param>
            <param name="userData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetMenuItemInfo(System.Reflection.MethodInfo,System.Int32,XCSJ.PluginCommonUtils.Menus.ESeparatorType,System.Object)">
            <summary>
            设置菜单项信息
            </summary>
            <param name="fun"></param>
            <param name="index"></param>
            <param name="separatorType"></param>
            <param name="userData"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.InvokeValidFun">
            <summary>
            调用验证函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.InvokeFun">
            <summary>
            调用函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuItemInfo.SetOverrideUserData(System.Object)">
            <summary>
            设置覆盖用户数据
            </summary>
            <param name="overrideUserData"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute">
            <summary>
            基础菜单特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.itemName">
            <summary>
            菜单名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.isValid">
            <summary>
            是验证函数
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.index">
            <summary>
            索引
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.userData">
            <summary>
            用户数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.separatorType">
            <summary>
            分隔符类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="itemName"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.GetMenuName">
            <summary>
            获取菜单名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.BaseMenuAttribute.DefaultMenuName``1">
            <summary>
            默认菜单名
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Menus.MenuAttribute">
            <summary>
            菜单特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Menus.MenuAttribute.menuName">
            <summary>
            菜单名
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuAttribute.#ctor(System.String,System.String)">
            <summary>
            构造
            </summary>
            <param name="menuName"></param>
            <param name="itemName"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Menus.MenuAttribute.GetMenuName">
            <summary>
            获取菜单名
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ResourceFileInfo">
            <summary>
            资源文件信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.resourceFile">
            <summary>
            资源文件:资源文件的对象（即 bytes扩展名文件）；可以被打包到*.unity3d文件中;当 资源文件 与 路径名 均有效时，优先使用本对象；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.pathName">
            <summary>
            路径名:资源名或资源文件路径信息；会根据具体的名称类型做不同的后续处理；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.pathNameType">
            <summary>
            路径名类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.overrideFile">
            <summary>
            覆盖文件:对于特定目标平台(例如Android、iOS)，资源文件会被被编译打包，在使用时需要将资源文件拷贝到可读写目录下再进行后续使用；如果此时对应可读写目录中已经有同名文件时是否覆盖该文件,如果在该文件已经存入了自定义的数据，那么会造成数据丢失；如果不拷贝文件，本参数功能不生效；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.useUniqueName">
            <summary>
            使用唯一名称:标识将资源文件拷贝到可读写目录后是否使用唯一名称；不勾选时，使用 资源文件名称 或 路径名的文件名称，此时可能会与其他场景的拷贝后文件产生同名冲突！
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ResourceFileInfo.uniqueName">
            <summary>
            唯一名称:使用唯一名称可以防止多场景之间的资源文件在拷贝到可读写目录后，文件名冲突的问题； 可用于设置拷贝后文件夹的相对文件夹目录、文件名、文件扩展名；默认为无后缀格式的GUID名称，在可读写目录下；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ResourceFileInfo.GetResourcePath">
            <summary>
            获取资源路径，返回的路径为可读写路径；在特定平台上会将文件由只读的流资产路径拷贝到可持久化路径中；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ResourceFileInfo.GetResourceName">
            <summary>
            获取资源名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ResourceFileInfo.GetOriginalResourceName">
            <summary>
            获取原始资源名
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EPathNameType">
            <summary>
            路径名称类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.Smart">
            <summary>
            智能:会依次切换名称类型检测;直到找到存在的合理资源或名称类型查找完成；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.Absolute">
            <summary>
            绝对路径:直接使用该路径做后续处理;
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.StreamingAssets">
            <summary>
            StreamingAssets相对路径:目标平台Android/iOS时，资源必须存放在Assets/StreamingAssets目录下，使用时会拷贝到可读写目录(Application.persistentDataPath)下；其他目标平台直接返回相对 Application.streamingAssetsPath 目录的全路径信息；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.Assets">
            <summary>
            Assets相对路径:目标平台Android/iOS时，资源必须存放在 Assets/StreamingAssets (Assets/Plugins/Android/assets或Assets/Plugins/iOS/assets 目录极不推荐) 目录下，使用时会拷贝到可读写目录(Application.persistentDataPath)下；其他目标平台直接返回相对 Application.dataPath 目录的全路径信息；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.PersistentData">
            <summary>
            persistentDataPath相对路径:返回相对Unity持久化目录的全路径信息（即相对 Application.persistentDataPath 目录的全路径信息）；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EPathNameType.Exe">
            <summary>
            EXE相对路径:仅Window平台可用；在发布EXE后，是该EXE执行程序所在目录的相对路径;在Unity的WindowEditor(编辑器)时是Assets目录的相对路径;
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ColorHelper">
            <summary>
            颜色助手类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ColorHelper.ToColor(XCSJ.Maths.EColor)">
            <summary>
            颜色枚举转颜色
            </summary>
            <param name="color">颜色枚举</param>
            <returns>颜色</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ColorHelper.ToColor(System.UInt32)">
            <summary>
            RGBA数值转颜色
            </summary>
            <param name="color">RGBA数值</param>
            <returns>颜色</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ColorHelper.ToColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            RGBA转颜色
            </summary>
            <param name="r">红色</param>
            <param name="g">绿色</param>
            <param name="b">蓝色</param>
            <param name="a">透明通道</param>
            <returns>颜色</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ColorHelper.ToUint(UnityEngine.Color)">
            <summary>
            颜色转RGBA值
            </summary>
            <param name="color">颜色</param>
            <returns>RGBA值</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ColorHelper.ToRGBA(UnityEngine.Color)">
            <summary>
            颜色转RGBA对象
            </summary>
            <param name="color">颜色</param>
            <returns>RGBA对象</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Texture2DHelper">
            <summary>
            2D纹理助手类
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Texture2DHelper.EShape">
            <summary>
            形状枚举
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Texture2DHelper.EShape.Box">
            <summary>
            盒子，即方形
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.GetTexture2D(System.UInt32,System.Int32,System.Int32,XCSJ.PluginCommonUtils.Texture2DHelper.EShape)">
            <summary>
            从缓存中获取期望颜色的2D纹理对象
            </summary>
            <param name="rgba">期望颜色的RGBA值</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <param name="shape">纹理形状</param>
            <returns>成功创建返回2D纹理对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.GetTexture2D(XCSJ.Maths.EColor,System.Int32,System.Int32,XCSJ.PluginCommonUtils.Texture2DHelper.EShape)">
            <summary>
            从缓存中获取期望颜色的2D纹理对象
            </summary>
            <param name="color">期望颜色枚举</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <param name="shape">纹理形状</param>
            <returns>成功创建返回2D纹理对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.GetTexture2D(UnityEngine.Color,System.Int32,System.Int32,XCSJ.PluginCommonUtils.Texture2DHelper.EShape)">
            <summary>
            从缓存中获取期望颜色的2D纹理对象
            </summary>
            <param name="color">期望颜色</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <param name="shape">纹理形状</param>
            <returns>成功创建返回2D纹理对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.CreateTexture2D(UnityEngine.Color,System.Int32,System.Int32,XCSJ.PluginCommonUtils.Texture2DHelper.EShape)">
            <summary>
            创建纯色的2D纹理
            </summary>
            <param name="color">期望的颜色</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <param name="shape">纹理形状</param>
            <returns>成功创建返回2D纹理对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.CreateTexture2D(System.String,System.Int32,System.Int32)">
            <summary>
            通过64进制字符串创建2D纹理
            </summary>
            <param name="image64">图片文件的64进制编码字符串</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <returns>成功创建返回2D纹理对象；否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Texture2DHelper.CreateTexture2D(System.Byte[],System.Int32,System.Int32)">
            <summary>
            通过字节流创建2D纹理
            </summary>
            <param name="image">图片文件的二进制字节流</param>
            <param name="width">纹理的宽</param>
            <param name="height">纹理的高</param>
            <returns>成功创建返回2D纹理对象</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentManager">
            <summary>
            组件管理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.ContainsType(System.Type)">
             <summary>
            包含类型
             </summary>
             <param name="type"></param>
             <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetType(System.String)">
            <summary>
            获取类型
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetTypeForOldVersion(System.String)">
            <summary>
            旧版本获取类型
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetNames">
            <summary>
            获取显示名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetName(System.Int32)">
            <summary>
            获取名称
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetIndex(System.Type)">
            <summary>
            获取索引
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetIndex(System.String)">
            <summary>
            获取索引
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.TypeToKey(System.Type)">
            <summary>
            类型转键
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.TypeFullNameToKey(System.String)">
            <summary>
            类型全名称转键
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.ValidComponentType(System.Type)">
            <summary>
            有效组件类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.Init(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="subclassOfComponent">组价类型的子类类型</param>
            <param name="reinit">是否重新初始化</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.GetScriptEventNames">
            <summary>
            获取脚本事件名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.InteranalValidScriptEventType(System.Type)">
            <summary>
            有效脚本事件类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentManager.ValidScriptEventType(System.Type)">
            <summary>
            有效脚本事件类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EUnityAssetObjectType">
            <summary>
            Unity资源对象类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Object">
            <summary>
            基础对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.TextAsset">
            <summary>
            文本资源
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Material">
            <summary>
            材质
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Shader">
            <summary>
            着色器
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Texture">
            <summary>
            纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Texture2D">
            <summary>
            2D纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.WebCamTexture">
            <summary>
            网络相机纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.MovieTexture">
            <summary>
            影片纹理(已禁用):MovieTexture不允许使用，无法完成IL2CPP的编译！
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.ProceduralTexture">
            <summary>
            程序纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.RenderTexture">
            <summary>
            渲染纹理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.AudioClip">
            <summary>
            音频剪辑
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.AnimationClip">
            <summary>
            动画剪辑
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Flare">
            <summary>
            耀斑
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Sprite">
            <summary>
            精灵
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.GUISkin">
            <summary>
            界面皮肤
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.Font">
            <summary>
            字体
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EUnityAssetObjectType.ShaderVariantCollection">
            <summary>
            着色器变量集合
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityAssetObjectTypeAttribute">
            <summary>
            Unity资产对象类型特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityAssetObjectTypeAttribute.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectTypeAttribute.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityAssetObjectManager">
            <summary>
            Unity资产对象管理器：管理的资产均为Unity目前已经载入内存中的有效资产；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.typeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.objectNames">
            <summary>
            对象名称列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.GetObject``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.GetObject(System.String)">
            <summary>
            获取对象
            </summary>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.Add(UnityEngine.Object)">
            <summary>
            添加
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.Remove(UnityEngine.Object)">
            <summary>
            移除
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer.MarkDirty">
            <summary>
            标记为脏
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.UnityAssetObjectManager.buffers">
            <summary>
            缓存
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityAssetObjectManager.names">
            <summary>
            名称数组
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Init">
            <summary>
            初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.MarkDirty">
            <summary>
            标记为脏
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.AddBuffer(System.Type)">
            <summary>
            添加缓存
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.TryGetBuffer(System.String,XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer@)">
            <summary>
            尝试获取缓存
            </summary>
            <param name="typeName"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.TryGetBuffer(System.Type,XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer@)">
            <summary>
            尝试获取缓存
            </summary>
            <param name="type"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetAssetNames(System.Type)">
            <summary>
            获取缓存区中类型对应的所有资产名称；名称不可重复；
            </summary>
            <param name="type">资产类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Add(UnityEngine.Object)">
            <summary>
            将对象添加到缓存区
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.Remove(UnityEngine.Object)">
            <summary>
            移除
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.IndexOfType(System.String)">
            <summary>
            类型索引
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObjectTypeNames">
            <summary>
            获取Unity资产对象类型名称列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObjectType(System.String)">
            <summary>
            获取Unity资产对象类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObject``1(System.String)">
            <summary>
            获取指定类型与名称的对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObject(System.Type,System.String)">
            <summary>
            获取指定类型与名称的对象
            </summary>
            <param name="type"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObject(System.String,System.String)">
            <summary>
            获取Unity资产对象
            </summary>
            <param name="typeName"></param>
            <param name="objectName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObjectType(System.Type)">
            <summary>
            获取Unity资源对象类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.GetUnityAssetObjectType(XCSJ.PluginCommonUtils.EUnityAssetObjectType)">
            <summary>
            获取Unity资源对象类型
            </summary>
            <param name="unityAssetObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.UnityAssetObjectToString(UnityEngine.Object,System.String)">
            <summary>
            Unity资产对象转字符串
            </summary>
            <param name="obj"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.StringToUnityAssetObject(System.String,System.String)">
            <summary>
            字符串转Unity资产对象
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.ToString(System.String,System.String,System.String)">
            <summary>
            转字符串
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.TryPraseString(System.String,System.String@,System.String@,System.String)">
            <summary>
            尝试分析字符串
            </summary>
            <param name="str"></param>
            <param name="type"></param>
            <param name="name"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.AddBufferType``1(System.Func{XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer,System.String,UnityEngine.AssetBundle,System.Byte[],UnityEngine.Object})">
            <summary>
            添加缓存类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toObjectFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.AddBufferType(System.String,System.Type,System.Func{XCSJ.PluginCommonUtils.UnityAssetObjectManager.Buffer,System.String,UnityEngine.AssetBundle,System.Byte[],UnityEngine.Object})">
            <summary>
            添加缓存类型
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="toObjectFunc"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.LoadUnityAssetObject(XCSJ.PluginCommonUtils.Base.Kernel.IDataInfo,System.String,System.String,System.Action{UnityEngine.Object})">
            <summary>
            加载Unity资产对象
            </summary>
            <param name="dataInfo"></param>
            <param name="typeName"></param>
            <param name="name"></param>
            <param name="action"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAssetObjectManager.UnityAssetObjectTypeToDataType(XCSJ.PluginCommonUtils.EUnityAssetObjectType)">
            <summary>
            Unity资产对象类型转数据类型
            </summary>
            <param name="unityAssetObjectType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IUnityTask">
            <summary>
            Unity任务
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IUnityTask.AsyncRun(System.Object)">
            <summary>
            任务接口的执行函数
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IUnityTask.StartAsync">
            <summary>
            启动异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IUnityTask.StopAsync">
            <summary>
            停止异步
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IUnityTask.IsAsyncRunning">
            <summary>
            是否异步执行中
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityBaseTask">
            <summary>
            Unity基础任务
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityBaseTask.asyncMono">
            <summary>
            异步组件对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.UnityBaseTask.coroutine">
            <summary>
            协程对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.#ctor(UnityEngine.MonoBehaviour,System.Object)">
            <summary>
            构造
            </summary>
            <param name="asyncMono"></param>
            <param name="tag"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.StartAsync">
            <summary>
            启动异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.StartAsync(System.Collections.IEnumerator)">
            <summary>
            启动异步
            </summary>
            <param name="routine"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.StopAsync">
            <summary>
            停止异步
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.IsAsyncRunning">
            <summary>
            是否异步运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseTask.AsyncRun(System.Object)">
            <summary>
            Unity异步执行的函数
            执行调用的接口函数；子类覆盖本方法时，需调用本方法，以完成处理消息的回调、计数器的累加等；<br />
            如果本类的子类是作为进度表任务类的模版类传入，则在子类的AsyncRun方法中必须调用 base.AsyncRun() 方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1">
            <summary>
            Unity基础计划任务
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.#ctor(`0,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数，使用任务等参数初始化；
            </summary>
            <param name="task">任务类</param>
            <param name="runCount">循环执行的次数</param>
            <param name="runWaitTime">循环的等待时间;单位 ms 毫秒；</param>
            <param name="relativeRun">时间计算方法</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表；<br />
            </summary>
            <param name="param">参数列表；需要提供Task/RunCount/RunWaitTime/RelativeRun等参数信息</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.StartAsync">
            <summary>
            启动异步
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.StopAsync">
            <summary>
            停止异步
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.IsAsyncRunning">
            <summary>
            是否异步运行中
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.AsyncRun(System.Object)">
            <summary>
            Unity异步执行的函数;会先等待一段时间才执行具体任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityBaseScheduleTask`1.OnRun(XCSJ.Message.Msg)">
            <summary>
            当运行时
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityScheduleTask">
            <summary>
            Unity计划任务
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityScheduleTask.#ctor(XCSJ.PluginCommonUtils.UnityBaseTask,System.Int32,System.Int32,System.Boolean)">
            <summary>
            构造函数，使用任务等参数初始化；
            </summary>
            <param name="task">任务类</param>
            <param name="runCount">循环执行的次数</param>
            <param name="runWaitTime">循环的等待时间;单位 ms 毫秒；</param>
            <param name="relativeRun">时间计算方法</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityScheduleTask.#ctor(XCSJ.Algorithms.ParamList)">
            <summary>
            构造函数，使用参数列表；<br />
            </summary>
            <param name="param">参数列表；需要提供Task/RunCount/RunWaitTime/RelativeRun等参数信息</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UnityAsyncTaskManager">
            <summary>
            Unity异步任务管理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAsyncTaskManager.AddTask(XCSJ.PluginCommonUtils.UnityBaseTask,System.Object)">
            <summary>
            添加任务
            </summary>
            <param name="task"></param>
            <param name="asyncRunTag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAsyncTaskManager.AddUnityScheduleTask(XCSJ.PluginCommonUtils.UnityScheduleTask,System.Object)">
            <summary>
            添加Unity计划任务
            </summary>
            <param name="scheduleTask"></param>
            <param name="asyncRunTag"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UnityAsyncTaskManager.AddUnityScheduleTask``1(XCSJ.PluginCommonUtils.UnityBaseScheduleTask{``0},System.Object)">
            <summary>
            添加Unity计划任务
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scheduleTask"></param>
            <param name="asyncRunTag"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.StringPropertyAttribute">
            <summary>
            字符串属性特性
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.StringPropertyAttribute.width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.VarStringAttribute">
            <summary>
            变量字符串特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.VarStringAttribute.varStringHierarchyKeyMode">
            <summary>
            变量字符串层级键模式
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.VarStringAttribute.#ctor(XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode)">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode">
            <summary>
            变量字符串层级键模式
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode.Get">
            <summary>
            获取
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode.Set">
            <summary>
            设置
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EVarStringHierarchyKeyMode.Both">
            <summary>
            二者
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GlobalVariableAttribute">
            <summary>
            仅修饰String时有效;修饰可以下拉选择全局变量；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.DefaultEnumSuffix">
            <summary>
            默认枚举后缀
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.DefaultEnumSeparator">
            <summary>
            默认枚举分割符
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.memberName">
            <summary>
            成员名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.validityCheckType">
            <summary>
            有效检查类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.compareValue">
            <summary>
            比较值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.isVariableSelectWhenMemberNameEmpty">
            <summary>
            当成员名空时是变量选择
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GlobalVariableAttribute.isEnum">
            <summary>
            是枚举
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.enumMemberName">
            <summary>
            枚举成员名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.enumVariableName">
            <summary>
            枚举变量名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.enumVariableNameSuffix">
            <summary>
            枚举变量名后缀
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GlobalVariableAttribute.enumSeparator">
            <summary>
            枚举分隔符
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalVariableAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalVariableAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="enumVariableName"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GlobalVariableAttribute.#ctor(System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            构造
            </summary>
            <param name="memberName"></param>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.UserDefineFunAttribute">
            <summary>
            仅修饰String时有效;修饰可以下拉选择全局函数；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.UserDefineFunAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.InputAttribute">
            <summary>
            仅修饰String时有效;修饰可以下拉选择输入的名称；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.InputAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.LimitRangeAttribute">
            <summary>
            限定范围特性；仅修饰Vector2是有效
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LimitRangeAttribute.min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LimitRangeAttribute.max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LimitRangeAttribute.floatFieldWidth">
            <summary>
            浮点字段宽度
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LimitRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            构造
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.LimitRangeIntAttribute">
            <summary>
            限定范围整数特性；仅修饰Vector2Int是有效
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LimitRangeIntAttribute.min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LimitRangeIntAttribute.max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LimitRangeIntAttribute.floatFieldWidth">
            <summary>
            浮点字段宽度
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LimitRangeIntAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EditorModeExtension">
            <summary>
            编辑器模式扩展
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EditorModeExtension.ShouldWork(XCSJ.Attributes.EEditorMode)">
            <summary>
            是否需要工作
            </summary>
            <param name="editorMode"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EditorModeExtension.IsReadonly(XCSJ.Attributes.ReadonlyAttribute)">
            <summary>
            是否只读
            </summary>
            <param name="readonlyAttribute"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.PasswordTextAttribute">
            <summary>
            密码文本特性
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute">
            <summary>
            超级检查器中隐藏特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.memberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.otherMemberName">
            <summary>
            其他成员名称
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.#ctor(System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            构造
            </summary>
            <param name="memberName"></param>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.#ctor(System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object,System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            构造
            </summary>
            <param name="memberName"></param>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
            <param name="otherMemberName"></param>
            <param name="otherValidityCheckType"></param>
            <param name="otherCompareValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.Hide(System.Object)">
            <summary>
            隐藏
            </summary>
            <param name="obj">被修饰字段所在类型的实例对象</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute.Hide(System.Object,System.Reflection.FieldInfo)">
            <summary>
            隐藏
            </summary>
            <param name="obj"></param>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GroupAttribute">
            <summary>
            组特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.useUserDefineTextColor">
            <summary>
            使用用户定义的文本颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.textColor32">
            <summary>
            文本颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.textColor">
            <summary>
            文本颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.expandTextColor32">
            <summary>
            展开时文本颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.expandTextColor">
            <summary>
            展开时文本颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.useUserDefineBackgroundColor">
            <summary>
            使用用户定义的背景颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.backgroundColor32">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GroupAttribute.backgroundColor">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.defaultIsExpanded">
            <summary>
            标识默认是否展开
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.alwaysExpand">
            <summary>
            标识是否总是展开
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.text">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.textEN">
            <summary>
            英文文本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.tooltip">
            <summary>
            工具提示
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.tooltipEN">
            <summary>
            英文工具提示
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.textHasBox">
            <summary>
            文本有边框
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.fontStyle">
            <summary>
            字体样式
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.needIndent">
            <summary>
            标识是否需要缩进
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GroupAttribute.needBoundBox">
            <summary>
            标识是否需要边框
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GroupAttribute.#ctor(System.String)">
            <summary>
            构造
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GroupAttribute.#ctor(System.String,System.UInt32)">
            <summary>
            构造
            </summary>
            <param name="text"></param>
            <param name="textColor32"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GroupAttribute.#ctor(System.String,XCSJ.Maths.EColor)">
            <summary>
            构造
            </summary>
            <param name="text"></param>
            <param name="textColor"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EndGroupAttribute">
            <summary>
            用于强制结束一个分组
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EndGroupAttribute.belongPreviousGroup">
            <summary>
            标识当前被修饰的字段是否属于之前的组
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EndGroupAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EndGroupAttribute.#ctor(System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="belongPreviousGroup"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EValidityCheckType">
            <summary>
            有效性检查类型枚举
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.None">
            <summary>
            无：不做任何检测，即总认为是有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.True">
            <summary>
            真：为True、Unity对象有效时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.False">
            <summary>
            假：相对'真'的反义，即为False、Unity对象无效时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Default">
            <summary>
            默认:为默认值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotDefault">
            <summary>
            非默认:相对'默认'的反义，即为非默认值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Zero">
            <summary>
            0:为0时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotZero">
            <summary>
            非0:相对'0'的反义，即为非0值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Null">
            <summary>
            null:为null值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotNull">
            <summary>
            非null:相对'null'的反义，即为非null值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NullOrEmpty">
            <summary>
            null或空:为null或空值时有效性检查成立，用于检测空字符串、空数组、空链表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotNullOrEmpty">
            <summary>
            非null或空:相对'null或空'的反义，即非null且非空值时有效性检查成立，用于检测非空字符串、非空数组、非空链表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Less">
            <summary>
            小于:左值小于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.LessEqual">
            <summary>
            小于等于:左值小于等于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Equal">
            <summary>
            等于:左值等于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotEqual">
            <summary>
            不等于:相对'等于'的反义，即左值不等于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Greater">
            <summary>
            大于:左值大于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.GreaterEqual">
            <summary>
            大于等于:左值大于等于右值时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Edit">
            <summary>
            编辑态:编辑器处于编辑态时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Runtime">
            <summary>
            运行时:编辑器处于运行态时有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.ElementCountLess">
            <summary>
            元素数目小于：指定字符串、数组、链表中元素数目需小于比较值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.ElementCountGreater">
            <summary>
            元素数目大于：指定字符串、数组、链表中元素数目需大于比较值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.HasFlag">
            <summary>
            有标志:左值与右值进行与运算后，结果不为0时，有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.NotHasFlag">
            <summary>
            无标志:左值与右值进行与运算后，结果为0时，有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.Or">
            <summary>
            或：逻辑或运算，用于对2个有效性检查运算结果的做逻辑或处理，即2个有效性检查运算结果有任意1个成立，则认为有效性检查成立
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EValidityCheckType.And">
            <summary>
            与：逻辑与运算，用于对2个有效性检查运算结果的做逻辑与处理，即2个有效性检查运算结果均成立，才认为有效性检查成立
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ValidityCheckHelper">
            <summary>
            有效性检查助手类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.ObjectIsNull(System.Object)">
            <summary>
            判断对象是否为null
            </summary>
            <param name="objectValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.IsValid(System.Object,System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            判断成员的值是否有效
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.IsValid(System.Object,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            判断对象值是否有效
            </summary>
            <param name="objectValue"></param>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.IsValid(System.Object,System.String,System.Object)">
            <summary>
            判断成员的值是否有效;会获取成员的ValidityCheckAttribute特性实例；
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="memberValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.Valid(System.Object,System.String,System.Object,System.Action{XCSJ.PluginCommonUtils.ValidityCheckAttribute,System.Boolean})">
            <summary>
            成员的有效性检查
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="memberValue"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckHelper.ValidOnGUI(System.Object,System.String,System.Object,System.Action{XCSJ.PluginCommonUtils.ValidityCheckAttribute,System.Boolean})">
            <summary>
            用于绘制GUI时的成员的有效性检查
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="memberValue"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ValidityCheckAttribute">
            <summary>
            有效性检查特性
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ValidityCheckAttribute.invalidColor32">
            <summary>
            无效时颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.invalidColor">
            <summary>
            无效时颜色
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.invalidBackgroundColor">
            <summary>
            无效时背景颜色
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ValidityCheckAttribute.invalidExplanation">
            <summary>
            无效解释
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ValidityCheckAttribute.invalidExplanationEN">
            <summary>
            英文无效解释
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.validityCheckType">
            <summary>
            有效性检查类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.compareValue">
            <summary>
            比较值
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.memberName">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.memberValidityCheckType">
            <summary>
            成员有效性检查类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ValidityCheckAttribute.memberCompareValue">
            <summary>
            成员比较值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckAttribute.#ctor(XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            构造
            </summary>
            <param name="validityCheckType"></param>
            <param name="compareValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckAttribute.#ctor(System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            仅对指定的成员做检测
            </summary>
            <param name="memberName"></param>
            <param name="memberValidityCheckType"></param>
            <param name="memberCompareValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckAttribute.#ctor(XCSJ.PluginCommonUtils.EValidityCheckType,System.Object,System.String,XCSJ.PluginCommonUtils.EValidityCheckType,System.Object)">
            <summary>
            对当前字段 与 指定成员做检测(成员名称有效时)
            </summary>
            <param name="validityCheckType">需要在此处同时指明是进行何种与或运算;如果为缺省值(None)时，则仅检查指定成员(如果有效)</param>
            <param name="compareValue"></param>
            <param name="memberName">如果本值有效时，会与当前字段同时做检测</param>
            <param name="memberValidityCheckType"></param>
            <param name="memberCompareValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ValidityCheckAttribute.IsValid(System.Object,System.Object)">
            <summary>
            对象上的字段值是否有效
            </summary>
            <param name="obj"></param>
            <param name="fieldValue"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ComponentPopupAttribute">
            <summary>
            组件弹出特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentPopupAttribute.componentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentPopupAttribute.overrideLabel">
            <summary>
            覆盖标签
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentPopupAttribute.width">
            <summary>
            Poup框宽度；默认80
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentPopupAttribute.searchFlags">
            <summary>
            默认为<see cref="F:XCSJ.PluginCommonUtils.ESearchFlags.DefaultOptimize"/>
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ComponentPopupAttribute.includeInactive">
            <summary>
            标识是否包含非激活的；默认为True
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ComponentPopupAttribute.displayOnRuntime">
            <summary>
            标识运行时是否显示组件Popup；默认显示；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ComponentPopupAttribute.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="componentType">期望弹出式菜单选择的组件类型；如为null时，则默认会识别被修饰的字段类型；</param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GameObjectPopupAttribute">
            <summary>
            游戏对象弹出特性
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GameObjectPopupAttribute.componentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GameObjectPopupAttribute.width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GameObjectPopupAttribute.searchFlags">
            <summary>
            搜索标志
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.GameObjectPopupAttribute.includeInactive">
            <summary>
            包含非激活的
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.GameObjectPopupAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="componentType"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.TexturePreviewAttribute">
            <summary>
            纹理预览特性
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.TexturePreviewAttribute.height">
            <summary>
            高度
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.TexturePreviewAttribute.#ctor(System.Single)">
            <summary>
            构造
            </summary>
            <param name="height"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute">
            <summary>
            管理器类型限定特性基类：针对<see cref="T:XCSJ.PluginCommonUtils.XDreamer"/>产品功能所必需依赖的管理器特性；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.managerTypes">
            <summary>
            期望限定的管理器类型数组
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="managerTypes"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.Valid">
            <summary>
            检查当前激活场景中所有的期望限定的管理器类型都存在实体对象并且有使用权限
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.Valid(System.Type@)">
            <summary>
            检查当前激活场景中所有的期望限定的管理器类型都存在实体对象并且有使用权限
            </summary>
            <param name="noAccessManagerType">无权限的管理器类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.HasAccess(System.Reflection.MemberInfo)">
            <summary>
            判断成员信息是否是有权限使用的
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.HasAccess(System.Reflection.MemberInfo,System.Type@)">
            <summary>
            判断成员信息是否是有权限使用的
            </summary>
            <param name="memberInfo"></param>
            <param name="noAccessManagerType">无权限的管理器类型：如成员信息对象未添加必须管理器特性<see cref="T:XCSJ.PluginCommonUtils.RequireManagerAttribute"/>时，本对象会返回null</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.HasAccess(System.Reflection.MemberInfo,System.Type@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            判断成员信息是否是有权限使用的
            </summary>
            <param name="memberInfo"></param>
            <param name="noAccessManagerType">无权限的管理器类型：如成员信息对象未添加必须管理器特性<see cref="T:XCSJ.PluginCommonUtils.RequireManagerAttribute"/>时，本对象会返回null</param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.GetManagerTypeLimitAttributes(System.Reflection.MemberInfo)">
            <summary>
            获取成员信息上所有的管理器类型限定特性
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.GetManagerTypes(System.Reflection.MemberInfo)">
            <summary>
            获取成员信息上所有的管理器类型限定特性中约束的管理器类型
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ManagerTypeLimitAttribute.GetManagerTypesWithoutCache(System.Reflection.MemberInfo)">
            <summary>
            不使用缓存获取成员信息上所有的管理器类型限定特性中约束的管理器类型
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.RequireManagerAttribute">
            <summary>
            需求管理器特性：针对<see cref="T:XCSJ.PluginCommonUtils.XDreamer"/>产品功能所必需依赖的管理器特性；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.RequireManagerAttribute.#ctor(System.Type[])">
            <summary>
            构造函数
            </summary>
            <param name="managerTypes"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EnumPopupAttribute">
            <summary>
            枚举弹出菜单特性：仅修饰Enum时有效；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.EnumPopupAttribute.enumType">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumPopupAttribute.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumPopupAttribute.#ctor(System.Type)">
            <summary>
            构造
            </summary>
            <param name="enumType"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EnumStringsCache_ConsiderHideInSuperInspectorAttribute">
            <summary>
            考虑<see cref="T:XCSJ.PluginCommonUtils.HideInSuperInspectorAttribute"/>特性修饰枚举字段情况的枚举字符串数组缓存
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumStringsCache_ConsiderHideInSuperInspectorAttribute.CreateValue(System.Type,XCSJ.Helper.EEnumStringType)">
            <summary>
            构建值
            </summary>
            <param name="key1"></param>
            <param name="key2"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.EnumStringsCache_ConsiderHideInSuperInspectorAttribute.Get(System.Type,XCSJ.Helper.EEnumStringType)">
            <summary>
            获取枚举字符串数组
            </summary>
            <param name="enumType"></param>
            <param name="enumStringType"></param>
            <returns>结果数组不为null，即至少为非null的空数组</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ArrayAttribute">
            <summary>
            数组特性：针对数组（列表）字段类型时，对数组（列表）本身做特殊处理的特性；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ArrayElementAttribute">
            <summary>
            数组元素特性：针对数组（列表）字段类型时，对数组（列表）大小或元素项做特殊处理的特性；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.arrayElementHandleRule">
            <summary>
            数组元素处理规则
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.canInsert">
            <summary>
            能插入
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.canDelete">
            <summary>
            能删除
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.displaySize">
            <summary>
            显示大小
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.memeberChildIndent">
            <summary>
            成员子级缩进：如果数组元素是通用类型(即自定义序列化类、数组、列表)时，其成员是否绘制缩进
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ArrayElementAttribute.memeberChildBoundBox">
            <summary>
            成员子级包围盒：如果数组元素是通用类型(即自定义序列化类、数组、列表)时，其成员是否绘制包围盒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ArrayElementAttribute.#ctor(XCSJ.PluginCommonUtils.EArrayElementHandleRule)">
            <summary>
            构造
            </summary>
            <param name="arrayElementHandleRule"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EArrayElementHandleRule">
            <summary>
            数组元素处理规则
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.CanInsert">
            <summary>
            能插入：能增加数组大小，既允许增加新的数组元素
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.CanDelete">
            <summary>
            能删除：能减少数组大小，既允许减少数组中元素
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.DisplaySize">
            <summary>
            显示大小
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.MemeberChildIndent">
            <summary>
            成员子级缩进：如果数组元素是通用类型(即自定义序列化类、数组、列表)时，其成员是否绘制缩进
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EArrayElementHandleRule.MemeberChildBoundBox">
            <summary>
            成员子级包围盒：如果数组元素是通用类型(即自定义序列化类、数组、列表)时，其成员是否绘制包围盒
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IDynamicLabel">
            <summary>
            动态标签特性接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IDynamicLabel.GetDynamicLabel(System.String,System.Reflection.FieldInfo,UnityEngine.GUIContent)">
            <summary>
            获取动态标签
            </summary>
            <param name="propertyPath"></param>
            <param name="fieldInfo"></param>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.DynamicLabelAttribute">
            <summary>
            动态标签特性:支持与接口<see cref="T:XCSJ.PluginCommonUtils.IDynamicLabel"/>配合使用
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.GuidCreaterAttribute">
            <summary>
            Guid生成器特性
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.GuidCreaterAttribute.buttonWidth">
            <summary>
            按钮宽度
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IManager">
            <summary>
            管理器接口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IManager.SetInstance(XCSJ.PluginCommonUtils.IManager,System.Boolean)">
            <summary>
            设置实例化对象
            </summary>
            <param name="instance">新的实例化对象</param>
            <param name="force">是否强制更新；如果为false，实例化对象已经有了，不更新；</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IManager.GetInstance">
            <summary>
            获取本类型的静态化实例对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Manager">
            <summary>
            管理器类
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Manager.hasAccess">
            <summary>
            表示当前管理器是否有权限
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.ValidManagerType(System.Type)">
            <summary>
            有效管理器类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.DefaultName(System.Type)">
            <summary>
            默认名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.SetInstance(XCSJ.PluginCommonUtils.IManager,System.Boolean)">
            <summary>
             修改本类的实例化静态对象
            </summary>
            <param name="manager"></param>
            <param name="force"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.GetInstance">
            <summary>
            等同于静态函数 Instance();
            </summary>
            <returns></returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Manager.onInit">
            <summary>
            权限初始化时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Manager.onRelease">
            <summary>
            权限销毁时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化;<br />
            在核心组件中集体回调，用户不需要手动调用；<br />
            在编辑器中，可能被调用多次；*某些特殊逻辑，在处理对应逻辑时需要考虑上一次执行的结果，对此要特别注意*；
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Release">
            <summary>
            销毁；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Startup(XCSJ.Algorithms.ParamList)">
            <summary>
            启动;
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.OnMsg(XCSJ.Message.Msg)">
            <summary>
            消息回调
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.OnUpdate">
            <summary>
            更新函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.GetScripts">
            <summary>
            获取脚本
            </summary>
            <returns>返回本管理器对象可处理的中文脚本命令列表</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本命令
            </summary>
            <param name="id">脚本命令id</param>
            <param name="param">脚本参数列表对象</param>
            <returns>根据不同脚本命令返回同的返回值对象</returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Manager.onAwake">
            <summary>
            唤醒时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Manager.onReset">
            <summary>
            重置时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Manager.onDestroy">
            <summary>
            销毁时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Awake">
            <summary>
            唤醒时调用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.OnDestroy">
            <summary>
            销毁时调用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Manager.Reset">
            <summary>
            重置时被执行的
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.BaseManager`1">
            <summary>
            基础管理器模版类
            </summary>
            <typeparam name="TManager">基础管理器类子类类型</typeparam>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.BaseManager`1._instance">
            <summary>
            子类对象的静态实例化对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseManager`1.instance">
            <summary>
            子类对象的静态实例化对象 访问器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.Instance">
            <summary>
            实例化对象的访问器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.SetInstance(XCSJ.PluginCommonUtils.IManager,System.Boolean)">
            <summary>
             修改本类的实例化静态对象
            </summary>
            <param name="manager"></param>
            <param name="force"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.GetInstance">
            <summary>
            等同于静态函数 Instance();
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.Awake">
            <summary>
            唤醒时调用
            <p>如果子类要重写本方法，必须保证本类本方法被优先调用</p>
            <p>在本方法内会对实例化是否是单例模式进行判断，如果出现重复定义，会直接删除；</p>
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.OnDestroy">
            <summary>
            如果子类要重写本方法，必须保证本类本方法被调用<br />
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`1.StartManager">
            <summary>
            启动管理器
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.BaseManagerHandler`1">
            <summary>
            基础管理器处理器
            </summary>
            <typeparam name="TManagerHandler"></typeparam>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.BaseManagerHandler`1.managerHandler">
            <summary>
            管理器处理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManagerHandler`1.GetScripts">
            <summary>
            获取脚本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManagerHandler`1.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="id"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.BaseManager`2">
            <summary>
            基础管理器模版类：因本类在执行脚本命令<see cref="M:XCSJ.PluginCommonUtils.BaseManager`2.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)"/>时，会将输入参数执行装箱拆箱操作；如开发者要求更高的执行效率时，推荐使用<see cref="T:XCSJ.PluginCommonUtils.BaseManager`1"/>实现具体功能的管理器；
            </summary>
            <typeparam name="TManager">基础管理器类子类类型</typeparam>
            <typeparam name="TEnum">基础管理器类对应的中文脚本枚举类型</typeparam>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`2.GetScripts">
            <summary>
            获取脚本
            </summary>
            <returns>返回本管理器对象可处理的中文脚本命令列表</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`2.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本命令
            </summary>
            <param name="id">脚本命令id：会将输入参数执行装箱拆箱操作</param>
            <param name="param">脚本参数列表对象</param>
            <returns>根据不同脚本命令返回同的返回值对象</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.BaseManager`2.ExecuteScript(`1,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本命令
            </summary>
            <param name="id">脚本命令枚举值</param>
            <param name="param">脚本参数列表对象</param>
            <returns>根据不同脚本命令返回同的返回值对象</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.LogManager">
            <summary>
            日志：用于运行时进行功能调试时，各种调试、警告、异常、错误等信息的输出与显示；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogManager._exceptionHandle">
            <summary>
            异常处理
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogManager.logInfoOption">
            <summary>
            日志信息选项
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LogManager.GetScripts">
            <summary>
            获取脚本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LogManager.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="id"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LogManager.Awake">
            <summary>
            唤醒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LogManager.TrySetExceptionHandle(XCSJ.Helper.EExceptionHandle)">
            <summary>
            尝试设置异常处理
            </summary>
            <param name="exceptionHandle"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.LogInfoOption">
            <summary>
            日志信息选项
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withIndex">
            <summary>
            带索引信息:索引是不断递增的整形数值
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withLevel">
            <summary>
            带级别信息:日志级别信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withTag">
            <summary>
            带标签信息:日志标签信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withDateTime">
            <summary>
            带日期时间信息:日志产生时的详细时间信息，可精确到本地时间的毫秒级；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withoutDate">
            <summary>
            不带日期信息:为True时，仅显示时间信息，即仅显示时分秒毫秒信息，而不显示年月日信息；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.withFrameCount">
            <summary>
            带帧索引信息:帧索引是当前Unity渲染的总帧数数值；
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.showRemainderOfFrameCountBy1000">
            <summary>
            对帧索引求余显示:为True时,显示帧索引对1000求余的结果信息；否则显示真实的帧索引；"
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.LogInfoOption.outputLevel">
            <summary>
            输出级别:仅有被选择的输出级别才会执行输出操作
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ScriptManager">
            <summary>
            中文脚本：即脚本管理器，可用于存储中文脚本命令、执行中文脚本语句的核心组件；可处理的中文脚本包括：变量、函数、语法规则、数值、数组、字典、注释、选择集、数学库、公式库等类型；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.scriptDriver">
            <summary>
            脚本驱动：变量上下文所在的脚本驱动对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.TryGetVarCollection(XCSJ.Scripts.EVarScope,XCSJ.Scripts.IVarCollection@)">
            <summary>
            尝试获取变量集合：接口函数<see cref="M:XCSJ.Scripts.IVarContext.TryGetVarCollection(XCSJ.Scripts.EVarScope,XCSJ.Scripts.IVarCollection@)"/>的实现；
            </summary>
            <param name="varScope"></param>
            <param name="varCollection"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.RegisterVarCollection(XCSJ.Scripts.IVarCollection)">
            <summary>
            注册变量集合
            </summary>
            <param name="varCollection"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.UnegisterVarCollection(XCSJ.Scripts.IVarCollection)">
            <summary>
            取消注册变量集合
            </summary>
            <param name="varCollection"></param>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.varContext">
            <summary>
            变量上下文：接口属性<see cref="P:XCSJ.Scripts.IScriptDriver.varContext"/>的实现；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.SetLocalVarCollection(XCSJ.Scripts.IVarCollection)">
            <summary>
            设置本地变量集合
            </summary>
            <param name="localVarCollection">本地变量集合</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.XCSJ#Scripts#IVarCollectionStack#Push(XCSJ.Scripts.IVarCollection)">
            <summary>
            将变量集合对象入栈
            </summary>
            <param name="varCollection"></param>
            <returns>成功入栈返回True，否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.XCSJ#Scripts#IVarCollectionStack#Pop(XCSJ.Scripts.EVarScope)">
            <summary>
            将指定变量作用域的栈顶变量集合对象出栈并返回
            </summary>
            <param name="varScope">变量作用域</param>
            <returns>成功出栈返回栈顶变量集合对象，否则返回null</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.XCSJ#Scripts#IVarCollectionStack#Peek(XCSJ.Scripts.EVarScope)">
            <summary>
            获取指定变量作用域的栈顶变量集合对象
            </summary>
            <param name="varScope">变量作用域</param>
            <returns>成功获取返回栈顶变量集合对象，否则返回null</returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ScriptManager.machine">
            <summary>
            脚本机器类对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.lastReturnValue">
            <summary>
            最后一句可执行脚本字符串的返回值
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScript(System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行单句脚本字符串
            </summary>
            <param name="scriptString"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScripts(XCSJ.Scripts.Function,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行多句脚本字符串：函数内部可以有判断、循环、构造函数等各种语法逻辑；会对函数内部的脚本字符串对象做预编译而后执行；
            </summary>
            <param name="function"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScripts(System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行多句脚本字符串：内部可以有判断、循环、构造函数等各种语法逻辑；脚本字符串使用换行符 \n 分割；
            </summary>
            <param name="scriptStrings"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScripts(System.Collections.Generic.IList{System.String},XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行多句脚本字符串：内部可以有判断、循环、构造函数等各种语法逻辑；
            </summary>
            <param name="scriptStrings"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScripts(System.Collections.Generic.IList{XCSJ.Scripts.ScriptString},XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行多句脚本字符串：内部可以有判断、循环、构造函数等各种语法逻辑；会对脚本字符串对象做预编译而后执行；
            </summary>
            <param name="scriptStrings"></param>
            <param name="localVarCollectionHost"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.NameScripts">
            <summary>
            脚本名称字典：脚本名称全局唯一；多个脚本名称(不同语言版本)可对应一个脚本对象；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.IDScripts">
            <summary>
            脚本ID字典：脚本ID全局唯一；一个脚本ID仅可对应一个脚本对象；获取脚本对象数量时，以本属性字典的数量为准；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnManagerDestory(XCSJ.PluginCommonUtils.Manager)">
            <summary>
            当管理器销毁时：将待销毁的管理器所属的脚本从脚本字典中移除；
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.AddScript(XCSJ.Scripts.Script)">
            <summary>
            添加脚本
            </summary>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.TryGetScript(System.String,XCSJ.Scripts.Script@)">
            <summary>
            尝试获取脚本
            </summary>
            <param name="scriptName"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.TryGetScriptByScriptString(System.String,XCSJ.Scripts.Script@)">
            <summary>
            通过脚本字符串尝试获取脚本
            </summary>
            <param name="scriptString"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.GetGrammarTypeByScriptString(System.String)">
            <summary>
            通过脚本字符串获取语法类型
            </summary>
            <param name="scriptString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.GetScripts">
            <summary>
            获取脚本
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteScript(System.Int32,XCSJ.Scripts.ScriptParamList)">
            <summary>
            执行脚本
            </summary>
            <param name="id"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ScriptManager.variableList">
            <summary>
            全局变量列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ScriptManager.functionList">
            <summary>
            自定义函数列表
            </summary>        
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnBeforeSerialize">
            <summary>
            当序列化之前回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnAfterDeserialize">
            <summary>
            当反序列化之后回调
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ScriptManager._varCollection">
            <summary>
            全局变量集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.XCSJ#Scripts#IVarCollectionHost#varCollection">
            <summary>
            变量集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.SetSystemVariableValues(System.String,System.String,System.String,System.String)">
            <summary>
            设置系统变量值
            </summary>
            <param name="goValue"></param>
            <param name="paramValue"></param>
            <param name="thisValue"></param>
            <param name="funcValue"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.GetHostContext">
            <summary>
            获取宿主上下文
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ScriptManager._funcCollection">
            <summary>
            自定义函数集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.XCSJ#Scripts#IFuncCollectionHost#funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.funcCollection">
            <summary>
            函数集合
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.ScriptManager.funcDictionary">
            <summary>
            函数字典
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteFunction(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="funcName">函数名</param>
            <param name="param">参数</param>
            <param name="localVarCollectionHost">本地变量集合宿主</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.ExecuteFunction(XCSJ.Scripts.Function,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            执行函数
            </summary>
            <param name="function">函数</param>
            <param name="param">参数</param>
            <param name="localVarCollectionHost">本地变量集合宿主</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.DelayExecuteFunction(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            延时执行函数
            </summary>
            <param name="funcName">函数名</param>
            <param name="param">参数</param>
            <param name="localVarCollectionHost">本地变量集合宿主</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.Awake">
            <summary>
            初始化：唤醒
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnDestroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnEnable">
            <summary>
            当启用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.OnDisable">
            <summary>
            当禁用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.Init(XCSJ.Algorithms.ParamList)">
            <summary>
            初始化
            </summary>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.CallUDF(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            调用用户自定义函数
            </summary>
            <param name="funcName">函数名</param>
            <param name="param">参数</param>
            <param name="localVarCollectionHost">本地变量集合宿主</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.DelayCallUDF(System.String,System.String,XCSJ.Scripts.IVarCollectionHost)">
            <summary>
            延时调用用户自定义函数
            </summary>
            <param name="funcName">函数名</param>
            <param name="param">参数</param>
            <param name="localVarCollectionHost">本地变量集合宿主</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.TryGetGlobalVariableValue(System.String,System.Object@)">
            <summary>
            尝试获取全局变量值
            </summary>
            <param name="varName">变量名</param>
            <param name="value">变量值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.GetGlobalVariableValue(System.String,System.String)">
            <summary>
            获取全局变量值
            </summary>
            <param name="varName">变量名</param>
            <param name="defaultValue">尝试获取全局变量值失败时返回本值</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.ScriptManager.TrySetGlobalVariableValue(System.String,System.String)">
            <summary>
            尝试设置全局变量值：有则设置，无则添加并设置
            </summary>
            <param name="varName">变量名</param>
            <param name="value">变量值</param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.CommonFun">
            <summary>
            与Unity相关的通用操作类，内部包含各种静态方法；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonFun.isPlaying">
            <summary>
            是否播放中:允许多线程状态下使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Init">
            <summary>
            运行时初始化
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.UpdatePlayState(System.Boolean)">
            <summary>
            更新播放状态
            </summary>
            <param name="isPlayingOnException"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Awake">
            <summary>
            唤醒：初始化
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.OnDestroy">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.OutputDateTimeNow(System.String)">
            <summary>
            输出当前日期时间
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginOutput(System.String,System.Boolean)">
            <summary>
            输出开始
            </summary>
            <param name="content"></param>
            <param name="output"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.EndOutput(System.String)">
            <summary>
            输出结束
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InitConverterIfNeed">
            <summary>
            如果需要初始化转换器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.FindOrCreateGameObject(System.String)">
            <summary>
            查找或创建游戏对象
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetParentsGameObject(UnityEngine.Transform,System.Boolean)">
            <summary>
            获取对象所有父级游戏对象：顺序为从下到上
            </summary>
            <param name="transform">转换</param>
            <param name="includeSelf">包含自身</param>
            <returns>父级游戏对象列表</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetParentsGameObject(UnityEngine.GameObject,System.Boolean)">
            <summary>
            获取对象所有父级游戏对象：顺序为从下到上
            </summary>
            <param name="gameObject">游戏对象</param>
            <param name="includeSelf">包含自身</param>
            <returns>父级游戏对象列表</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildGameObjects(UnityEngine.Transform)">
            <summary>
            获取子gameobject列表:不获取孙级对象
            </summary>
            <param name="parentTransform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildGameObjects(UnityEngine.GameObject)">
            <summary>
            获取子级游戏对象
            </summary>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetAllChildrenGameObject(UnityEngine.Transform,System.Boolean)">
            <summary>
            获取所有子游戏对象
            </summary>
            <param name="transform"></param>
            <param name="includeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetAllChildrenGameObject(UnityEngine.GameObject,System.Boolean)">
            <summary>
            获取所有子游戏对象
            </summary>
            <param name="gameObject"></param>
            <param name="includeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildNames(UnityEngine.Transform)">
            <summary>
            获取子gameobject的name列表
            </summary>
            <param name="parentTransform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildNames(UnityEngine.GameObject)">
            <summary>
            获取子gameobject的name列表
            </summary>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildNamesWithoutScript(UnityEngine.Transform,System.Type)">
            <summary>
            获取子gameobject的name列表,同时要求子gameobject不带type类型的组件；
            </summary>
            <param name="parentTransform"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildGameObject(UnityEngine.Transform,System.String)">
            <summary>
            从子节点中查找指定的GO
            </summary>
            <param name="parentTransform"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildGameObject(UnityEngine.GameObject,System.String)">
            <summary>
            获取子级游戏对象
            </summary>
            <param name="gameObject"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildTransform(UnityEngine.Transform,System.String)">
            <summary>
            获取子级游戏对象的变换
            </summary>
            <param name="parentTransform"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetChildTransform(UnityEngine.GameObject,System.String)">
            <summary>
            获取子级游戏对象的变换
            </summary>
            <param name="gameObject"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.HasChildGameObject(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            判断有无子级游戏对象
            </summary>
            <param name="go"></param>
            <param name="subGO"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.HasChildGameObject(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            判断有无子级游戏对象
            </summary>
            <param name="transform"></param>
            <param name="childTransform"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectContainIBaseManager(UnityEngine.GameObject)">
            <summary>
            检查 GameObject 是否包含 IBaseManager ,即是否是管理类组件依赖的游戏对象
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectIsRoot(UnityEngine.GameObject)">
            <summary>
            检查 GameObject 是否是 根组件,即是否是 XDreamer  组件依赖的游戏对象
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectIsRootOrContainIBaseManager(UnityEngine.GameObject)">
            <summary>
            检查 GameObject 是否是 根组件 或 包含 IBaseManager
            </summary>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInLoadedScene``1(System.String,System.Boolean)">
            <summary>
            获取已加载场景中的期望类型的组件对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scenePath"></param>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInLoadedScene``1(UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            获取已加载场景中的期望类型的组件对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="scene"></param>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetLoadedScene(System.String)">
            <summary>
            获取已加载的场景
            </summary>
            <param name="scenePath">如果场景路径无效，返回激活的场景</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetScene(System.Func{UnityEngine.SceneManagement.Scene,System.Boolean})">
            <summary>
            获取场景
            </summary>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ForeachAllGameObjects(System.Func{UnityEngine.Transform,System.Boolean},System.String,System.Boolean)">
            <summary>
            遍历所有游戏对象:通过变换方式遍历指定场景中所有的游戏对象；
            </summary>
            <param name="func">函数：返回True,将继续遍历；返回False,不再遍历</param>
            <param name="scenePath"></param>
            <param name="includeInactive"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ForeachAllGameObjects(System.Func{UnityEngine.Transform,System.Boolean},UnityEngine.SceneManagement.Scene,System.Boolean)">
            <summary>
            遍历所有游戏对象:通过变换方式遍历指定场景中所有的游戏对象；
            </summary>
            <param name="func">函数：返回True,将继续遍历；返回False,不再遍历</param>
            <param name="scene"></param>
            <param name="includeInactive"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ForeachChildren(System.Collections.Generic.IEnumerable{UnityEngine.GameObject},System.Func{UnityEngine.Transform,System.Boolean},System.Boolean)">
            <summary>
            遍历子级
            </summary>
            <param name="gameObjects"></param>
            <param name="func">函数：返回True,将继续遍历；返回False,不再遍历</param>
            <param name="includeInactive"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ForeachChildren(System.Collections.Generic.IEnumerable{UnityEngine.Component},System.Func{UnityEngine.Transform,System.Boolean},System.Boolean)">
            <summary>
            遍历子级
            </summary>
            <param name="components"></param>
            <param name="func">函数：返回True,将继续遍历；返回False,不再遍历</param>
            <param name="includeInactive"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetRootGameObjects(System.String)">
            <summary>
            不可以在初始化启动的组件的Awake函数中使用
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetRootGameObjects(UnityEngine.SceneManagement.Scene)">
            <summary>
            获取根游戏对象
            </summary>
            <param name="scene"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponents(UnityEngine.GameObject[],System.Type)">
            <summary>
            获取组件
            </summary>
            <param name="gos"></param>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponents``1(UnityEngine.GameObject[])">
            <summary>
            获取组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gos"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInChildren(UnityEngine.GameObject[],System.Type,System.Boolean)">
            <summary>
            获取组件,包含子级
            </summary>
            <param name="gos"></param>
            <param name="componentType"></param>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInChildren``1(UnityEngine.GameObject[],System.Boolean)">
            <summary>
            获取组件,包含子级
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gos"></param>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInChildren``1(System.Boolean)">
            <summary>
            获取组件,包含子级
            </summary>
            <typeparam name="T"></typeparam>
            <param name="includeInactive"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentsInChildren(System.Type,System.Boolean,System.String)">
            <summary>
            获取组件,包含子级
            </summary>
            <param name="componentType"></param>
            <param name="includeInactive"></param>
            <param name="scenePath"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetOrAddComponent``1(UnityEngine.GameObject)">
            <summary>
            获取或添加组件；有则返回，无则添加并返回；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetOrAddComponent``2(UnityEngine.GameObject)">
            <summary>
            获取或添加组件；有则返回，无则添加并返回；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="TGet"></typeparam>
            <typeparam name="TAdd"></typeparam>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetOrAddComponent``1(UnityEngine.GameObject,System.Type)">
            <summary>
            获取或添加组件；有则返回，无则添加并返回；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="TGet"></typeparam>
            <param name="go"></param>
            <param name="addType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetOrAddComponent(UnityEngine.GameObject,System.Type,System.Type)">
            <summary>
            获取或添加组件；有则返回，无则添加并返回；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="go"></param>
            <param name="getType"></param>
            <param name="addType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.RemoveComponet``1(UnityEngine.GameObject)">
            <summary>
            移除组件:支持在Unity编辑器中执行撤销与重做；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="go"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetComponentEnabled(UnityEngine.Component)">
            <summary>
            获取组件可用性
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetFieldsInInspector(System.Type)">
            <summary>
            获取Inspector中显示类型的字段信息
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetHostGameObject(UnityEngine.Object)">
            <summary>
            获取宿主游戏对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,System.Collections.Generic.IEnumerable{UnityEngine.Transform},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取包围盒
            </summary>
            <param name="bounds"></param>
            <param name="transforms"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,System.Collections.Generic.IEnumerable{UnityEngine.Transform},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            获取包围盒
            </summary>
            <param name="bounds"></param>
            <param name="transforms"></param>
            <param name="includeChildrenFunc"></param>
            <param name="includeGameObjectFunc"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,System.Collections.Generic.IEnumerable{UnityEngine.GameObject},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取包围盒
            </summary>
            <param name="bounds"></param>
            <param name="gameObjects"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,System.Collections.Generic.IEnumerable{UnityEngine.GameObject},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            获取包围盒
            </summary>
            <param name="bounds"></param>
            <param name="gameObjects"></param>
            <param name="includeChildrenFunc"></param>
            <param name="includeGameObjectFunc"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,UnityEngine.Transform,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取当前GameObject（包含子节点的）的Renderer包围盒;会递归计算；
            </summary>
            <param name="bounds"></param>
            <param name="transform"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,UnityEngine.Transform,System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            获取当前GameObject（包含子节点的）的Renderer包围盒;会递归计算；
            </summary>
            <param name="bounds"></param>
            <param name="transform"></param>
            <param name="includeChildrenFunc"></param>
            <param name="includeGameObjectFunc"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取当前GameObject（包含子节点的）的Renderer包围盒;会递归计算；
            </summary>
            <param name="bounds"></param>
            <param name="gameObject"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Bounds@,UnityEngine.GameObject,System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            获取当前GameObject（包含子节点的）的Renderer包围盒;会递归计算；
            </summary>
            <param name="bounds"></param>
            <param name="gameObject"></param>
            <param name="includeChildrenFunc"></param>
            <param name="includeGameObjectFunc"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetBounds(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取GameObject（包含子节点的）的包围盒大小点坐标;会递归计算；
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="gameObject"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsAdditive(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            尝试累加获取GameObject（包含子节点的）的Renderer包围盒大小点坐标；递归计算；<br />
            即计算传入的大小点坐标与当前GameObject（包含子节点的）的Renderer包围盒的并集包围盒；
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="gameObject"></param>
            <param name="includeChildren"></param>
            <param name="includeInactiveGO"></param>
            <param name="includeDisableRenderer"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsAdditive(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.GameObject,System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            尝试累加获取GameObject（包含子节点的）的Renderer包围盒大小点坐标；递归计算；<br />
            即计算传入的大小点坐标与当前GameObject（包含子节点的）的Renderer包围盒的并集包围盒；
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="gameObject"></param>
            <param name="includeChildrenFunc">判断是否包含游戏对象的子级</param>
            <param name="includeGameObjectFunc">判断是否包含级游戏对象</param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsAdditiveInternal(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.GameObject,System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.GameObject,System.Boolean},System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            不再对参数有效性做判断
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="gameObject"></param>
            <param name="includeChildrenFunc"></param>
            <param name="includeGameObjectFunc"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsAdditiveOfSelf(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.GameObject,System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            仅累加获取GameObject（不包含子节点的）的Renderer包围盒大小点坐标；仅增加当前游戏对象的；<br />
            即计算传入的大小点坐标与当前GameObject（不包含子节点的）的Renderer包围盒的并集包围盒；
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="gameObject"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsOfSelf(UnityEngine.GameObject,UnityEngine.Bounds@,System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            获取游戏对象自身包围盒
            </summary>
            <param name="bounds"></param>
            <param name="gameObject"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBounds(UnityEngine.Renderer,UnityEngine.Bounds@,System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            尝试获取渲染器包围盒
            </summary>
            <param name="bounds"></param>
            <param name="renderer"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetBoundsInternal(UnityEngine.Bounds@,UnityEngine.Renderer,System.Func{UnityEngine.Renderer,System.Boolean})">
            <summary>
            不再对参数有效性做判断
            </summary>
            <param name="bounds"></param>
            <param name="renderer"></param>
            <param name="includeRendererFunc"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObject(System.String)">
            <summary>
            根据名称获取GO,具有子父关系时，名称用/分割；将代码实现转移到明文中
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun._TransformToString(UnityEngine.Transform,System.String)">
            <summary>
            变换转字符串：Unity的默认规则名称输出；不支持多线程!!! 适用于Unity
            </summary>
            <param name="transform"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectToString(UnityEngine.GameObject,System.String)">
            <summary>
            游戏对象转字符串
            </summary>
            <param name="go"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToInt(System.String,System.Int32)">
            <summary>
            将字符串转化为int类型，如果string无效，返回0；<br />
            ***如果无法转化为int类型，但可以转化为float类型，则返回浮点数取整的结果；***
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToLong(System.String,System.Int64)">
            <summary>
            将字符串转化为long类型，如果string无效，返回0；<br />
            ***如果无法转化为long类型，但可以转化为double类型，则返回浮点数取整的结果；***
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToFloat(System.String,System.Single)">
            <summary>
            将字符串转化为float类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToDouble(System.String,System.Double)">
            <summary>
            将字符串转化为double类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToRect(System.String)">
            <summary>
            字符串转Rect
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.RectToString(UnityEngine.Rect,System.String)">
            <summary>
            将Rect转化为字符串
            </summary>
            <param name="r"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToRectInt(System.String)">
            <summary>
            字符串转RectInt
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.RectIntToString(UnityEngine.RectInt,System.String)">
            <summary>
            RectInt转字符串
            </summary>
            <param name="r"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToVector2(System.String)">
            <summary>
            将字符串转化为Vector2类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Vector2ToString(UnityEngine.Vector2,System.String)">
            <summary>
            将Vector2转化为字符串
            </summary>
            <param name="v2"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToVector2Int(System.String)">
            <summary>
            字符串转化为二维整形向量
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Vector2IntToString(UnityEngine.Vector2Int,System.String)">
            <summary>
            二维整形向量转字符串
            </summary>
            <param name="v2"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToVector3(System.String)">
            <summary>
            将字符串转化为Vector3类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Vector3ToString(UnityEngine.Vector3,System.String)">
            <summary>
            将Vector3转化为字符串
            </summary>
            <param name="v3"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToVector3Int(System.String)">
            <summary>
            字符串转三维整形向量
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Vector3IntToString(UnityEngine.Vector3Int,System.String)">
            <summary>
            三维整形向量转字符串
            </summary>
            <param name="v3"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToVector4(System.String)">
            <summary>
            将字符串转化为Vector4类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Vector4ToString(UnityEngine.Vector4,System.String)">
            <summary>
            将Vector4转化为字符串
            </summary>
            <param name="v4"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToQuaternion(System.String)">
            <summary>
            将字符串转化为Quaternion类型，如果string无效，返回0；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.QuaternionToString(UnityEngine.Quaternion,System.String)">
            <summary>
            将Quaternion转化为字符串
            </summary>
            <param name="v4"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToBounds(System.String)">
            <summary>
            将字符串转化为Bounds类型，如果string无效，返回Bounds默认大小；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BoundsToString(UnityEngine.Bounds,System.String)">
            <summary>
            将Bounds转化为字符串
            </summary>
            <param name="b"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToBoundsInt(System.String)">
            <summary>
            字符串转BoundsInt
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BoundsIntToString(UnityEngine.BoundsInt,System.String)">
            <summary>
            BoundsInt转字符串
            </summary>
            <param name="b"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToColor(System.String)">
            <summary>
            将字符串转化为Color类型，如果string无效，返回Color默认颜色；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ColorToString(UnityEngine.Color,System.String)">
            <summary>
            将Color转化为字符串
            </summary>
            <param name="c"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToComponentType(System.String)">
            <summary>
            字符串转组件类型
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ComponentTypeToString(System.Type)">
            <summary>
            组件类型转字符串
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObjectComponent(System.String,System.String)">
            <summary>
            字符串转游戏对象组件
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectComponentToString(UnityEngine.Component,System.String)">
            <summary>
            游戏对象组件转字符串：返回形式 /GameObject0/GameObject1.XCSJ/Component
            </summary>
            <param name="c"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectComponentToStringWithTypeFullName(UnityEngine.Component,System.String)">
            <summary>
            游戏对象组件转字符串带类型全名，返回形如：/GameObject0/GameObject1/XCSJ.Component
            </summary>
            <param name="c"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObjectComponentWithTypeFullName(System.String,System.String)">
            <summary>
            字符串转游戏对象组件带类型全名：输入形如 /GameObject0/GameObject1/XCSJ.Component
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObjectScriptEventFunction(System.String,System.String)">
            <summary>
            字符串转游戏对象脚本事件函数
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectScriptEventFunctionToString(XCSJ.Scripts.Function,System.String)">
            <summary>
            游戏对象脚本事件函数转字符串
            </summary>
            <param name="function">对象的Tag必须绑定依附的脚本事件组件</param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectScriptEventVariableToString(XCSJ.Scripts.CustomVariable,System.String)">
            <summary>
            游戏对象脚本事件变量转字符串
            </summary>
            <param name="variable"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObjectScriptEventVariable(System.String)">
            <summary>
            字符串转游戏对象脚本事件变量
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GameObjectScriptEventVariableDataToString(XCSJ.PluginCommonUtils.CNScripts.GameObjectScriptEventVariableData)">
            <summary>
            游戏对象脚本事件变量数据转字符串
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToGameObjectScriptEventVariableData(System.String)">
            <summary>
            字符串转游戏对象脚本事件变量数据
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ObjectToString(System.Object)">
            <summary>
            对象转字符串
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.UnityAssetObjectToString(UnityEngine.Object,System.String)">
            <summary>
            Unity资产对象转字符串
            </summary>
            <param name="obj"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToUnityAssetObject(System.String,System.String)">
            <summary>
            字符串转Unity资产对象
            </summary>
            <param name="str"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.FindTypeInAppWithSort(System.Type,System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            从当前APP所有程序集中遍历查找符合要求的所有类型
            </summary>
            <param name="parentType">当前待查找的 Type  表示的类是否是从指定的 parentType 表示的类派生的</param>
            <param name="parentInterfaceType">当前待查找的 Type  表示的类是否是从指定的 parentInterfaceType 表示的接口派生的</param>
            <param name="needIsPublic">当前待查找的 Type  表示的类是否要求是共有的</param>
            <param name="canIsAbstract">当前待查找的 Type  表示的类是否可以是一个抽象类</param>
            <param name="canIsGenericType">当前待查找的 Type  表示的类是否可以是一个泛型类，即模板类</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.FindTypeInAppWithClassAndSort(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            查找当前APP中的类型并排序
            </summary>
            <param name="parentType"></param>
            <param name="needIsPublic"></param>
            <param name="canIsAbstract"></param>
            <param name="canIsGenericType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StringToEnum``1(System.String,``0)">
            <summary>
            字符串转枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IndexOfEnumValue(System.Enum)">
            <summary>
            获取枚举值的索引
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Reflection.MemberInfo)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="memberInfo">成员信息</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="memberInfo">成员信息</param>
            <param name="languageType">语言类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Type,System.String)">
            <summary>
            获取类型中指定成员名称的NameAttribute信息
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Type,System.String,System.Reflection.FieldInfo@)">
            <summary>
            获取类型中指定成员名称的NameAttribute信息
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
            <param name="memberFieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Type,System.String,System.Reflection.MemberInfo@)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Type,System.String,XCSJ.Languages.ELanguageType,System.Reflection.MemberInfo@)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="languageType"></param>
            <param name="fieldOrPropertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Object,System.String)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Name(System.Enum)">
            <summary>
            获取成员信息的NameAttribute信息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tooltip(System.Reflection.MemberInfo)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Reflection.MemberInfo)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Reflection.MemberInfo,XCSJ.Languages.ELanguageType)">
            <summary>
            获取成员信息的TipAttribute信息
            </summary>
            <param name="memberInfo">成员信息</param>
            <param name="languageType">语言类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tooltip(System.Type,System.String)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Type,System.String)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tooltip(System.Object,System.String)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Object,System.String)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tooltip(System.Enum)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Enum)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tooltip(System.Enum,XCSJ.Caches.EEnumTip)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本；可处理枚举被FlagsAttribute特性修饰的情况；
            </summary>
            <param name="e"></param>
            <param name="enumTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.Tip(System.Enum,XCSJ.Caches.EEnumTip)">
            <summary>
            获取TipAttribute信息 -- 当前语言版本；可处理枚举被FlagsAttribute特性修饰的情况；
            </summary>
            <param name="e"></param>
            <param name="enumTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Type,System.String,System.Reflection.FieldInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="memberFieldInfo">输出结果表示 type 是否存在以 memberName 名称的Field成员的类型</param>
            <param name="nameTip"></param>
            <returns>不管存不存在，都会返回有效的信息</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Type,System.String,System.Reflection.FieldInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="memberFieldInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Type,System.String,System.Reflection.MemberInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Type,System.String,System.Reflection.MemberInfo@,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="fieldOrPropertyInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Type,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Type,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="type"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="memberInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Reflection.MemberInfo,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="memberInfo"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Object,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Object,System.String,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="obj"></param>
            <param name="memberName"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTooltip(System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(System.Enum,XCSJ.PluginCommonUtils.ENameTip)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="e"></param>
            <param name="nameTip"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NameTip(XCSJ.Attributes.EIcon,System.Boolean)">
            <summary>
            获取成员信息的NameAttribute与TipAttribute信息
            </summary>
            <param name="icon"></param>
            <param name="emptyTextWhenHasImage"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TempContent(System.String[])">
            <summary>
            零时内容
            </summary>
            <param name="texts"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TempContent(System.String,System.String,UnityEngine.Texture)">
            <summary>
            零时内容
            </summary>
            <param name="text"></param>
            <param name="tooltip"></param>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TempContent(UnityEngine.Texture,System.String,System.String)">
            <summary>
            零时内容
            </summary>
            <param name="image"></param>
            <param name="tooltip"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.FocusControl(System.String)">
            <summary>
            聚焦控件
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsOnGUI">
            <summary>
            用于判断鼠标（手势）当前是否在IM GUI上
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUGUI">
            <summary>
            用于判断鼠标（手势）当前是否在UGUI上
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUINow">
            <summary>
            当前是否在UI上，用于判断鼠标（手势）当前是否正在IMGUI或UGUI上；即判断<see cref="M:XCSJ.PluginCommonUtils.CommonFun.IsOnGUI"/>或<see cref="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUGUI"/>成立；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUI">
            <summary>
            是否在UI上；即调用<see cref="M:XCSJ.PluginCommonUtils.CommonFun.BeginOnUI"/>次数大于<see cref="M:XCSJ.PluginCommonUtils.CommonFun.EndOnUI"/>调用次数（在UI上的计数器<see cref="M:XCSJ.PluginCommonUtils.CommonFun.GetOnUICount"/>大于0）；
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonFun._onUICount">
            <summary>
            在UI上的计数器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetOnUICount">
            <summary>
            获取在UI上的计数器的计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ResetOnUI">
            <summary>
            重置在UI上的计数器<see cref="M:XCSJ.PluginCommonUtils.CommonFun.GetOnUICount"/>为0
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginOnUI">
            <summary>
            标识开始在UI上；在UI上的计数器<see cref="M:XCSJ.PluginCommonUtils.CommonFun.GetOnUICount"/>自加1；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.EndOnUI">
            <summary>
            标识节数在UI上；在UI上的计数器<see cref="M:XCSJ.PluginCommonUtils.CommonFun.GetOnUICount"/>自减1；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsOnAnyUI">
            <summary>
            是否在任意UI上；即判断<see cref="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUI"/>或<see cref="M:XCSJ.PluginCommonUtils.CommonFun.IsOnUINow"/>成立
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsVerticalGUILayout">
            <summary>
            判断当前是否是垂直布局
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.HasBoxBackground(System.Int32)">
            <summary>
            有包围盒背景
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetGUIStyle(System.Int32,System.Boolean)">
            <summary>
            获取GUI样式
            </summary>
            <param name="index"></param>
            <param name="isProfessional"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetGUIStyle(System.Boolean,System.Boolean)">
            <summary>
            获取GUI样式
            </summary>
            <param name="hasBoxBackground"></param>
            <param name="isProfessional"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginHorizontal(System.Int32,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>
            开始横向
            </summary>
            <param name="index"></param>
            <param name="isProfessional"></param>
            <param name="options"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginHorizontal(System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>
            开始横向
            </summary>
            <param name="hasBoxBackground"></param>
            <param name="isProfessional"></param>
            <param name="options"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.EndHorizontal">
            <summary>
            结束横向
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginVertical(System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
            <summary>
            开始纵向
            </summary>
            <param name="hasBoxBackground"></param>
            <param name="isProfessional"></param>
            <param name="options"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.EndVertical">
            <summary>
            结束纵向
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginLayout(System.Boolean,System.Boolean,System.Single,UnityEngine.GUIStyle)">
            <summary>
            开启布局 -- 与EndLayout成对使用
            </summary>
            <param name="needIndent">是否需要缩进</param>
            <param name="needBoundBox">是否绘制包围盒</param>
            <param name="indent">缩进量</param>
            <param name="horizontalStyle">横向布局风格</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginLayout(System.Boolean,System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
            <summary>
            开启布局 -- 与EndLayout成对使用
            </summary>
            <param name="needIndent">是否需要缩进</param>
            <param name="needBoundBox">是否绘制包围盒</param>
            <param name="indent">缩进量</param>
            <param name="horizontalStyle">横向布局</param>
            <param name="options">布局选项</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BeginLayout(UnityEngine.GUILayoutOption[])">
            <summary>
            开启布局 -- 与EndLayout成对使用
            </summary>
            <param name="options">布局选项</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.EndLayout">
            <summary>
            结束布局 -- 与BeginLayout 成对使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DrawBackgroundColorGUI(UnityEngine.Color,System.Action)">
            <summary>
            绘制指定背景色的GUI
            </summary>
            <param name="backgroundColor"></param>
            <param name="onGUI"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DrawColorGUI(UnityEngine.Color,System.Action)">
            <summary>
            绘制指定颜色的GUI
            </summary>
            <param name="color"></param>
            <param name="onGUI"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DrawGUI(UnityEngine.Color,UnityEngine.Color,System.Action)">
            <summary>
            绘制GUI
            </summary>
            <param name="backgroundColor"></param>
            <param name="color"></param>
            <param name="onGUI"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.LoadTextFromLocalDisk(System.String)">
            <summary>
            从本地磁盘加载文本
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.LoadTextureFromLocalDisk(System.String)">
            <summary>
            Windows平台:<br />
                如果传入 / 路径分隔符，那么加载的图片只能与工程或发布后的exe在同一个盘符内;<br />
                如果传入 \\ 路径分隔符，则可以加载其它盘符的图片；
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CopyDataToPersistentDataPath(System.Func{System.Byte[]},System.String,System.Boolean)">
            <summary>
            拷贝数据到持久化数据路径
            </summary>
            <param name="dataFunc"></param>
            <param name="toRelativePath"></param>
            <param name="overrideFile"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CopyDataToPersistentDataPath(System.Byte[],System.String,System.Boolean)">
            <summary>
            拷贝数据到持久化数据路径
            </summary>
            <param name="data"></param>
            <param name="toRelativePath"></param>
            <param name="overrideFile"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CopyFileFromStreamingAssetsPathToPersistentDataPathInAndriod(System.String,System.String,System.Boolean)">
            <summary>
            从流资产路径拷贝文件到持久化数据路径，安卓平台；
            </summary>
            <param name="fromPath"></param>
            <param name="toRelativePath"></param>
            <param name="overrideFile"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CopyFileFromStreamingAssetsPathToPersistentDataPathInIOS(System.String,System.String,System.Boolean)">
            <summary>
            从流资产路径拷贝文件到持久化数据路径，iOS平台；
            </summary>
            <param name="fromPath"></param>
            <param name="toRelativePath"></param>
            <param name="overrideFile"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CopyTextToClipboardForPC(System.String)">
            <summary>
            拷贝文本到剪贴板，仅适用于PC
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NetIsOK">
            <summary>
            判断网络是否可用
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ConvertToGUIPoint(UnityEngine.Vector3,XCSJ.PluginCommonUtils.ECoordinateType)">
            <summary>
            转换为GUI点
            </summary>
            <param name="point"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.NewGuid">
            <summary>
            新建GUID
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ArrayToString``1(``0[],System.String,System.String)">
            <summary>
            数组转字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="separator"></param>
            <param name="quotes"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.BoolChange(System.Boolean,XCSJ.Scripts.EBool)">
            <summary>
            布尔类型变化
            </summary>
            <param name="value"></param>
            <param name="boolType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ConvertIntToHMS(System.Int32,System.Boolean,System.String)">
            <summary>
            将秒数转为 时：分：秒 格式，超过24小时的则转换失败
            </summary>
            <param name="seconds">秒</param>
            <param name="fillWithZero"></param>
            <param name="separator"></param>
            <returns>h：m：s 格式的字符串</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ConvertIntToMS(System.Int32,System.Boolean,System.String)">
            <summary>
            将秒数转为 分：秒 格式，超过60分钟的则转换失败
            </summary>
            <param name="seconds">秒</param>
            <param name="fillWithZero"></param>
            <param name="separator"></param>
            <returns>m：s 格式的字符串</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ConvertIntToHMS(System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            将秒数拆分为小时，分钟和秒的整数
            </summary>
            <param name="seconds">秒数</param>
            <param name="h">小时</param>
            <param name="m">分钟</param>
            <param name="s">秒</param>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonFun.DefaultFormat">
            <summary>
            默认格式化
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.CommonFun.UnityDefaultFormat">
            <summary>
            Unity默认格式化：不推荐使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetUniqueName(System.String,System.Func{System.String,System.Boolean},System.Int32,System.String)">
            <summary>
            获取唯一名称
            </summary>
            <param name="name"></param>
            <param name="isUniqueNameFunc"></param>
            <param name="startIndex"></param>
            <param name="format">其中0为name,1为索引</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CreateGameObjectWithUniqueName(UnityEngine.GameObject,System.String,System.Int32,System.String)">
            <summary>
            创建游戏对象，并设置唯一名称；支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="parentGameObject"></param>
            <param name="name"></param>
            <param name="startIndex"></param>
            <param name="format">其中0为name,1为索引</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetGameObjectUniqueName(UnityEngine.GameObject,System.String,System.Int32,System.String)">
            <summary>
            获取游戏对象唯一名称
            </summary>
            <param name="parentGameObject">如无效，则保证与所有根级游戏不重名</param>
            <param name="name"></param>
            <param name="startIndex"></param>
            <param name="format">其中0为name,1为索引</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.XSetUniqueName(UnityEngine.GameObject,System.String,System.Int32,System.String)">
            <summary>
            设置游戏对象的唯一名：即保证游戏对象在所在层级的名称唯一：支持在Unity编辑器中执行撤销与重做；
            </summary>
            <param name="go"></param>
            <param name="name"></param>
            <param name="startIndex"></param>
            <param name="format">其中0为name,1为索引</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.SetName(System.Object,System.String)">
            <summary>
            设置名称
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetName(System.Object,System.String)">
            <summary>
            获取名称
            </summary>
            <param name="obj"></param>
            <param name="defaultName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetName(System.Object,System.String@)">
            <summary>
            尝试获取名称
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonFun.XCSJLogo">
            <summary>
            XCSJ的Logo纹理
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonFun.XCSJWatermaker">
            <summary>
            XCSJ的水印纹理
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonFun.XDreamerWatermaker">
            <summary>
            XDreamer的水印纹理
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.CommonFun.XDreamerLogo">
            <summary>
            XDreamer的Logo纹理
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.HasAccess(System.Reflection.MemberInfo)">
            <summary>
            判断成员信息是否是有权限使用的
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.HasAccess(System.Reflection.MemberInfo,System.Type@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            判断成员信息是否是有权限使用的
            </summary>
            <param name="memberInfo"></param>
            <param name="noAccessManagerType">无权限的管理器类型：如成员信息对象未添加必须管理器特性<see cref="T:XCSJ.PluginCommonUtils.RequireManagerAttribute"/>时，本对象会返回null</param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.OpenManual(System.Object)">
            <summary>
            打开手册
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CreateInstance``1(UnityEngine.GameObject)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CreateInstance``2(UnityEngine.GameObject)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.CreateInstance``1(System.Type,UnityEngine.GameObject)">
            <summary>
            创建实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <param name="gameObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsRequiredType(System.Type,System.Type,System.Boolean)">
            <summary>
            通过检查<see cref="T:UnityEngine.RequireComponent"/>特性，判断是否是必须类型；即type依赖requiredType，简单理解要添加type必须先添加requiredType，要移除requiredType必须先移除type
            </summary>
            <param name="type">类型</param>
            <param name="requiredType">被需要的类型</param>
            <param name="inheritedOfRequiredType">标识是否可为被需要的类型的子类类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.IsRequiredType(System.Type,System.Type,System.Type@,System.Boolean)">
            <summary>
            通过检查<see cref="T:UnityEngine.RequireComponent"/>特性，判断是否是必须类型；即type依赖requiredType，简单理解要添加type必须先添加requiredType，要移除requiredType必须先移除type
            </summary>
            <param name="type">类型</param>
            <param name="requiredType">被需要的类型</param>
            <param name="realRequiredType">真实被需要的类型</param>
            <param name="inheritedOfRequiredType">标识是否可为被需要的类型的子类类型</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetTypesOfRequireComponent``1(System.Boolean)">
            <summary>
            通过检查<see cref="T:UnityEngine.RequireComponent"/>特性，获取所有必须的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="returnIncludeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetTypesOfRequireComponent(System.Type,System.Boolean)">
            <summary>
            检查RequireComponent特性，获取所有必须的类型
            </summary>
            <param name="type"></param>
            <param name="returnIncludeSelf"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetValidObjects``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取有效对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeMethod(System.String,UnityEngine.Object[])">
            <summary>
            调用方法
            </summary>
            <param name="name"></param>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeMethod(System.String,System.Collections.Generic.IEnumerable{UnityEngine.Object})">
            <summary>
            调用方法
            </summary>
            <param name="name"></param>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeOnEnable(UnityEngine.Object[])">
            <summary>
            调用启用方法
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeOnEnable(System.Collections.Generic.IEnumerable{UnityEngine.Object})">
            <summary>
            调用启用方法
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeOnDisable(UnityEngine.Object[])">
            <summary>
            调用禁用方法
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.InvokeOnDisable(System.Collections.Generic.IEnumerable{UnityEngine.Object})">
            <summary>
            调用禁用方法
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetPropertyNameInInspector(UnityEngine.Object)">
            <summary>
            获取对象在检查器中可显示的属性名称数组：仅在Unity编辑器中使用时有效；
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCallInMainThread(System.Object,System.Action{System.Object},System.Single)">
            <summary>
            在主线程中延时调用：支持编辑态与运行时延时执行：仅允许在主线程中调用；
            </summary>
            <param name="param"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCallInMainThread(System.Action,System.Single)">
            <summary>
            在主线程中延时调用：支持编辑态与运行时延时执行：仅允许在主线程中调用；
            </summary>
            <param name="action"></param>
            <param name="delayTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.KillDealyCall(XCSJ.PluginCommonUtils.DelayAction)">
            <summary>
            销毁延时调用：可在多线程中调用；
            </summary>
            <param name="dealyAction"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCall(System.Single,System.Object,System.Action{System.Object},System.String)">
            <summary>
            延时调用：可在多线程中调用；
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="action"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCall(System.Object,System.Action{System.Object},System.Single,System.String)">
            <summary>
            延时调用：可在多线程中调用；
            </summary>
            <param name="param"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCall(System.Action,System.Single,System.String)">
            <summary>
            延时调用：可在多线程中调用；
            </summary>
            <param name="action"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.DelayCall(System.Action,System.String,System.Single)">
            <summary>
            延时调用：可在多线程中调用；
            </summary>
            <param name="action"></param>
            <param name="name"></param>
            <param name="delayTime"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StartReadAsync``1(XCSJ.Net.IClientNetPackage,System.Action{XCSJ.Net.IClientNetPackage,``0},System.Action{XCSJ.Net.IClientNetPackage},System.Action{XCSJ.Net.IClientNetPackage,System.Object})">
            <summary>
            开始读取：仅允许在主线程中调用；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="onRead"></param>
            <param name="onExit"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.StartReadAsync``1(UnityEngine.MonoBehaviour,XCSJ.Net.IClientNetPackage,System.Action{XCSJ.Net.IClientNetPackage,``0},System.Action{XCSJ.Net.IClientNetPackage},System.Action{XCSJ.Net.IClientNetPackage,System.Object})">
            <summary>
            开始读取：仅允许在主线程中调用；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="monoBehaviour"></param>
            <param name="client"></param>
            <param name="onRead"></param>
            <param name="onExit"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.ReadLoopAsync``1(XCSJ.Net.IClientNetPackage,System.Action{XCSJ.Net.IClientNetPackage,``0},System.Action{XCSJ.Net.IClientNetPackage},System.Action{XCSJ.Net.IClientNetPackage,System.Object})">
            <summary>
            读取循环：仅允许在主线程中调用；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="client"></param>
            <param name="onRead"></param>
            <param name="onExit"></param>
            <param name="onError"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TrySetOrAddSetHierarchyVarValue(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            对变量字符串设置或添加设置变量值-变量有(变量存在)则设置、无(变量不存在)则添加并设置
            </summary>
            <param name="varString">变量字符串</param>
            <param name="varValue">变量值</param>
            <param name="varStrings">变量字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryGetHierarchyVarValue(System.String,System.Object@)">
            <summary>
            尝试从变量字符串获取变量值
            </summary>
            <param name="varString"></param>
            <param name="varValue"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.GetHierarchyVarValue(System.String)">
            <summary>
            从变量字符串获取变量值
            </summary>
            <param name="varString"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.VarNameToVarString(System.String@)">
            <summary>
            变量名转变量字符串
            </summary>
            <param name="varName"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.OutputVarStringDescription(System.String)">
            <summary>
            输出变量字符串描述
            </summary>
            <param name="varString"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.CommonFun.TryCalculateExpression(System.String,System.Object@)">
            <summary>
            尝试计算表达式
            </summary>
            <param name="expressionString">表达式字符串：变量字符串可理解为特殊简化版的表达式字符串</param>
            <param name="calculateResult">计算结果：表达式字符串的计算结果；如果返回Flase时，本值会被赋值为表达式字符串</param>
            <returns>如果脚本管理器无效或是分析计算失败则返回False;</returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.IconHelper">
            <summary>
            图标助手
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IconHelper.GetIconInLib(System.Reflection.MemberInfo,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="memberInfo"></param>
            <param name="defaultIcon"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.IconHelper.GetIconInLib(System.String,UnityEngine.Texture2D)">
            <summary>
            从库中获取图标
            </summary>
            <param name="path"></param>
            <param name="defaultIcon"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.DelayData">
            <summary>
            延时数据
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayData.name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.DelayData.DefaultDelayTime">
            <summary>
            默认延时时间,单位秒
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayData.delayTime">
            <summary>
            延时时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayData.param">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayData.coroutine">
            <summary>
            协程对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayData.monoBehaviour">
            <summary>
            协程对象启动的组件对象
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.#ctor(System.Single,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.Start">
            <summary>
            启动延时:可在多线程环境下使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.Kill">
            <summary>
            销毁延时:可在多线程环境下使用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.OnStartCoroutine(UnityEngine.MonoBehaviour,UnityEngine.Coroutine)">
            <summary>
            当启动协程后回调
            </summary>
            <param name="monoBehaviour"></param>
            <param name="coroutine"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.OnStopCoroutine">
            <summary>
            当结束协程后回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayData.DelayFunc">
            <summary>
            延时函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.DelayAction">
            <summary>
            延时动作：使用<see cref="T:XCSJ.PluginCommonUtils.GlobalMB"/>组件的协程机制实现的延时处理;可在多线程环境下使用;
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayAction.action">
            <summary>
            动作
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.#ctor(System.Single,System.Object,System.Action{System.Object},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="action"></param>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.Invoke">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.DelayFunc">
            <summary>
            延时功能
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.Start(System.Single,System.Object,System.Action{System.Object},System.String)">
            <summary>
            创建并启动延时动作
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="action"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.Start(System.Action{System.Object},System.Object,System.Single,System.String)">
            <summary>
            创建并启动延时延时动作
            </summary>
            <param name="action"></param>
            <param name="param"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.Start(System.Action,System.Single,System.String)">
            <summary>
            创建并启动延时延时动作
            </summary>
            <param name="action"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayAction.Start(UnityEngine.MonoBehaviour,System.Action,System.Single,System.String)">
            <summary>
            创建并启动延时延时动作：仅可在主线程使用
            </summary>
            <param name="monoBehaviour"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.DelayLoopFunc">
            <summary>
            延时循环函数：使用<see cref="T:XCSJ.PluginCommonUtils.GlobalMB"/>组件的协程机制实现的延时处理;可在多线程环境下使用;
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.DelayLoopFunc.func">
            <summary>
            函数：返回值标识是否继续循环
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.#ctor(System.Single,System.Object,System.Func{System.Object,System.Boolean},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="func"></param>
            <param name="name"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.Invoke">
            <summary>
            调用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.DelayFunc">
            <summary>
            延时函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.Start(System.Single,System.Object,System.Func{System.Object,System.Boolean},System.String)">
            <summary>
            创建并启动延时循环函数
            </summary>
            <param name="delayTime"></param>
            <param name="param"></param>
            <param name="func"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.Start(System.Func{System.Object,System.Boolean},System.Object,System.Single,System.String)">
            <summary>
            创建并启动延时循环函数
            </summary>
            <param name="func"></param>
            <param name="param"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.Start(System.Func{System.Boolean},System.Single,System.String)">
            <summary>
            创建并启动延时循环函数
            </summary>
            <param name="func"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.DelayLoopFunc.Start(UnityEngine.MonoBehaviour,System.Action,System.Single,System.String)">
            <summary>
            创建并启动延时循环函数：仅可在主线程使用
            </summary>
            <param name="monoBehaviour"></param>
            <param name="action"></param>
            <param name="delayTime"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Tools.ToolAttribute">
            <summary>
            工具特性
            创建工具对象流程：
                在指定类型的根节点下创建分组，再在分组下创建工具
                
            根对象：
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.rootType"/> ：根对象类型
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.needRootParentIsNull"/> ：根对象的父对象是否为空
                
            组：
                默认会创建一个【工具名】+【组】的对象。例如 ：距离测量工具的组名为【距离测量组】
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.groupRule"/> 如果没有创建组，创建的工具对象直接连接在根对象下
                
            对象：
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.disallowMultiple"/> ：用于修饰创建的工具在全局中是否唯一，仅通过名称来判断唯一性
                
            目的：
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.purposes"/>用于过滤显示工具对象
                
            标签：
                <see cref="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.tags"/>具体含义由外围使用者解释、可用于显示工具对象子标签或各种小图标
            
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.needRootParentIsNull">
            <summary>
            需根对象的父对象为空
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.rootType">
            <summary>
            根节点类型 ：根节点类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.disallowMultiple">
            <summary>
            是否允许重复:当不重复时，整个场景只能有一个工具特性所修饰的对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.groupRule">
            <summary>
            创建组规则 ：为当前工具创建一个分组父对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.purposes">
            <summary>
            目标信息:辅助标签信息，可用于过滤所需显示的工具对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.ToolAttribute.tags">
            <summary>
            标签数组:具体含义由外围使用者解释，可用于显示工具对象子标签或各种小图标
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.ToolAttribute.#ctor(System.String)">
            <summary>
            工具特性
            </summary>
            <param name="category"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.ToolAttribute.#ctor(System.String,System.String[])">
            <summary>
            工具特性
            </summary>
            <param name="category"></param>
            <param name="purposes"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Tools.EToolGroupRule">
            <summary>
            工具组规则
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.EToolGroupRule.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.EToolGroupRule.Create">
            <summary>
            创建组
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Tools.TransformListener">
            <summary>
            变换监听器：用于监听变换的信息修改；当两个以上组件同时检查同一变换是否已改变，在先执行到的组件检查到该变换已更改并进行后续处理时，将该变换的已修改标记量执行了重置，导致后续组件检查该变换的已修改标记量为未修改的状态，从而无法正常处理针对该变换的交互逻辑；故此使用变换监听器解决针对变换的已修改标记量竞争使用的冲突问题；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.Tools.TransformListener.onTransformHasChanged">
            <summary>
            当变换已更改：当变换的信息已发生修改后回调；在本事件回调前，变换的已修改标记量已被重置；
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData">
            <summary>
            变换数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData.transform">
            <summary>
            变换
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData.count">
            <summary>
            计数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData.Add">
            <summary>
            增加：计数加一
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData.Remove">
            <summary>
            移除：计数减一
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.TransformData.NeedRemove">
            <summary>
            需要移除：当计数小于等于0时，认为需要移除；
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Tools.TransformListener.listenTransforms">
            <summary>
            正在监听的变换列表
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Add(UnityEngine.GameObject[])">
            <summary>
            添加：将游戏对象列表中对应的变换添加到监听列表中；
            </summary>
            <param name="gameObjects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Add(UnityEngine.Transform[])">
            <summary>
            添加：将变换列表中所有的变换添加到监听列表中；
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.InternalAdd(UnityEngine.Transform)">
            <summary>
            内部添加：有则增加计数，无则新增并增加计数
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Remove(UnityEngine.GameObject[])">
            <summary>
            移除：将游戏对象列表中对应的变换从监听列表中移除；
            </summary>
            <param name="gameObjects"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Remove(UnityEngine.Transform[])">
            <summary>
            移除：将变换列表中所有的变换从监听列表中移除；
            </summary>
            <param name="transforms"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.InternalRemove(UnityEngine.Transform)">
            <summary>
            内部移除：有则减少计数，无则不处理
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Release">
            <summary>
            销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.Tools.TransformListener.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.Product">
            <summary>
            产品类
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.Author">
            <summary>
            作者
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.CompanyAbbreviations">
            <summary>
            公司简称
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.CompanyWebSite">
            <summary>
            公司网址
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.CompanyURL">
            <summary>
            公司URL
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.WebSite">
            <summary>
            产品网址
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.URL">
            <summary>
            产品URL
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.Name">
            <summary>
            产品名称
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.DescriptionEN">
            <summary>
            英文描述
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.UnityVersion">
            <summary>
            推荐使用的Unity版本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.Version">
            <summary>
            产品版本
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.Product.PubliclyLastedVersion">
            <summary>
            公开的最新版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Product.coreVersion">
            <summary>
            产品核心版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Product.fullVersion">
            <summary>
            产品的完整版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Product.startTime">
            <summary>
            产品启动时间
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Product.temporaryCachePath">
            <summary>
            临时缓冲路径;可读写;
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.Product.persistentDataPath">
            <summary>
            持久数据路径;可读写;
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.LocalDogServerPath">
            <summary>
            本地加密狗服务路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LocalDogServerPath.level">
            <summary>
            级别：值越低,优先级越高（即越优先尝试使用）
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.LocalDogServerPath.path">
            <summary>
            路径
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.LocalDogServerPath.#ctor(System.String,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="path"></param>
            <param name="level"></param>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer">
            <summary>
            XDreamer组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.Version">
            <summary>
            产品版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.coreVersion">
            <summary>
            核心版本：即 XCSJ.dll文件的程序集版本,格式为: [编译的年.月.日.SVN版本号];不代表各插件管理器的版本信息;
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.unityVersion">
            <summary>
            Unity版本：XDreamer推荐使用的Unity版本
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.watermaker_249x50">
            <summary>
            XDreamer水印纹理，白色，249x50
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.watermaker">
            <summary>
            XDreamer水印纹理，白色，200x198
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.logo">
            <summary>
            XDreamer Logo纹理，彩色，200x198
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.XCSJWatermaker">
            <summary>
            XCSJ水印纹理，白色，256x69
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.XCSJLogo">
            <summary>
            XCSJ Logo纹理，彩色，670x666
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.localDogServerPath">
            <summary>
            本地加密狗服务路径：用于旧版中流资产目录下的本地加密狗服务路径，为兼容旧版保留；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.getLocalDogServerPath">
            <summary>
            获取本地加密狗服务路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.validLocalDogServerPath">
            <summary>
            有效本地加密狗服务路径
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.Root">
            <summary>
            根节点的静态成员对象 属性器
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.onAwake">
            <summary>
            当唤醒<see cref="M:XCSJ.PluginCommonUtils.XDreamer.Awake"/>调用时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.onDestroy">
            <summary>
            当销毁<see cref="M:XCSJ.PluginCommonUtils.XDreamer.OnDestroy"/>时回调：此时底层数据还未完全清理；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.onWillCreateRoot">
            <summary>
            当将要创建根时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.onCreatedRoot">
            <summary>
            根创建后回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamer.onCreatedManager">
            <summary>
            创建管理器对象后回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.CreateRoot(System.Type[])">
            <summary>
            创建根
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.StartManager``1">
            <summary>
            启动管理器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.StartManager(System.Type[])">
            <summary>
            启动管理器
            </summary>
            <param name="types">期望启用的管理类</param>
            <returns>认证成功返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.IsMustEnable(XCSJ.ComponentModel.EKit,XCSJ.ComponentModel.EComponentOption)">
            <summary>
            是必须启用的组件
            </summary>
            <param name="kit"></param>
            <param name="componentOptionType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.IsRecommendedEnabled(XCSJ.ComponentModel.EKit,XCSJ.ComponentModel.EComponentOption)">
            <summary>
            判断是否是推荐启用的组件
            </summary>
            <param name="kit">包类型</param>
            <param name="componentOptionType">组件选项类型</param>
            <returns>是否推荐启用的返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.IsRecommendedEnabled(XCSJ.ComponentModel.EComponentOption)">
            <summary>
            判断是否是推荐启用的组件
            </summary>
            <param name="componentOptionType">组件选项类型</param>
            <returns>是否推荐启用的返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.CheckAccess(System.Boolean)">
            <summary>
            检查权限
            </summary>
            <param name="updateLocalAccess">更新本地权限：强制更新本地权限标记量</param>
            <returns>有权限返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.HasTypeAccess(System.Type)">
            <summary>
            有类型权限
            </summary>
            <param name="componentType">组件类型</param>
            <returns>有权限返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.HasExtensionAccess">
            <summary>
            有扩展权限
            </summary>
            <returns></returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.accessObjects">
            <summary>
            权限对象队列
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.RegisterAccess(UnityEngine.Object)">
            <summary>
            注册权限
            </summary>
            <param name="accessObject"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InternalCheckAccessObjects">
            <summary>
            内部检查权限对象列表：检查所有权限对象的使用权限，调用一次，检查一个对象的使用权限；
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.IsNeedCheckAccessType(System.Type)">
            <summary>
            是需要检查权限的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InternalRelease">
            <summary>
            内部销毁
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InternalCheckAccess(System.Boolean)">
            <summary>
            内部检查权限
            </summary>
            <param name="updateLocalAccess"></param>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AccessData.data">
            <summary>
            安全证书数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AccessData.otherInfo">
            <summary>
            SCD扩展信息
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AccessData.expirationTime">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.AccessData.CheckSignature(System.String)">
            <summary>
            检查签名
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.AccessData.CheckTypeAccess(System.Type)">
            <summary>
            检查类型权限
            </summary>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.GetAccessData(XCSJ.PluginCommonUtils.XDreamer.AccessData@,System.Boolean)">
            <summary>
            获取权限数据
            </summary>
            <param name="data"></param>
            <param name="updateLocalAccess"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.Awake">
            <summary>
            运行时候才会被启用的！
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.OnDestroy">
            <summary>
            销毁时
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.OnEnable">
            <summary>
            当启用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.OnDisable">
            <summary>
            当禁用
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.hasWatermark">
            <summary>
            当关联账户有水印或者认证失败时会绘制水印
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.OnGUI">
            <summary>
            当绘制GUI时回调
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.OnRenderObject">
            <summary>
            当绘制对象时调用
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.Update">
            <summary>
            更新函数
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.GetManagerTypesInApp">
            <summary>
            获取程序中所有的管理器类型
            </summary>
            <returns>管理器类型列表</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.GetManagerTypeInfosInAppWithSort">
            <summary>
            获取程序中所有的管理器类型信息并且排序
            </summary>
            <returns>排序后的管理器类型信息列表</returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer._managerTypeInfos">
            <summary>
            插件管理器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.managerTypeInfos">
            <summary>
            插件管理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InitManagerTypeInfosIfNeed">
            <summary>
            如果需要初始化管理器类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InitManagerTypeInfos">
            <summary>
            初始化管理器类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.DeleteInvalidManager">
            <summary>
            删除无效管理器
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InternalAddManagers(System.Collections.Generic.List{System.Type})">
            <summary>
            内部批量添加管理器
            </summary>
            <param name="types"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InternalAddManager(System.Type)">
            <summary>
            内部添加管理器
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo">
            <summary>
            管理器类型信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo._typeFullName">
            <summary>
            指向的类型的全名;携带的命名空间等信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo._managerTransform">
            <summary>
            管理器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.managerTransform">
            <summary>
            管理器变换
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.manager">
            <summary>
            管理器
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.type">
            <summary>
            存储当前管类的类型，不需要存储；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.typeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.componentOption">
            <summary>
            组件选项
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.kit">
            <summary>
            组件包
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.hasAccessWeak">
            <summary>
            有弱权限：标识当前记录的管理器类型是否有使用权限;即经过认证后是允许使用的类型
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.IsSameType(System.Type)">
            <summary>
            检测是否是相同类型
            </summary>
            <param name="type">待检测的类型</param>
            <returns>类型的全名称相同返回True；否则返回False</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.#ctor(System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.FindManager(UnityEngine.Component)">
            <summary>
            查找管理器
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.CompareTo(XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo)">
            <summary>
            与其他比较
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.Compare(XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo,XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo)">
            <summary>
            比较方法
            </summary>
            <param name="x">管类器类型信息对象x</param>
            <param name="y">管类器类型信息对象y</param>
            <returns>依次根据包、组件类型、IndexAttribute特性、名称进行排序</returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ManagerTypeInfo.Compare(System.Type,System.Type)">
            <summary>
            比较方法
            </summary>
            <param name="x">管类器类型</param>
            <param name="y">管类器类型</param>
            <returns>依次根据包、组件类型、IndexAttribute特性、名称进行排序</returns>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer._authenticationData">
            <summary>
            认证信息
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.InitDogCheckInfo">
            <summary>
            初始化运行时检测，做一些相关参数的初始化
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData">
            <summary>
            认证数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.sceneID">
            <summary>
            生成后不再修改~~用于标识当前场景的guid
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.originalUserGuid">
            <summary>
            用户GUID(原始),为本场景创建XDreamer根节点的用户GUID信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.userGuid">
            <summary>
            用户GUID,最后一次编辑本场景的用户GUID信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.originalDeviceID">
            <summary>
            设备ID(原始),为本场景创建XDreamer根节点的设备ID信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.deviceID">
            <summary>
            设备ID，最后一次编辑本场景的设备ID信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.editDogCheckInfo">
            <summary>
            编辑器认证信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.runtimeNeedCheck">
            <summary>
            场景在发布之后启动执行时认证
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.runtimeServerInfoSameWithEdit">
            <summary>
            场景在发布之后启动执行时认证信息与编辑器认证信息一致
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.runtimeDogCheckInfo">
            <summary>
            运行时认证信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData._xrCheckInfo">
            <summary>
            XR认证信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.LocalIP">
            <summary>
            环回地址
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.dogCheckInfo">
            <summary>
            加密狗检测信息对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.netRSAPublicKey">
            <summary>
            网络RSA公钥
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.ip">
            <summary>
            认证服务的IP
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.port">
            <summary>
            认证服务的端口
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.GetAccessData">
            <summary>
            获取权限数据：从网络数据最新的权限数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.GetAccessData_V7">
            <summary>
            获取权限数据V7：从网络数据最新的权限数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.AuthenticationData.GetMD5Text">
            <summary>
            获取MD5文本
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo">
            <summary>
            加密狗检测信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.serverIP">
            <summary>
            联网校验时的ip
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.serverPort">
            <summary>
            联网校验时的port
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.serverLoginName">
            <summary>
            远程服务登录名
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.serverLoginPassword">
            <summary>
            远程服务登录密码
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.localPort">
            <summary>
            单机检测的端口
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.isLocalCheck">
            <summary>
            使用本地或远程服务器信息执行认证
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.autoCheck">
            <summary>
            自动检测，即自动在本地或远程服务器之间进行认证
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.DogCheckInfo.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer._extendedFunction">
            <summary>
            扩展功能
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction">
            <summary>
            扩展功能
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.scdaOtherInfo">
            <summary>
            存储加密狗认证服务相关的扩展功能对象
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.needCheckInPlayer">
            <summary>
            在播放器内需要检查
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.needCheckAtRuntime">
            <summary>
            在运行时需要检查
            </summary>
            <returns></returns>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.needCheckAtRuntimeInEditor">
            <summary>
            在编辑器内运行时需要检查
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.runtimeNeedCheck">
            <summary>
            运行时需要检查：在非编辑器内编辑时，是否需要检查；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.logoWatermark">
            <summary>
            Logo水印
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.hasAccessWeak">
            <summary>
            标识有无权限的弱标记量；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.expirationTime">
            <summary>
            过期时间：用于界面显示时使用
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.isForeverValid">
            <summary>
            是永久有效：超过2099-1-1为永久
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamer.ExtendedFunction.HasAccess">
            <summary>
            有权限
            </summary>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo">
            <summary>
            XR检测信息
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo._serverIP">
            <summary>
            远程服务IP/域名：联网校验时的IP地址
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo._serverPort">
            <summary>
            远程服务端口：联网校验时端口
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo._activeAuthenticationInEditorPlayMode">
            <summary>
            在编辑器播放模式时激活认证：为True时，在编辑器播放模式时激活与XR交互空间（XRIS）服务进行XR权限认证
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamerMenu">
            <summary>
            XDreamer菜单类
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Separator">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.NamePath">
            <summary>
            名称路径
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Legacy">
            <summary>
            旧版
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.ScriptEvent">
            <summary>
            脚本事件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Component">
            <summary>
            组件
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.ToolkitWindow">
            <summary>
            工具包窗口,请使用EditorWindow代替
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.EditorWindow">
            <summary>
            编辑窗口
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Toolkit">
            <summary>
            工具包,不推荐使用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.ToolkitRT">
            <summary>
            工具包(运行时),不推荐使用
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.Experimental">
            <summary>
            试验
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerMenu.ExperimentalRT">
            <summary>
            试验(运行时),不推荐使用
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamerEvents">
            <summary>
            XDreamer事件类:回发的事件有的是仅在编辑器时回调、有的仅在运行时回调、有的在编辑器与运行时均可能回调；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onPlayModeChangedInEditor">
            <summary>
            编辑器播放模式变更事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onSceneAnyAssetsChanged"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallPlayModeChangedInEditor">
            <summary>
            调用编辑器播放模式变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onBeforeCompileAllAssetsInEditor">
            <summary>
            编辑器开始编译所有资产事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsChangedInEditor"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallBeforeCompileAllAssetsInEditor">
            <summary>
            调用编辑器开始编译所有资产事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onBeforeAssemblyReloadInEditor">
            <summary>
            编辑器开始程序集重新导入事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsChangedInEditor"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallBeforeAssemblyReloadInEditor">
            <summary>
            调用编辑器开始程序集重新导入事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAfterAssemblyReloadInEditor">
            <summary>
            编辑器完成程序集重新导入事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsChangedInEditor"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallAfterAssemblyReloadInEditor">
            <summary>
            调用编辑器完成程序集重新导入事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsChangedInEditor">
            <summary>
            编辑器中Project窗口任意资产变更事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsChanged"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallProjectAnyAssetsChangedInEditor">
            <summary>
            调用编辑器中Project窗口任意资产变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsOrOptionChangedInEditor">
            <summary>
            编辑器中Project窗口任意资产或配置变更事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsOrOptionChanged"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallProjectAnyAssetsOrOptionChangedInEditor">
            <summary>
            调用编辑器中Project窗口任意资产变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyOptionChangedInEditor">
            <summary>
            编辑器中任意配置(XDreamer首选项中配置)变更事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onProjectAnyAssetsOrOptionChangedInEditor"/>事件；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallAnyOptionChangedInEditor">
            <summary>
            调用编辑器中任意配置(XDreamer首选项中配置)变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onPingObjectInEditor">
            <summary>
            编辑器中Ping对象事件:参数依次为；待Ping的对象、是否强制Ping对象；编辑器事件；
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallPingObjectInEditor(UnityEngine.Object,System.Boolean)">
            <summary>
            Ping对象
            </summary>
            <param name="obj">待Ping的对象</param>
            <param name="force">是否强制Ping对象</param>
            <returns>如果成功处理事件返回True，否则False</returns>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsOrOptionChanged">
            <summary>
            任意资产或配置变更事件:编辑器与运行时事件;
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallAnyAssetsOrOptionChanged">
            <summary>
            调用任意资产或配置变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsChanged">
            <summary>
            任意资产(包括单间激活的场景资产与Project窗口中可见资产)变更事件,当撤销或重做时也会调用本函数；会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsOrOptionChanged"/>事件；编辑器与运行时事件;
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallAnyAssetsChanged">
            <summary>
            调用中任意资产(包括单间激活的场景资产与Project窗口中可见资产)变更事件,当撤销或重做时也会调用本函数；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onSceneAnyAssetsChanged">
            <summary>
            场景（当前激活的场景）任意资产变更事件：会后续同步回调<see cref="E:XCSJ.PluginCommonUtils.XDreamerEvents.onAnyAssetsChanged"/>事件；编辑器与运行时事件;
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallSceneAnyAssetsChanged">
            <summary>
            调用场景（当前激活的场景）任意资产变更事件
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onObjectMemberValueChanged">
            <summary>
            当对象的成员值变化时回调：参数依次为：被修改的对象、成员名称、成员变化前的值；编辑器与运行时事件;
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallObjectMemberValueChanged(UnityEngine.Object,System.String,System.Object)">
            <summary>
            调用当对象的成员值变化后回调事件
            </summary>
            <param name="obj">被修改的对象</param>
            <param name="memberName">成员名称；如成员名称为空（null或空字符串）表示，对象发生修改但不清楚具体发生值变化的成员名称</param>
            <param name="lastValue">成员变化前的值；如不清楚具体发生值变化的成员名称，本值为null</param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerEvents.CallXRAnswerReceived(XCSJ.PluginCommonUtils.Safety.XR.XRAnswer)">
            <summary>
            调用收到XR答案
            </summary>
            <param name="answer"></param>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onXRAnswerReceived">
            <summary>
            当收到XR答案时回调:多线程回调，由XR交互空间服务发送的XR网络消息；运行时事件；
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onXRConnected">
            <summary>
            当XR已连接时回调
            </summary>
        </member>
        <member name="E:XCSJ.PluginCommonUtils.XDreamerEvents.onXRClosed">
            <summary>
            当XR已关闭时回调
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.ENoAccessReason">
            <summary>
            无权限原因
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.XDreamerInvalid">
            <summary>
            XDreamer无效
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.AuthenticationFailed">
            <summary>
            认证失败
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.ManagerInvalid">
            <summary>
            管理器无效
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.ManagerNoAccess">
            <summary>
            管理器无权限
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.ManagerNoXRAccess">
            <summary>
            管理器无XR权限
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.InvalidType">
            <summary>
            无效类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.NoExtensionAccess">
            <summary>
            无扩展权限
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.ENoAccessReason.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.EAccessObjectType">
            <summary>
            权限对象类型
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAccessObjectType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAccessObjectType.AccessObject">
            <summary>
            权限对象
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.EAccessObjectType.XRAccessObject">
            <summary>
            XR权限对象
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamerAccessHelper">
            <summary>
            XDreamer权限助手类
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerAccessHelper.DefaultRecheckTime">
            <summary>
            默认的重新检查时间：单位为秒；
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.accessDataJson">
            <summary>
            权限数据JSON
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.componentInfoSet">
            <summary>
            组件信息集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AddManagerOfHasAccess(XCSJ.PluginCommonUtils.Manager)">
            <summary>
            添加有权限的管理器
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.RemoveAccess(XCSJ.PluginCommonUtils.Manager)">
            <summary>
            移除权限
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.HasAccess(XCSJ.PluginCommonUtils.Manager)">
            <summary>
            有无权限
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.ClearManagerOfHasAccess">
            <summary>
            清理有权限的管理器
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.IsNeedCheckAccessRuntimePlatform">
            <summary>
            是否需要检测权限的运行时平台
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckAccessAndHandle(XCSJ.PluginCommonUtils.MB)">
            <summary>
            检查权限并处理:仅在运行时有效
            </summary>
            <param name="mb"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckAccessAndHandle(UnityEngine.Object)">
            <summary>
            检查权限并处理
            </summary>
            <param name="accessObject"></param>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckAccess(UnityEngine.Object,System.Type@,XCSJ.PluginCommonUtils.EAccessObjectType@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            检查权限
            </summary>
            <param name="accessObject"></param>
            <param name="noAccessManagerType"></param>
            <param name="accessObjectType"></param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckAccess(UnityEngine.Object,XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData,System.Type@,XCSJ.PluginCommonUtils.EAccessObjectType@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            检查权限
            </summary>
            <param name="accessObject"></param>
            <param name="accessData"></param>
            <param name="noAccessManagerType"></param>
            <param name="accessObjectType"></param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.IsNeedCheckXRAccessRuntimePlatform">
            <summary>
            是否需要检测XR权限的运行时平台
            </summary>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckXRAccess(XCSJ.Interfaces.IBaseManager,XCSJ.PluginCommonUtils.EAccessObjectType@)">
            <summary>
            检查XR权限
            </summary>
            <param name="manager"></param>
            <param name="accessObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckXRAccess(XCSJ.Interfaces.IBaseManager,XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData,XCSJ.PluginCommonUtils.EAccessObjectType@)">
            <summary>
            检查XR权限
            </summary>
            <param name="manager"></param>
            <param name="accessData"></param>
            <param name="accessObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.CheckAccess(System.Collections.Generic.IEnumerable{System.Type},System.Type@,XCSJ.PluginCommonUtils.EAccessObjectType@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            检查权限：检查当前激活场景中所有的期望限定的管理器类型都存在实体对象并且有使用权限
            </summary>
            <param name="managerTypes">管理类类型集合</param>
            <param name="noAccessManagerType">无权限的管理类类型</param>
            <param name="accessObjectType"></param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData">
            <summary>
            权限数据
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.items">
            <summary>
            项列表:组件与管理器类关系
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.maps">
            <summary>
            映射：组件与管理器类关系项
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.xrTypes">
            <summary>
            XR管理类列表
            </summary>
        </member>
        <member name="F:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.xrTypeMaps">
            <summary>
            XR管理类集合
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.CheckAccess(UnityEngine.Object,System.Type@,XCSJ.PluginCommonUtils.EAccessObjectType@,XCSJ.PluginCommonUtils.ENoAccessReason@)">
            <summary>
            检查权限
            </summary>
            <param name="obj"></param>
            <param name="noAccessManagerType"></param>
            <param name="accessObjectType"></param>
            <param name="noAccessReason"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.IsNeedCheckAccessType(UnityEngine.Object)">
            <summary>
            是否是需要检查权限类型；会检查权限数据文件
            </summary>
            <param name="accessObject"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.IsNeedCheckAccessType(System.Type)">
            <summary>
            是否是需要检查权限类型；会检查权限数据文件
            </summary>
            <param name="accessObjectType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.IsNeedCheckXRAccessType(System.Type)">
            <summary>
            是否是需要检查XR权限类型；会检查权限数据文件
            </summary>
            <param name="managerType"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.CheckXRAccess(XCSJ.Interfaces.IBaseManager,XCSJ.PluginCommonUtils.EAccessObjectType@)">
            <summary>
            检查XR权限
            </summary>
            <param name="manager"></param>
            <param name="accessObjectType"></param>
            <returns></returns>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.Item">
            <summary>
            项：组件与管理器类关系项
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.Item.componentTypeFullName">
            <summary>
            组件类型全名称
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.Item.componentType">
            <summary>
            组件类型
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.Item.managerTypeFullNames">
            <summary>
            管理器类型全名称列表
            </summary>
        </member>
        <member name="P:XCSJ.PluginCommonUtils.XDreamerAccessHelper.AccessData.Item.managerTypes">
            <summary>
            管理器类型列表
            </summary>
        </member>
        <member name="T:XCSJ.PluginCommonUtils.XRAccessHelper">
            <summary>
            XR权限组手类
            </summary>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XRAccessHelper.StartIfNeed(XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo)">
            <summary>
            如果需要则启动
            </summary>
            <param name="checkInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XRAccessHelper.Start(XCSJ.PluginCommonUtils.XDreamer.XRCheckInfo)">
            <summary>
            启动
            </summary>
            <param name="checkInfo"></param>
            <returns></returns>
        </member>
        <member name="M:XCSJ.PluginCommonUtils.XRAccessHelper.Stop">
            <summary>
            停止
            </summary>
        </member>
    </members>
</doc>
